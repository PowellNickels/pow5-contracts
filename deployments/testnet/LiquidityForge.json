{
  "address": "0xf72b17ACAAe37617D16F40a23eD9e26CDe9ba561",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "theReserve_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defiManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yieldHarvest_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "erc20InterestFarm_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "borrowPow5",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defiManager",
      "outputs": [
        {
          "internalType": "contract IDeFiManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20InterestFarm",
      "outputs": [
        {
          "internalType": "contract IERC20InterestFarm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpSft",
      "outputs": [
        {
          "internalType": "contract ILPSFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noLpSft",
      "outputs": [
        {
          "internalType": "contract IERC1155Enumerable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pow5Token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayPow5",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "theReserve",
      "outputs": [
        {
          "internalType": "contract ITheReserve",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldHarvest",
      "outputs": [
        {
          "internalType": "contract IYieldHarvest",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xda7175729a62bc2b76d118146ab10d2207cf7add04da45b8674b9c878f6102f8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5Eb8d8a368B1F1A9de0c2E489e270d7AFD389C3C",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "655428",
    "logsBloom": "0x
    "blockHash": "0x57ab3c097d4e3d9965af17901e7ecbffa7e77b8c71996c8b0188ac12992d749a",
    "transactionHash": "0xda7175729a62bc2b76d118146ab10d2207cf7add04da45b8674b9c878f6102f8",
    "logs": [],
    "blockNumber": 80,
    "cumulativeGasUsed": "655428",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDa87C152723FA5d88D499D1722a2739c5cDaD9Ac",
    "0xe49ebe3Cf0BaA0cae0C03Dd9d19CA855463Cbb41",
    "0x7d49d84221468D1ED0BaB162402EbA19F90e2992",
    "0xbE8178365C88851CA1BdB326E13CBA2A3bdc64c1"
  ],
  "numDeployments": 1,
  "solcInputHash": "607dfe4437c93ddfbd36914a2ea77f31",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theReserve_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defiManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldHarvest_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20InterestFarm_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"borrowPow5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defiManager\",\"outputs\":[{\"internalType\":\"contract IDeFiManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20InterestFarm\",\"outputs\":[{\"internalType\":\"contract IERC20InterestFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSft\",\"outputs\":[{\"internalType\":\"contract ILPSFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noLpSft\",\"outputs\":[{\"internalType\":\"contract IERC1155Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pow5Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayPow5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"theReserve\",\"outputs\":[{\"internalType\":\"contract ITheReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldHarvest\",\"outputs\":[{\"internalType\":\"contract IYieldHarvest\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"borrowPow5(uint256,uint256,address)\":{\"details\":\"See {ILiquidityForge-borrowPow5}\"},\"constructor\":{\"details\":\"Initializes the Liquidity Forge contract\",\"params\":{\"defiManager_\":\"The LP-SFT manager contract\",\"erc20InterestFarm_\":\"The ERC20 interest farm\",\"theReserve_\":\"The Reserve smart contract address\",\"yieldHarvest_\":\"The Yield Harvest contract\"}},\"repayPow5(uint256,uint256)\":{\"details\":\"See {ILiquidityForge-repayPow5}\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"}},\"stateVariables\":{\"defiManager\":{\"details\":\"The LP-SFT manager contract\"},\"erc20InterestFarm\":{\"details\":\"The ERC20 interest farm\"},\"lpSft\":{\"details\":\"The LP-SFT token contract\"},\"noLpSft\":{\"details\":\"The LP-SFT debt contract\"},\"pow5Token\":{\"details\":\"The POW5 token contract\"},\"theReserve\":{\"details\":\"The Reserve smart contract\"},\"yieldHarvest\":{\"details\":\"The Liquidity Forge contract\"}},\"title\":\"Bureau of the Liquidity Forge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/bureaucracy/LiquidityForge.sol\":\"LiquidityForge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x68d6fdbeb467192c3627a46aa7bf5cbb73267363b740abc511f521a5a41a446e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC-1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC-1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap-v3-core/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the LP pool init code hash\\n    /// @return The LP pool init code hash\\n    function poolCodeHash() external pure returns (bytes32);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xdd80bc8aaf3eccde7f681433499460a43b33e03167952db56b23f5f34e5ae200\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-periphery/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-periphery/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0x6d7fc57d804d6b4989cade5213d44c7bef99642735448887c03a20e703d6087c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-periphery/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-periphery/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-periphery/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"contracts/src/bureaucracy/LiquidityForge.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport {ILiquidityForge} from \\\"../interfaces/bureaucracy/ILiquidityForge.sol\\\";\\nimport {IYieldHarvest} from \\\"../interfaces/bureaucracy/yieldHarvest/IYieldHarvest.sol\\\";\\nimport {ITheReserve} from \\\"../interfaces/bureaucracy/theReserve/ITheReserve.sol\\\";\\nimport {IDeFiManager} from \\\"../interfaces/defi/IDeFiManager.sol\\\";\\nimport {IERC20InterestFarm} from \\\"../interfaces/defi/IERC20InterestFarm.sol\\\";\\nimport {ILPSFT} from \\\"../interfaces/token/ERC1155/ILPSFT.sol\\\";\\nimport {IERC1155Enumerable} from \\\"../interfaces/token/ERC1155/extensions/IERC1155Enumerable.sol\\\";\\n\\n/**\\n * @title Bureau of the Liquidity Forge\\n */\\ncontract LiquidityForge is Context, ReentrancyGuard, ILiquidityForge {\\n  using SafeERC20 for IERC20;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Routes\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The Reserve smart contract\\n   */\\n  ITheReserve public immutable theReserve;\\n\\n  /**\\n   * @dev The LP-SFT token contract\\n   */\\n  ILPSFT public immutable lpSft;\\n\\n  /**\\n   * @dev The LP-SFT debt contract\\n   */\\n  IERC1155Enumerable public immutable noLpSft;\\n\\n  /**\\n   * @dev The LP-SFT manager contract\\n   */\\n  IDeFiManager public defiManager;\\n\\n  /**\\n   * @dev The POW5 token contract\\n   */\\n  IERC20 public immutable pow5Token;\\n\\n  /**\\n   * @dev The Liquidity Forge contract\\n   */\\n  IYieldHarvest public immutable yieldHarvest;\\n\\n  /**\\n   * @dev The ERC20 interest farm\\n   */\\n  IERC20InterestFarm public immutable erc20InterestFarm;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Initializes the Liquidity Forge contract\\n   *\\n   * @param theReserve_ The Reserve smart contract address\\n   * @param defiManager_ The LP-SFT manager contract\\n   * @param yieldHarvest_ The Yield Harvest contract\\n   * @param erc20InterestFarm_ The ERC20 interest farm\\n   */\\n  constructor(\\n    address theReserve_,\\n    address defiManager_,\\n    address yieldHarvest_,\\n    address erc20InterestFarm_\\n  ) {\\n    // Validate parameters\\n    require(defiManager_ != address(0), \\\"Invalid LP-SFT mgr\\\");\\n    require(yieldHarvest_ != address(0), \\\"Invalid yield harvest\\\");\\n    require(erc20InterestFarm_ != address(0), \\\"Invalid interest farm\\\");\\n\\n    // Initialize routes\\n    theReserve = ITheReserve(theReserve_);\\n    lpSft = ILPSFT(ITheReserve(theReserve_).lpSft());\\n    noLpSft = IERC1155Enumerable(ITheReserve(theReserve_).noLpSft());\\n    defiManager = IDeFiManager(defiManager_);\\n    pow5Token = IERC20(ITheReserve(theReserve_).pow5Token());\\n    yieldHarvest = IYieldHarvest(yieldHarvest_);\\n    erc20InterestFarm = IERC20InterestFarm(erc20InterestFarm_);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IERC165} via {ILiquidityForge}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public pure override returns (bool) {\\n    return interfaceId == type(ILiquidityForge).interfaceId;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {ILiquidityForge}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {ILiquidityForge-borrowPow5}\\n   */\\n  function borrowPow5(\\n    uint256 tokenId,\\n    uint256 amount,\\n    address receiver\\n  ) external override nonReentrant {\\n    // Validate ownership\\n    require(noLpSft.ownerOf(tokenId) == _msgSender(), \\\"Not NOLPSFT owner\\\");\\n\\n    // Get LP-SFT address\\n    address lpSftAddress = lpSft.tokenIdToAddress(tokenId);\\n\\n    // Validate address\\n    require(lpSftAddress != address(0), \\\"Invalid LP-SFT\\\");\\n\\n    // Call external contracts\\n    erc20InterestFarm.recordLoan(lpSftAddress, amount);\\n    defiManager.issuePow5(tokenId, amount, receiver);\\n  }\\n\\n  /**\\n   * @dev See {ILiquidityForge-repayPow5}\\n   */\\n  function repayPow5(\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external override nonReentrant {\\n    // Validate ownership\\n    require(noLpSft.ownerOf(tokenId) == _msgSender(), \\\"Not NOLPSFT owner\\\");\\n\\n    // Get LP-SFT address\\n    address lpSftAddress = lpSft.tokenIdToAddress(tokenId);\\n\\n    // Validate address\\n    require(lpSftAddress != address(0), \\\"Invalid LP-SFT\\\");\\n\\n    // Call external contracts\\n    pow5Token.safeTransferFrom(_msgSender(), address(this), amount);\\n    erc20InterestFarm.recordRepayment(lpSftAddress, amount);\\n    defiManager.repayPow5(tokenId, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xd61f598700fe97c5db15997f68f6212921863b2edaf37c79791dd165cac866a4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/bureaucracy/ILiquidityForge.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title Bureau of the Liquidity Forge\\n *\\n * Collateralize the LP-NFT with a collateralization ratio of up to 100x in\\n * return for a POW5 loan with negative interest.\\n *\\n * Like US dollars, POW5 is loaned into existence. Loan interest is set by an\\n * inverted yield curve.\\n *\\n * Loans can be refinanced at any time. While collateralized, the DeFi\\n * can be claimed by repaying the POW5 (which is destroyed) or by using a flash\\n * loan.\\n *\\n * If the player defaults on the POW5 loan, the game is over for that LP-\\n * and the player walks away with the POW5 principal plus interest and claimed\\n * DeFi yield. Staked value and unclaimed yield is sold off by The Reserve for\\n * the unpaid POW5 (which is destroyed). The empty LP-NFT returned to the\\n * player as a keepsake.\\n */\\ninterface ILiquidityForge is IERC165 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Borrow POW5 against a collateralized LP-SFT\\n   *\\n   * @param tokenId The LP-SFT token ID\\n   * @param amount The amount of POW5 to borrow\\n   * @param receiver The receiver of the POW5\\n   */\\n  function borrowPow5(\\n    uint256 tokenId,\\n    uint256 amount,\\n    address receiver\\n  ) external;\\n\\n  /**\\n   * @dev Repay POW5 against a collateralized LP-SFT\\n   *\\n   * @param tokenId The LP-SFT ID\\n   */\\n  function repayPow5(uint256 tokenId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8d9b89ab0a4707c4c707b90cb28005d875fe531d661306cb1c0f338ca3020823\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/bureaucracy/theReserve/ITheReserve.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {ITheReserveRoutes} from \\\"./ITheReserveRoutes.sol\\\";\\n\\ninterface ITheReserve is IERC165, ITheReserveRoutes {}\\n\",\"keccak256\":\"0x733aa3d7ef5f7fe5bcd35cf9717e3d9b9bfbca1c2163866460db7e35dc978e3d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/bureaucracy/theReserve/ITheReserveRoutes.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IUniswapV3Factory} from \\\"../../../../interfaces/uniswap-v3-core/IUniswapV3Factory.sol\\\";\\nimport {IUniswapV3Pool} from \\\"../../../../interfaces/uniswap-v3-core/IUniswapV3Pool.sol\\\";\\nimport {INonfungiblePositionManager} from \\\"../../../../interfaces/uniswap-v3-periphery/INonfungiblePositionManager.sol\\\";\\n\\nimport {ILPNFTStakeFarm} from \\\"../../defi/ILPNFTStakeFarm.sol\\\";\\nimport {ILPSFTLendFarm} from \\\"../../defi/ILPSFTLendFarm.sol\\\";\\nimport {IUniV3StakeFarm} from \\\"../../defi/IUniV3StakeFarm.sol\\\";\\nimport {ILPSFT} from \\\"../../token/ERC1155/ILPSFT.sol\\\";\\nimport {INOLPSFT} from \\\"../../token/ERC1155/INOLPSFT.sol\\\";\\nimport {IGameTokenPooler} from \\\"../../token/routes/IGameTokenPooler.sol\\\";\\nimport {IGameTokenSwapper} from \\\"../../token/routes/IGameTokenSwapper.sol\\\";\\nimport {IMarketStableSwapper} from \\\"../../token/routes/IMarketStableSwapper.sol\\\";\\n\\n/**\\n * @title The Reserve Smart Contract, Routing Interface\\n *\\n * @dev These routes provide access to the contracts that The Reserve's various\\n * bureaus interact with\\n */\\ninterface ITheReserveRoutes is IERC165 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Types\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  struct Routes {\\n    IERC20 pow1Token;\\n    IERC20 pow5Token;\\n    IERC20 lpPow1Token;\\n    IERC20 lpPow5Token;\\n    IERC20 noPow5Token;\\n    IERC20 marketToken;\\n    IERC20 stableToken;\\n    ILPSFT lpSft;\\n    INOLPSFT noLpSft;\\n    IUniswapV3Pool pow1MarketPool;\\n    IUniswapV3Pool pow5StablePool;\\n    IUniswapV3Pool marketStablePool;\\n    IGameTokenSwapper pow1MarketSwapper;\\n    IGameTokenSwapper pow5StableSwapper;\\n    IMarketStableSwapper marketStableSwapper;\\n    IGameTokenPooler pow1MarketPooler;\\n    IGameTokenPooler pow5StablePooler;\\n    ILPNFTStakeFarm pow1LpNftStakeFarm;\\n    IUniV3StakeFarm pow5LpNftStakeFarm;\\n    ILPSFTLendFarm pow1LpSftLendFarm;\\n    ILPSFTLendFarm pow5LpSftLendFarm;\\n    IUniswapV3Factory uniswapV3Factory;\\n    INonfungiblePositionManager uniswapV3NftManager;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Route Accessors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function getRoutes() external view returns (Routes memory);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // ERC-20 Token Routes\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The POW1 game token\\n   */\\n  function pow1Token() external view returns (IERC20);\\n\\n  /**\\n   * @dev The POW5 game token\\n   */\\n  function pow5Token() external view returns (IERC20);\\n\\n  /**\\n   * @dev The LPPOW1 liquidity token\\n   */\\n  function lpPow1Token() external view returns (IERC20);\\n\\n  /**\\n   * @dev The LPPOW5 liquidity token\\n   */\\n  function lpPow5Token() external view returns (IERC20);\\n\\n  /**\\n   * @dev The NOPOW5 debt token\\n   */\\n  function noPow5Token() external view returns (IERC20);\\n\\n  /**\\n   * @dev The market token paired with POW1\\n   */\\n  function marketToken() external view returns (IERC20);\\n\\n  /**\\n   * @dev The stable token paired with POW5\\n   */\\n  function stableToken() external view returns (IERC20);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // ERC-1155 Token Routes\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The LP-SFT contract\\n   */\\n  function lpSft() external view returns (ILPSFT);\\n\\n  /**\\n   * @dev The LP-SFT debt contract\\n   */\\n  function noLpSft() external view returns (INOLPSFT);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Liquidity Pools\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The POW1-market liquidity pool\\n   */\\n  function pow1MarketPool() external view returns (IUniswapV3Pool);\\n\\n  /**\\n   * @dev The POW5-stable liquidity pool\\n   */\\n  function pow5StablePool() external view returns (IUniswapV3Pool);\\n\\n  /**\\n   * @dev The market-stable liquidity pool\\n   */\\n  function marketStablePool() external view returns (IUniswapV3Pool);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Token Swappers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The swapper for the POW1-market token pair\\n   */\\n  function pow1MarketSwapper() external view returns (IGameTokenSwapper);\\n\\n  /**\\n   * @dev The swapper for the POW5-stable token pair\\n   */\\n  function pow5StableSwapper() external view returns (IGameTokenSwapper);\\n\\n  /**\\n   * @dev The swapper for the market-stable token pair\\n   */\\n  function marketStableSwapper() external view returns (IMarketStableSwapper);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Token Poolers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The pooler for the POW1-market token pair\\n   */\\n  function pow1MarketPooler() external view returns (IGameTokenPooler);\\n\\n  /**\\n   * @dev The pooler for the POW5-stable token pair\\n   */\\n  function pow5StablePooler() external view returns (IGameTokenPooler);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // LP-NFT Stake Farms\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The POW1 LP-NFT stake farm\\n   */\\n  function pow1LpNftStakeFarm() external view returns (ILPNFTStakeFarm);\\n\\n  /**\\n   * @dev The POW5 LP-NFT stake farm\\n   */\\n  function pow5LpNftStakeFarm() external view returns (IUniV3StakeFarm);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // LP-SFT Lend Farms\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The POW1 LP-SFT lend farm\\n   */\\n  function pow1LpSftLendFarm() external view returns (ILPSFTLendFarm);\\n\\n  /**\\n   * @dev The POW5 LP-SFT lend farm\\n   */\\n  function pow5LpSftLendFarm() external view returns (ILPSFTLendFarm);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Uniswap V3 Interfaces\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The upstream Uniswap V3 factory used to create the liquidity pools\\n   */\\n  function uniswapV3Factory() external view returns (IUniswapV3Factory);\\n\\n  /**\\n   * @dev The upstream Uniswap V3 NFT manager\\n   */\\n  function uniswapV3NftManager()\\n    external\\n    view\\n    returns (INonfungiblePositionManager);\\n}\\n\",\"keccak256\":\"0x49c72f28fd0cc43f5f3a76961a0225995a9c833a0cddaf6a6e54061a5de1830a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/bureaucracy/yieldHarvest/IYieldHarvest.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title Bureau of the Yield Harvest\\n *\\n * Lend your LP-NFT to The Reserve. Earn interest while accruing DeFi yield.\\n *\\n * Lending happens by sending the LPSFT tokens to the Bureau of the Yield\\n * Harvest. In return, LPSFT debt tokens (NOLPSFT) are minted to the sender.\\n *\\n * To redeem the LPSFT tokens, NOLPSFT tokens are sent back to the contract,\\n * where they are burned.\\n */\\ninterface IYieldHarvest is IERC165, IERC1155Receiver {}\\n\",\"keccak256\":\"0xc2e12374bcd6142ae334fa780b3ed0c6da3e908c7c325b795a18f41aac7813fa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/defi/IDeFiManager.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * This file is derived from the Ultrachess project under the Apache 2.0 license.\\n * Copyright (C) 2022-2023 Ultrachess team\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later AND Apache-2.0\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev DeFi manager interface\\n */\\ninterface IDeFiManager is IERC165 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public accessors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The POW1 balance of the LP-SFT\\n   *\\n   * @param tokenId The token ID of the LP-SFT\\n   *\\n   * @return The POW1 balance\\n   */\\n  function pow1Balance(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @dev The POW1 balances of multiple LP-SFTs\\n   *\\n   * @param tokenIds The token IDs of the LP-SFTs\\n   *\\n   * @return The POW1 balances for all LP-SFTs\\n   */\\n  function pow1BalanceBatch(\\n    uint256[] memory tokenIds\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev The POW5 balance of the LP-SFT\\n   *\\n   * @param tokenId The token ID of the LP-SFT\\n   *\\n   * @return The POW5 balance\\n   */\\n  function pow5Balance(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @dev The POW5 balances of multiple LP-SFTs\\n   *\\n   * @param tokenIds The token IDs of the LP-SFTs\\n   *\\n   * @return The POW5 balances for all LP-SFTs\\n   */\\n  function pow5BalanceBatch(\\n    uint256[] memory tokenIds\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev The LPPOW1 balance of the LP-SFT\\n   *\\n   * @param tokenId The token ID of the LP-SFT\\n   *\\n   * @return The LPPOW1 balance\\n   */\\n  function lpPow1Balance(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @dev The LPPOW1 balances of multiple LP-SFTs\\n   *\\n   * @param tokenIds The tokens ID of the LP-SFTs\\n   *\\n   * @return The LPPOW1 balances for all LP-SFTs\\n   */\\n  function lpPow1BalanceBatch(\\n    uint256[] memory tokenIds\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev The LPPOW5 balance of the LP-SFT\\n   *\\n   * @param tokenId The token ID of the LP-SFT\\n   *\\n   * @return The LPPOW5 balance\\n   */\\n  function lpPow5Balance(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @dev The LPPOW5 balances of multiple LP-SFTs\\n   *\\n   * @param tokenIds The token IDs of the LP-SFTs\\n   *\\n   * @return The LPPOW5 balances for all LP-SFTs\\n   */\\n  function lpPow5BalanceBatch(\\n    uint256[] memory tokenIds\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev The NOPOW5 balance of the LP-SFT\\n   *\\n   * @param tokenId The token ID of the LP-SFT\\n   *\\n   * @return The NOPOW5 balance\\n   */\\n  function noPow5Balance(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @dev The NOPOW5 balances of multiple LP-SFTs\\n   *\\n   * @param tokenIds The token IDs of the LP-SFTs\\n   *\\n   * @return The NOPOW5 balances for all LP-SFTs\\n   */\\n  function noPow5BalanceBatch(\\n    uint256[] memory tokenIds\\n  ) external view returns (uint256[] memory);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Liquidity Forge functions\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Issue a POW5 loan using the LP-NFT as collateral\\n   */\\n  function issuePow5(\\n    uint256 tokenId,\\n    uint256 amount,\\n    address recipient\\n  ) external;\\n\\n  /**\\n   * @dev Repay a POW5 loan\\n   */\\n  function repayPow5(uint256 tokenId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x263031ee63dad6b870143b4f6ab89924c488779462ef2ab142962568686a68e0\",\"license\":\"GPL-3.0-or-later AND Apache-2.0\"},\"contracts/src/interfaces/defi/IERC20InterestFarm.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IFarm} from \\\"./IFarm.sol\\\";\\n\\n/**\\n * @dev A contract to lend ERC20 tokens and earn rewards based on lending\\n * duration and amounts\\n *\\n * Rewards are calculated based on the amount of time and tokens loaned.\\n *\\n * Rewards are updated on every interaction.\\n */\\ninterface IERC20InterestFarm is IERC165, IFarm {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public mutators\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Allows a user to deposit tokens into the pool\\n   *\\n   * This function increases both the total loaned tokens in the pool and the\\n   * loaned amount for the user calling the function.\\n   *\\n   * @param lpSftAddress The address of the LP-SFT\\n   * @param amount The amount of tokens the user wishes to stake\\n   */\\n  function recordLoan(address lpSftAddress, uint256 amount) external;\\n\\n  /**\\n   * @dev Allows a user to withdraw loaned tokens from the pool\\n   *\\n   * This function decreases both the total loaned tokens in the pool and the\\n   * user's loaned amount.\\n   *\\n   * @param lpSftAddress The address of the LP-SFT\\n   * @param amount The amount of tokens the user wishes to withdraw\\n   */\\n  function recordRepayment(address lpSftAddress, uint256 amount) external;\\n\\n  /**\\n   * @dev Allows a user to claim their accumulated rewards from the pool\\n   *\\n   * This function transfers the accumulated rewards to the user's wallet.\\n   *\\n   * @param lpSftAddress The address of the LP-SFT\\n   */\\n  function claimReward(address lpSftAddress) external;\\n}\\n\",\"keccak256\":\"0xff2fb43db740779a048943d8c209fd146d46b86b0a2b1e0a47f081399d16f5cc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/defi/IFarm.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev A contract to earn rewards based on duration and amount\\n *\\n * Rewards are updated on every interaction.\\n */\\ninterface IFarm is IERC165 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public accessors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Calculates the accumulated balance of reward per token staked\\n   *\\n   * This function computes how much reward each token staked has accumulated\\n   * over time, up to the latest block timestamp. It is scaled up by 1e18 to\\n   * avoid precision loss during division.\\n   *\\n   * @return The updated reward per token value\\n   */\\n  function rewardPerToken() external view returns (uint256);\\n\\n  /**\\n   * @dev Calculates the total reward tokens that an account has earned but\\n   * not yet claimed\\n   *\\n   * This function determines the amount of reward tokens an account is entitled\\n   * to, based on their staked tokens and the difference between the latest\\n   * reward rate per token and the rate already paid to them, plus any rewards\\n   * already accrued but not yet transferred.\\n   *\\n   * @param account The address of the user to calculate the earned rewards\\n   *\\n   * @return The total amount of reward tokens earned by the user\\n   */\\n  function earned(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Calculates the total amount of staked tokens for a given account\\n   *\\n   * @param account The address of the account to check\\n   *\\n   * @return The total amount of liquidity lent by the account\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Get the total amount of tokens staked in the pool\\n   *\\n   * @return The total amount staked\\n   */\\n  function totalLiquidity() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x72d7e415d42227445fd1d1265d7d0d95ea9dfd0804aaa4455c6202fa36c7a81a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/defi/ILPNFTStakeFarm.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IFarm} from \\\"./IFarm.sol\\\";\\n\\n/**\\n * @dev A contract to lend LP-NFTs and earn rewards based on lending duration\\n * and liquidity amount\\n *\\n * Rewards are calculated based on the amount of time and liquidity staked.\\n *\\n * Rewards are updated on every interaction.\\n */\\ninterface ILPNFTStakeFarm is\\n  IERC165,\\n  IERC721Receiver,\\n  IERC1155Receiver,\\n  IFarm\\n{}\\n\",\"keccak256\":\"0xd67df66cfa806a09512112388867af01e4736c61b357596b28f3609d9ca1be1b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/defi/ILPSFTLendFarm.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IFarm} from \\\"./IFarm.sol\\\";\\n\\n/**\\n * @dev A contract to lend LP-NFTs and earn rewards based on lending duration\\n * and liquidity amount\\n *\\n * Rewards are calculated based on the amount of time and liquidity staked.\\n *\\n * Rewards are updated on every interaction.\\n */\\ninterface ILPSFTLendFarm is IERC165, IFarm {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public mutators\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Lend an LP-SFT to the pool\\n   *\\n   * @param tokenId The LP-SFT token ID\\n   */\\n  function lendLpSft(uint256 tokenId) external;\\n\\n  /**\\n   * @dev Lend a batch of LP-SFTs to the pool\\n   *\\n   * @param tokenIds The LP-SFT token IDs\\n   */\\n  function lendLpSftBatch(uint256[] memory tokenIds) external;\\n\\n  /**\\n   * @dev Withdraw an LP-SFT from the pool\\n   *\\n   * @param tokenId The LP-SFT token ID\\n   */\\n  function withdrawLpSft(uint256 tokenId) external;\\n\\n  /**\\n   * @dev Withdraw a batch of LP-SFTs from the pool\\n   *\\n   * @param tokenIds The LP-SFT token IDs\\n   */\\n  function withdrawLpSftBatch(uint256[] memory tokenIds) external;\\n}\\n\",\"keccak256\":\"0xf2b70fffb43363e9518bdc4effc237ceff3275de9b8b557dd0476a2457a0b9d7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/defi/IUniV3StakeFarm.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev A contract to stake Uniswap V3 LP-NFTs with concentrated liquidity\\n */\\ninterface IUniV3StakeFarm is IERC165 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Initializes the Uniswap V3 staker incentive\\n   *\\n   * @param rewardAmount The reward to distribute in the incentive\\n   *\\n   * TODO: Allow creating multiple incentives?\\n   */\\n  function createIncentive(uint256 rewardAmount) external;\\n\\n  /**\\n   * @dev Checks if the Uniswap V3 staker incentive has been initialized\\n   *\\n   * @return True if the incentive has been initialized, false otherwise\\n   */\\n  function isInitialized() external view returns (bool);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Enter a staked position\\n   *\\n   * The LP-NFT is transferred to the staker. An LP-SFT is minted and returned\\n   * to the recipient.\\n   *\\n   * @param tokenId The token ID of the LP-NFT\\n   */\\n  function enter(uint256 tokenId) external;\\n\\n  /**\\n   * @dev Exit a staked position\\n   *\\n   * All tokens and rewards will be returned to the sender. The empty LP-NFT\\n   * is also returned to the sender as a keepsake.\\n   *\\n   * @param tokenId The token ID of the LP-NFT/LP-SFT\\n   */\\n  function exit(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0xb20e516ea135d7a503a925c05fc33025c187b102e8cbbab64ff669d4665d9a98\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/token/ERC1155/ILPSFT.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IERC1155Enumerable} from \\\"./extensions/IERC1155Enumerable.sol\\\";\\nimport {ILPSFTIssuable} from \\\"./extensions/ILPSFTIssuable.sol\\\";\\nimport {ILPNFTHolder} from \\\"./extensions/ILPNFTHolder.sol\\\";\\n\\n/**\\n * @dev LP-SFT interface\\n */\\ninterface ILPSFT is IERC165, IERC1155Enumerable, ILPSFTIssuable, ILPNFTHolder {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Errors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Error raised if a token doesn't exist\\n   *\\n   * @param tokenId The token ID that doesn't exist\\n   */\\n  error LPSFTInvalidToken(uint256 tokenId);\\n\\n  /**\\n   * @dev Error raised if a token address doesn't belong to a token ID\\n   */\\n  error LPSFTInvalidAddress(address tokenAddress);\\n\\n  /**\\n   * @dev Indicates an array of length zero was passed for token IDs\\n   *\\n   * Used to avoid unnecessary transactions.\\n   */\\n  error LPSFTEmptyArray();\\n}\\n\",\"keccak256\":\"0x5fee97f88a1fbc3f74178fb6f0cef26214992c14489579613cf16e4151d45402\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/token/ERC1155/INOLPSFT.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IERC1155Enumerable} from \\\"./extensions/IERC1155Enumerable.sol\\\";\\nimport {ILPSFTIssuable} from \\\"./extensions/ILPSFTIssuable.sol\\\";\\n\\n/**\\n * @dev LP-SFT debt interface\\n */\\ninterface INOLPSFT is IERC165, IERC1155Enumerable, ILPSFTIssuable {}\\n\",\"keccak256\":\"0x7a07d1b45ecfffb086b2dcace81a3ee09949d4af495bfbf03104d183d76d1f01\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/token/ERC1155/extensions/IERC1155Enumerable.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * This file is derived from the Ultrachess project under the Apache 2.0 license.\\n * Copyright (C) 2022-2023 Ultrachess team\\n *\\n * This file is derived from the OpenZeppelin project under the MIT license.\\n * Copyright (c) 2016-2024 Zeppelin Group Ltd and contributors\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later AND Apache-2.0 AND MIT\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ERC-1155: Multi Token Standard, optional enumeration extension\\n *\\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\\n *\\n * This contract is analogous to the OpenZeppelin IERC721Enumerable contract.\\n *\\n * Implementers must enforce the constraint that all SFTs are NFTs (they are\\n * unique with a total supply of 1).\\n */\\ninterface IERC1155Enumerable is IERC165, IERC1155 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Errors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Error raised if the amount of an NFT is not 1\\n   *\\n   * @param tokenId The ID of the NFT token with an invalid amount\\n   * @param amount The amount of the NFT token\\n   */\\n  error ERC1155EnumerableInvalidAmount(uint256 tokenId, uint256 amount);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Returns the total amount of tokens stored by the contract\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the owner of the NFT specified by `tokenId`\\n   *\\n   * @param tokenId The ID of the NFT token\\n   *\\n   * @return owner The owner of the token, or `address(0)` if the token does\\n   *               not exist\\n   */\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n  /**\\n   * @dev Return all token IDs owned by account\\n   *\\n   * @param account The account to query\\n   *\\n   * @return tokenIds The token IDs owned by the account\\n   */\\n  function getTokenIds(\\n    address account\\n  ) external view returns (uint256[] memory tokenIds);\\n}\\n\",\"keccak256\":\"0x158fb3147a0ff257ee853367c6af3861c4ff921fcf82da8ef2d0de9aba8476b5\",\"license\":\"GPL-3.0-or-later AND Apache-2.0 AND MIT\"},\"contracts/src/interfaces/token/ERC1155/extensions/ILPNFTHolder.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @title LP-NFT holder for SFT contract\\n */\\ninterface ILPNFTHolder is IERC165, IERC1155 {\\n  /**\\n   * @dev Get the token ID of a given address\\n   *\\n   * @param tokenAddress The address to convert to a token ID\\n   *\\n   * @return The token ID on success, or uint256(0) if `tokenAddress` does not\\n   * belong to a token ID\\n   */\\n  function addressToTokenId(\\n    address tokenAddress\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Get the token IDs of multiple addresses\\n   *\\n   * @param tokenAddresses The addresses to convert to token IDs\\n   *\\n   * @return The addresses for the token IDs\\n   */\\n  function addressesToTokenIds(\\n    address[] memory tokenAddresses\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Get the address for a given token ID\\n   *\\n   * @param tokenId The token ID to convert to an address\\n   *\\n   * @return The address, or address(0) in case `tokenId` does not belong to\\n   * an LP-NFT\\n   */\\n  function tokenIdToAddress(uint256 tokenId) external view returns (address);\\n\\n  /**\\n   * @dev Get the addresses for multiple token IDs\\n   *\\n   * @param tokenIds The token IDs to convert to addresses\\n   *\\n   * @return The addresses for the token IDs\\n   */\\n  function tokenIdsToAddresses(\\n    uint256[] memory tokenIds\\n  ) external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x59afb8f233cac9f8657111e7ddfcf6ad4e985dcbe74c20927fac8fda6449c4a1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/token/ERC1155/extensions/ILPSFTIssuable.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev LP-SFT issuable extension for LP-SFT minting and burning\\n */\\ninterface ILPSFTIssuable is IERC165, IERC1155 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Issuable interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Mints a new LP-SFT\\n   *\\n   * @param to The account receiving the minted LP-SFT\\n   * @param sftTokenId The token ID of the minted LP-SFT\\n   * @param data Extra data passed to the receiver contract\\n   */\\n  function mint(address to, uint256 sftTokenId, bytes memory data) external;\\n\\n  /**\\n   * @dev Mints a batch of LP-SFTs\\n   *\\n   * @param to The account receiving the minted LP-SFT\\n   * @param sftTokenIds The token IDs of the minted SFTs\\n   * @param data Extra data passed to the receiver contract\\n   *\\n   * Note: This function does not place a limit on the number of LP-SFTs that\\n   * can be minted in a single transaction. The number of LP-SFTs to mint can\\n   * exceed the block gas limit, denying the transaction from completing.\\n   */\\n  function mintBatch(\\n    address to,\\n    uint256[] memory sftTokenIds,\\n    bytes memory data\\n  ) external;\\n\\n  /**\\n   * @dev Burns an existing LP-SFT\\n   *\\n   * @param from The account to burn an LP-SFT from\\n   * @param sftTokenId The token ID of the LP-SFT to burn\\n   */\\n  function burn(address from, uint256 sftTokenId) external;\\n\\n  /**\\n   * @dev Burns a batch of existing LP-SFTs\\n   *\\n   * @param from The account to burn LP-SFTs from\\n   * @param sftTokenIds The token IDs of the LP-SFTs to burn\\n   *\\n   * Note: This function does not place a limit on the number of LP-SFTs that\\n   * can be burned in a single transaction. The number of LP-SFTs to burn can\\n   * exceed the block gas limit, denying the transaction from completing.\\n   */\\n  function burnBatch(address from, uint256[] memory sftTokenIds) external;\\n}\\n\",\"keccak256\":\"0x5ddc95002072bd3c40ac6287144db0b0b1fc08736d8945adb01ac2ada958a0bc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/token/routes/IGameTokenPooler.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * This file is derived from the Ultrachess project under the Apache 2.0 license.\\n * Copyright (C) 2022-2023 Ultrachess team\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later AND Apache-2.0\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\n/**\\n * @dev Token router send to liquidity to the Uniswap V3 pool in exchange for\\n * an LP-NFT\\n */\\ninterface IGameTokenPooler {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Emitted when an LP-NFT is minted\\n   *\\n   * @param sender The sender of the assets being paid\\n   * @param recipient The address of the recipient of the LP-NFT\\n   * @param gameTokenAddress The address of the game token\\n   * @param assetTokenAddress The address of the asset token\\n   * @param nftAddress The address of the NFT manager contract\\n   * @param lpNftTokenId The ID of the LP-NFT\\n   * @param gameTokenShare The amount of the game token in the NFT\\n   * @param assetTokenShare The amount of the asset token in the NFT\\n   * @param liquidityAmount The amount of liquidity created\\n   */\\n  event LpNftMinted(\\n    address indexed sender,\\n    address indexed recipient,\\n    address indexed gameTokenAddress,\\n    address assetTokenAddress,\\n    address nftAddress,\\n    uint256 lpNftTokenId,\\n    uint256 gameTokenShare,\\n    uint256 assetTokenShare,\\n    uint128 liquidityAmount\\n  );\\n\\n  /**\\n   * @dev Emitted when liquidity and fees are collected from an LP-NFT.\\n   *\\n   * @param sender The sender of the collection request\\n   * @param recipient The address of the recipient of the LP-NFT fees\\n   * @param gameTokenAddress The address of the game token\\n   * @param assetTokenAddress The address of the asset token\\n   * @param nftAddress The address of the NFT manager contract\\n   * @param lpNftTokenId The ID of the NFT\\n   * @param liquidityAmount The amount of liquidity in the NFT before collection\\n   * @param gameTokenCollected The amount of game token fees collected\\n   * @param assetTokenCollected The amount of asset token fees collected\\n   * @param assetTokenReturned The amount of the asset token returned to the\\n   *        recipient\\n   */\\n  event LpNftCollected(\\n    address indexed sender,\\n    address indexed recipient,\\n    address indexed gameTokenAddress,\\n    address assetTokenAddress,\\n    address nftAddress,\\n    uint256 lpNftTokenId,\\n    uint128 liquidityAmount,\\n    uint256 gameTokenCollected,\\n    uint256 assetTokenCollected,\\n    uint256 assetTokenReturned\\n  );\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // External accessors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Returns true if the game token is token0 in the pool\\n   *\\n   * @return True if the game token is token0, false otherwise\\n   */\\n  function gameIsToken0() external view returns (bool);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // External interface for adding liquidity\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Mints an LP-NFT and deposits liquidity into the pool using the game\\n   *      token\\n   *\\n   * A swap will occur to allow for single-sided supply.\\n   *\\n   * @param gameTokenAmount The amounts of the game token to deposit\\n   * @param recipient The recipient of the LP-NFT\\n   *\\n   * @return lpNftTokenId The ID of the minted NFT\\n   */\\n  function mintLpNftWithGameToken(\\n    uint256 gameTokenAmount,\\n    address recipient\\n  ) external returns (uint256 lpNftTokenId);\\n\\n  /**\\n   * @dev Mints an LP-NFT and deposits liquidity into the pool using the asset\\n   * token\\n   *\\n   * A swap will occur to allow for single-sided supply.\\n   *\\n   * @param assetTokenAmount The amount of the the asset token to use\\n   * @param recipient The recipient of the LP-NFT\\n   *\\n   * @return lpNftTokenId The ID of the minted NFT\\n   */\\n  function mintLpNftWithAssetToken(\\n    uint256 assetTokenAmount,\\n    address recipient\\n  ) external returns (uint256 lpNftTokenId);\\n\\n  /**\\n   * @dev Mints a Uniswap V3 LP-NFT and deposits liquidity into the pool\\n   * without performing a token swap\\n   *\\n   * @param gameTokenAmount The amount of the game token to deposit\\n   * @param assetTokenAmount The amounts of the asset token to deposit\\n   * @param recipient The recient of the LP-NFT\\n   *\\n   * @return lpNftTokenId The ID of the minted NFT\\n   */\\n  function mintLpNftImbalance(\\n    uint256 gameTokenAmount,\\n    uint256 assetTokenAmount,\\n    address recipient\\n  ) external returns (uint256 lpNftTokenId);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // External interface for removing liquidity\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Collects the tokens and fees from an LP-NFT and returns the asset\\n   * token and empty LP-NFT to the recipient\\n   *\\n   * @param lpNftTokenId The ID of the LP-NFT\\n   * @param recipient The recipient of the fees and the LP-NFT\\n   *\\n   * @return assetTokenReturned The amount of the asset token returned to the\\n   * recipient\\n   */\\n  function collectFromLpNft(\\n    uint256 lpNftTokenId,\\n    address recipient\\n  ) external returns (uint256 assetTokenReturned);\\n\\n  /**\\n   * @dev Liquidates everything to the asset token in one transaction and\\n   * returns the empty LP-NFT\\n   *\\n   * @param lpNftTokenId The ID of the LP-NFT\\n   *\\n   * @return assetTokenReturned The amount of the asset token returned to the\\n   * sender\\n   */\\n  function exit(\\n    uint256 lpNftTokenId\\n  ) external returns (uint256 assetTokenReturned);\\n}\\n\",\"keccak256\":\"0xcf9940bba83379cda511875e9aa3a6a096ae295153e84518e923008ac20d69e6\",\"license\":\"GPL-3.0-or-later AND Apache-2.0\"},\"contracts/src/interfaces/token/routes/IGameTokenSwapper.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * This file is derived from the Ultrachess project under the Apache 2.0 license.\\n * Copyright (C) 2022-2023 Ultrachess team\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later AND Apache-2.0\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\n/**\\n * @dev Token router to swap between the game token and its asset token\\n */\\ninterface IGameTokenSwapper {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Emitted when POW1 is purchased with the asset token or POW5 is\\n   * purchased with the stable token\\n   *\\n   * @param sender The sender of the asset token\\n   * @param recipient The address of the recipient of the POW1\\n   * @param gameTokenAddress The address of the POW1 or POW5 token contract\\n   * @param assetTokenAddress The amount of the asset token being spent\\n   * @param pow1Returned The amount of POW1 received\\n   */\\n  event GameTokenBought(\\n    address indexed sender,\\n    address indexed recipient,\\n    address indexed gameTokenAddress,\\n    address assetTokenAddress,\\n    uint256 assetTokenAmount,\\n    uint256 pow1Returned\\n  );\\n\\n  /**\\n   * @dev Emitted when POW1 is sold for the asset token or POW5 is sold for\\n   * the stable token\\n   *\\n   * @param sender The sender of the game token\\n   * @param recipient The address of the recipient of the asset token\\n   * @param gameTokenAddress The address of the POW1 or POW5 token contract\\n   * @param pow1Amount The amount of POW1 being spent\\n   * @param assetTokenReturned The amount of the asset token received\\n   */\\n  event GameTokenSold(\\n    address indexed sender,\\n    address indexed recipient,\\n    address indexed gameTokenAddress,\\n    address assetTokenAddress,\\n    uint256 pow1Amount,\\n    uint256 assetTokenReturned\\n  );\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // External accessors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Returns true if the game token is token0 in the pool\\n   *\\n   * @return True if the game token is token0, false otherwise\\n   */\\n  function gameIsToken0() external view returns (bool);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // External interface for swapping into the game token\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Swaps the asset token for the game token\\n   *\\n   * @param assetTokenAmount The ammount of the asset token to include in the\\n   *        swap\\n   * @param recipient The receiver of the game token\\n   *\\n   * @return gameTokenReturned The amount of the game token returned to the\\n   * recipient\\n   */\\n  function buyGameToken(\\n    uint256 assetTokenAmount,\\n    address recipient\\n  ) external returns (uint256 gameTokenReturned);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // External interface for swapping out of the game token\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Swaps the game token for the asset token\\n   *\\n   * @param gameTokenAmount The amount of the game token to swap\\n   * @param recipient The recient of the asset token\\n   *\\n   * @return assetTokenReturned The amount of asset token sent to the\\n   *                            recipient\\n   */\\n  function sellGameToken(\\n    uint256 gameTokenAmount,\\n    address recipient\\n  ) external returns (uint256 assetTokenReturned);\\n\\n  /**\\n   * @dev Liquidate everything to the asset token in one function call\\n   *\\n   * @return assetTokenReturned The amount of asset token returned\\n   */\\n  function exit() external returns (uint256 assetTokenReturned);\\n}\\n\",\"keccak256\":\"0xf0c7b320824a6471425614ffc416a601df495ffb8b4e1ea53489981add62f762\",\"license\":\"GPL-3.0-or-later AND Apache-2.0\"},\"contracts/src/interfaces/token/routes/IMarketStableSwapper.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * This file is derived from the Ultrachess project under the Apache 2.0 license.\\n * Copyright (C) 2022-2023 Ultrachess team\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later AND Apache-2.0\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\n/**\\n * @dev Token router to swap between the market token and the stable token\\n */\\ninterface IMarketStableSwapper {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Emitted when the market token is purchased for the stable token\\n   *\\n   * @param sender The sender of the stable token\\n   * @param recipient The address of the recipient of the market token\\n   * @param marketTokenAddress The address of the market token contract\\n   * @param stableTokenAddress The amount of the stable token being spent\\n   * @param stableTokenAmount The amount of the stable token being spent\\n   * @param marketTokenReturned The amount of the market token received\\n   */\\n  event MarketTokenBought(\\n    address indexed sender,\\n    address indexed recipient,\\n    address indexed marketTokenAddress,\\n    address stableTokenAddress,\\n    uint256 stableTokenAmount,\\n    uint256 marketTokenReturned\\n  );\\n\\n  /**\\n   * @dev Emitted when the market token is sold for the stable token\\n   *\\n   * @param sender The sender of the market token\\n   * @param recipient The address of the recipient of the stable token\\n   * @param marketTokenAddress The address of the market token contract\\n   * @param marketTokenAmount The amount of the market token being spent\\n   * @param marketTokenAmount The amount of the market token spent\\n   * @param stableTokenReturned The amount of the stable token received\\n   */\\n  event MarketTokenSold(\\n    address indexed sender,\\n    address indexed recipient,\\n    address indexed marketTokenAddress,\\n    address stableTokenAddress,\\n    uint256 marketTokenAmount,\\n    uint256 stableTokenReturned\\n  );\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public accessors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IMarketStableSwapper-marketIsToken0}\\n   */\\n  function marketIsToken0() external view returns (bool);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public interface for swapping into the market token\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Swaps the stable token for the market token\\n   *\\n   * @param stableTokenAmount The ammount of the stable token to include in\\n   *        the swap\\n   * @param recipient The receiver of the market token\\n   *\\n   * @return marketTokenReturned The amount of the market token returned to the\\n   * recipient\\n   */\\n  function buyMarketToken(\\n    uint256 stableTokenAmount,\\n    address recipient\\n  ) external returns (uint256 marketTokenReturned);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public interface for swapping out of the market token\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Swaps the market token for the stable token\\n   *\\n   * @param marketTokenAmount The amount of the market token to swap\\n   * @param recipient The recient of the stable token\\n   *\\n   * @return stableTokenReturned The amount of stable token returned to the\\n   * recipient\\n   */\\n  function sellMarketToken(\\n    uint256 marketTokenAmount,\\n    address recipient\\n  ) external returns (uint256 stableTokenReturned);\\n\\n  /**\\n   * @dev Liquidate everything to the stable token in one function call\\n   *\\n   * @return marketTokenAmount The amount of market token spent\\n   * @return stableTokenReturned The amount of stable token returned to the\\n   * recipient\\n   */\\n  function exit()\\n    external\\n    returns (uint256 marketTokenAmount, uint256 stableTokenReturned);\\n}\\n\",\"keccak256\":\"0xd7bbf5223be4d7c0692f0eaee0822cdf3ed62b8fb7ce5f591428caf4401d7204\",\"license\":\"GPL-3.0-or-later AND Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x61014060405234801561001157600080fd5b50604051610d7f380380610d7f833981016040819052610030916102d9565b60016000556001600160a01b0383166100855760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b210262816a9a32a1036b3b960711b60448201526064015b60405180910390fd5b6001600160a01b0382166100db5760405162461bcd60e51b815260206004820152601560248201527f496e76616c6964207969656c6420686172766573740000000000000000000000604482015260640161007c565b6001600160a01b0381166101315760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420696e746572657374206661726d0000000000000000000000604482015260640161007c565b6001600160a01b03841660808190526040805163a1abfd9560e01b8152905163a1abfd95916004808201926020929091908290030181865afa15801561017b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019f9190610338565b6001600160a01b031660a0816001600160a01b031681525050836001600160a01b03166311e806626040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021a9190610338565b6001600160a01b0390811660c052600180546001600160a01b031916858316179055604080516304a4fae960e51b815290519186169163949f5d20916004808201926020929091908290030181865afa15801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f9190610338565b6001600160a01b0390811660e0529182166101005216610120525061035c9050565b6001600160a01b03811681146102d657600080fd5b50565b600080600080608085870312156102ef57600080fd5b84516102fa816102c1565b602086015190945061030b816102c1565b604086015190935061031c816102c1565b606086015190925061032d816102c1565b939692955090935050565b60006020828403121561034a57600080fd5b8151610355816102c1565b9392505050565b60805160a05160c05160e05161010051610120516109a46103db600039600081816101f7015281816103f901526106e20152600061016f015260008181610196015261068c01526000818160e10152818161024401526104fd0152600081816101bd0152818161031701526105cb0152600061014801526109a46000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638a686255116100665780638a6862551461016a578063949f5d2014610191578063a1abfd95146101b8578063ebe80a04146101df578063ef49456b146101f257600080fd5b806301ffc9a7146100a357806311e80662146100dc5780632600aa811461011b5780633542422414610130578063459213a114610143575b600080fd5b6100c76100b13660046108ad565b6001600160e01b03191663cde8a08560e01b1490565b60405190151581526020015b60405180910390f35b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d3565b61012e6101293660046108f6565b610219565b005b600154610103906001600160a01b031681565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b61012e6101ed36600461092f565b6104d2565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6102216107b2565b336040516331a9108f60e11b8152600481018590526001600160a01b03918216917f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa15801561028b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102af9190610951565b6001600160a01b0316146102fe5760405162461bcd60e51b81526020600482015260116024820152702737ba102727a62829a32a1037bbb732b960791b60448201526064015b60405180910390fd5b6040516308bb76a560e01b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906308bb76a590602401602060405180830381865afa158015610366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038a9190610951565b90506001600160a01b0381166103d35760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a590813140b54d19560921b60448201526064016102f5565b604051631922bb6f60e01b81526001600160a01b038281166004830152602482018590527f00000000000000000000000000000000000000000000000000000000000000001690631922bb6f90604401600060405180830381600087803b15801561043d57600080fd5b505af1158015610451573d6000803e3d6000fd5b5050600154604051630139292b60e71b815260048101889052602481018790526001600160a01b0386811660448301529091169250639c9495809150606401600060405180830381600087803b1580156104aa57600080fd5b505af11580156104be573d6000803e3d6000fd5b50505050506104cd6001600055565b505050565b6104da6107b2565b336040516331a9108f60e11b8152600481018490526001600160a01b03918216917f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa158015610544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190610951565b6001600160a01b0316146105b25760405162461bcd60e51b81526020600482015260116024820152702737ba102727a62829a32a1037bbb732b960791b60448201526064016102f5565b6040516308bb76a560e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906308bb76a590602401602060405180830381865afa15801561061a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063e9190610951565b90506001600160a01b0381166106875760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a590813140b54d19560921b60448201526064016102f5565b6106bc7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163330856107dc565b60405163047387bf60e31b81526001600160a01b038281166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063239c3df890604401600060405180830381600087803b15801561072657600080fd5b505af115801561073a573d6000803e3d6000fd5b5050600154604051633afa028160e21b815260048101879052602481018690526001600160a01b03909116925063ebe80a049150604401600060405180830381600087803b15801561078b57600080fd5b505af115801561079f573d6000803e3d6000fd5b50505050506107ae6001600055565b5050565b6002600054036107d557604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261083690859061083c565b50505050565b600080602060008451602086016000885af18061085f576040513d6000823e3d81fd5b50506000513d91508115610877578060011415610884565b6001600160a01b0384163b155b1561083657604051635274afe760e01b81526001600160a01b03851660048201526024016102f5565b6000602082840312156108bf57600080fd5b81356001600160e01b0319811681146108d757600080fd5b9392505050565b6001600160a01b03811681146108f357600080fd5b50565b60008060006060848603121561090b57600080fd5b83359250602084013591506040840135610924816108de565b809150509250925092565b6000806040838503121561094257600080fd5b50508035926020909101359150565b60006020828403121561096357600080fd5b81516108d7816108de56fea264697066735822122000266405111dea3882727e01c6f707eb3500318a4c2d7f0c98c76eed7928b30e64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638a686255116100665780638a6862551461016a578063949f5d2014610191578063a1abfd95146101b8578063ebe80a04146101df578063ef49456b146101f257600080fd5b806301ffc9a7146100a357806311e80662146100dc5780632600aa811461011b5780633542422414610130578063459213a114610143575b600080fd5b6100c76100b13660046108ad565b6001600160e01b03191663cde8a08560e01b1490565b60405190151581526020015b60405180910390f35b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d3565b61012e6101293660046108f6565b610219565b005b600154610103906001600160a01b031681565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b61012e6101ed36600461092f565b6104d2565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6102216107b2565b336040516331a9108f60e11b8152600481018590526001600160a01b03918216917f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa15801561028b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102af9190610951565b6001600160a01b0316146102fe5760405162461bcd60e51b81526020600482015260116024820152702737ba102727a62829a32a1037bbb732b960791b60448201526064015b60405180910390fd5b6040516308bb76a560e01b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906308bb76a590602401602060405180830381865afa158015610366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038a9190610951565b90506001600160a01b0381166103d35760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a590813140b54d19560921b60448201526064016102f5565b604051631922bb6f60e01b81526001600160a01b038281166004830152602482018590527f00000000000000000000000000000000000000000000000000000000000000001690631922bb6f90604401600060405180830381600087803b15801561043d57600080fd5b505af1158015610451573d6000803e3d6000fd5b5050600154604051630139292b60e71b815260048101889052602481018790526001600160a01b0386811660448301529091169250639c9495809150606401600060405180830381600087803b1580156104aa57600080fd5b505af11580156104be573d6000803e3d6000fd5b50505050506104cd6001600055565b505050565b6104da6107b2565b336040516331a9108f60e11b8152600481018490526001600160a01b03918216917f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa158015610544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190610951565b6001600160a01b0316146105b25760405162461bcd60e51b81526020600482015260116024820152702737ba102727a62829a32a1037bbb732b960791b60448201526064016102f5565b6040516308bb76a560e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906308bb76a590602401602060405180830381865afa15801561061a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063e9190610951565b90506001600160a01b0381166106875760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a590813140b54d19560921b60448201526064016102f5565b6106bc7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163330856107dc565b60405163047387bf60e31b81526001600160a01b038281166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063239c3df890604401600060405180830381600087803b15801561072657600080fd5b505af115801561073a573d6000803e3d6000fd5b5050600154604051633afa028160e21b815260048101879052602481018690526001600160a01b03909116925063ebe80a049150604401600060405180830381600087803b15801561078b57600080fd5b505af115801561079f573d6000803e3d6000fd5b50505050506107ae6001600055565b5050565b6002600054036107d557604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261083690859061083c565b50505050565b600080602060008451602086016000885af18061085f576040513d6000823e3d81fd5b50506000513d91508115610877578060011415610884565b6001600160a01b0384163b155b1561083657604051635274afe760e01b81526001600160a01b03851660048201526024016102f5565b6000602082840312156108bf57600080fd5b81356001600160e01b0319811681146108d757600080fd5b9392505050565b6001600160a01b03811681146108f357600080fd5b50565b60008060006060848603121561090b57600080fd5b83359250602084013591506040840135610924816108de565b809150509250925092565b6000806040838503121561094257600080fd5b50508035926020909101359150565b60006020828403121561096357600080fd5b81516108d7816108de56fea264697066735822122000266405111dea3882727e01c6f707eb3500318a4c2d7f0c98c76eed7928b30e64736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "borrowPow5(uint256,uint256,address)": {
        "details": "See {ILiquidityForge-borrowPow5}"
      },
      "constructor": {
        "details": "Initializes the Liquidity Forge contract",
        "params": {
          "defiManager_": "The LP-SFT manager contract",
          "erc20InterestFarm_": "The ERC20 interest farm",
          "theReserve_": "The Reserve smart contract address",
          "yieldHarvest_": "The Yield Harvest contract"
        }
      },
      "repayPow5(uint256,uint256)": {
        "details": "See {ILiquidityForge-repayPow5}"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}"
      }
    },
    "stateVariables": {
      "defiManager": {
        "details": "The LP-SFT manager contract"
      },
      "erc20InterestFarm": {
        "details": "The ERC20 interest farm"
      },
      "lpSft": {
        "details": "The LP-SFT token contract"
      },
      "noLpSft": {
        "details": "The LP-SFT debt contract"
      },
      "pow5Token": {
        "details": "The POW5 token contract"
      },
      "theReserve": {
        "details": "The Reserve smart contract"
      },
      "yieldHarvest": {
        "details": "The Liquidity Forge contract"
      }
    },
    "title": "Bureau of the Liquidity Forge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6439,
        "contract": "contracts/src/bureaucracy/LiquidityForge.sol:LiquidityForge",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 17102,
        "contract": "contracts/src/bureaucracy/LiquidityForge.sol:LiquidityForge",
        "label": "defiManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDeFiManager)25257"
      }
    ],
    "types": {
      "t_contract(IDeFiManager)25257": {
        "encoding": "inplace",
        "label": "contract IDeFiManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}