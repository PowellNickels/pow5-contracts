{
  "address": "0x53394ec5E402bae888e7E9BB46E0AfCDe1eCCedB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "theReserve_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "AuctionNotEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DutchAuctionAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DutchAuctionNotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpNftTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "AuctionInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionSettings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "priceDecayRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintDustAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceIncrement",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPriceBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPriceBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriceBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDutchAuctionState.AuctionSettings",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpNftTokenId",
          "type": "uint256"
        }
      ],
      "name": "getAuctionState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lpNftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startPriceBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endPriceBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDutchAuctionState.AuctionState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBureauState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAuctions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastSalePriceBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDutchAuctionState.BureauState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentAuctionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentAuctionStates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lpNftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startPriceBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endPriceBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDutchAuctionState.AuctionState[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentAuctions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpNftTokenId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentPriceBips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentPriceBips",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpNftTokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pow1Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "marketTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpSft",
      "outputs": [
        {
          "internalType": "contract ILPSFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketStableSwapper",
      "outputs": [
        {
          "internalType": "contract IMarketStableSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pow1LpNftStakeFarm",
      "outputs": [
        {
          "internalType": "contract ILPNFTStakeFarm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pow1MarketPool",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pow1MarketPooler",
      "outputs": [
        {
          "internalType": "contract IGameTokenPooler",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pow1MarketSwapper",
      "outputs": [
        {
          "internalType": "contract IGameTokenSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pow1Token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pow5StableSwapper",
      "outputs": [
        {
          "internalType": "contract IGameTokenSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pow5Token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpNftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pow1Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "marketTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "auctionCount",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "marketTokenDust",
          "type": "uint256"
        }
      ],
      "name": "setAuctionCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV3NftManager",
      "outputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x668bbba977e337bb867b6ad6fa17f7646d99bd156c678140fd7059fc27007edf",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5Eb8d8a368B1F1A9de0c2E489e270d7AFD389C3C",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "3913963",
    "logsBloom": "0x
    "blockHash": "0xe370e19cec6ab56f6e77d5dd229369a0e2e0c4f55d77e1c148aab84e27fccc9b",
    "transactionHash": "0x668bbba977e337bb867b6ad6fa17f7646d99bd156c678140fd7059fc27007edf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 160,
        "transactionHash": "0x668bbba977e337bb867b6ad6fa17f7646d99bd156c678140fd7059fc27007edf",
        "address": "0x53394ec5E402bae888e7E9BB46E0AfCDe1eCCedB",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005eb8d8a368b1f1a9de0c2e489e270d7afd389c3c",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe370e19cec6ab56f6e77d5dd229369a0e2e0c4f55d77e1c148aab84e27fccc9b"
      }
    ],
    "blockNumber": 160,
    "cumulativeGasUsed": "3913963",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5Eb8d8a368B1F1A9de0c2E489e270d7AFD389C3C",
    "0xDa87C152723FA5d88D499D1722a2739c5cDaD9Ac"
  ],
  "numDeployments": 1,
  "solcInputHash": "3966566d2220fd825f86a68ce3f74b57",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"theReserve_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"AuctionNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DutchAuctionAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DutchAuctionNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpNftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"AuctionInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"priceDecayRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintDustAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPriceBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPriceBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceBips\",\"type\":\"uint256\"}],\"internalType\":\"struct IDutchAuctionState.AuctionSettings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpNftTokenId\",\"type\":\"uint256\"}],\"name\":\"getAuctionState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lpNftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPriceBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPriceBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IDutchAuctionState.AuctionState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBureauState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAuctions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSalePriceBips\",\"type\":\"uint256\"}],\"internalType\":\"struct IDutchAuctionState.BureauState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAuctionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAuctionStates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lpNftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPriceBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPriceBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IDutchAuctionState.AuctionState[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAuctions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpNftTokenId\",\"type\":\"uint256\"}],\"name\":\"getCurrentPriceBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPriceBips\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpNftTokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pow1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSft\",\"outputs\":[{\"internalType\":\"contract ILPSFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketStableSwapper\",\"outputs\":[{\"internalType\":\"contract IMarketStableSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pow1LpNftStakeFarm\",\"outputs\":[{\"internalType\":\"contract ILPNFTStakeFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pow1MarketPool\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pow1MarketPooler\",\"outputs\":[{\"internalType\":\"contract IGameTokenPooler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pow1MarketSwapper\",\"outputs\":[{\"internalType\":\"contract IGameTokenSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pow1Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pow5StableSwapper\",\"outputs\":[{\"internalType\":\"contract IGameTokenSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pow5Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpNftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pow1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"auctionCount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"marketTokenDust\",\"type\":\"uint256\"}],\"name\":\"setAuctionCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3NftManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"AuctionInitialized(uint256,uint256,uint256,address,address)\":{\"details\":\"Event to emit when the Bureau of the Dutch Auction is initialized\",\"params\":{\"assetTokenAmount\":\"The amount of asset tokens used to initialize the pool\",\"gameTokenAmount\":\"The amount of game tokens used to initialize the pool\",\"lpNftTokenId\":\"The token ID of the LP-NFT minted in the initialization\",\"receiver\":\"The address of the receiver of the LP-SFT holding the staked LP-NFT\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the Dutch Auction contract\",\"params\":{\"owner_\":\"The owner of the Dutch Auction\",\"theReserve_\":\"The Reserve smart contract\"}},\"getAuctionCount()\":{\"details\":\"See {IDutchAuctionAdminActions-getAuctionCount}\"},\"getAuctionSettings()\":{\"details\":\"See {IDutchAuctionState-getAuctionSettings}\"},\"getAuctionState(uint256)\":{\"details\":\"See {IDutchAuctionState-getAuctionState}\"},\"getBureauState()\":{\"details\":\"See {IDutchAuctionState-getBureauState}\"},\"getCurrentAuctionCount()\":{\"details\":\"See {IDutchAuctionState-getCurrentAuctionCount}\"},\"getCurrentAuctionStates()\":{\"details\":\"Returns the auction states of the current auctions\",\"returns\":{\"_0\":\"An array of AuctionState structs\"}},\"getCurrentAuctions()\":{\"details\":\"Returns the list of current LP-NFT token IDs on auction\",\"returns\":{\"_0\":\"An array of LP-NFT token IDs\"}},\"getCurrentPriceBips(uint256)\":{\"details\":\"See {IDutchAuctionState-getCurrentPrice}\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTokenUri(uint256)\":{\"details\":\"See {IDutchAuctionState-getTokenUri}\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(uint256,uint256,address)\":{\"details\":\"See {IDutchAuction-initialize}\"},\"isInitialized()\":{\"details\":\"See {IDutchAuctionAdminActions-isInitialized}\"},\"lpSft()\":{\"details\":\"See {IDutchAuctionRoutes-lpSft}\"},\"marketStableSwapper()\":{\"details\":\"See {IDutchAuctionRoutes-marketStableSwapper}\"},\"marketToken()\":{\"details\":\"See {IDutchAuctionRoutes-marketToken}\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"pow1LpNftStakeFarm()\":{\"details\":\"See {IDutchAuctionRoutes-pow1LpNftStakeFarm}\"},\"pow1MarketPool()\":{\"details\":\"See {IDutchAuctionRoutes-pow1MarketPool}\"},\"pow1MarketPooler()\":{\"details\":\"See {IDutchAuctionRoutes-pow1MarketPooler}\"},\"pow1MarketSwapper()\":{\"details\":\"See {IDutchAuctionRoutes-pow1MarketSwapper}\"},\"pow1Token()\":{\"details\":\"See {IDutchAuctionRoutes-pow1Token}\"},\"pow5StableSwapper()\":{\"details\":\"See {IDutchAuctionRoutes-pow5StableSwapper}\"},\"pow5Token()\":{\"details\":\"See {IDutchAuctionRoutes-pow5Token}\"},\"purchase(uint256,uint256,uint256,address,address)\":{\"details\":\"See {IDutchAuctionActions-purchase}\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAuctionCount(uint32,uint256)\":{\"details\":\"See {IDutchAuctionAdminActions-setAuctionCount}\"},\"stableToken()\":{\"details\":\"See {IDutchAuctionRoutes-stableToken}\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"uniswapV3NftManager()\":{\"details\":\"See {IDutchAuctionRoutes-uniswapV3NftManager}\"}},\"title\":\"Bureau of the Dutch Auction\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/bureaucracy/dutchAuction/DutchAuction.sol\":\"DutchAuction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x68d6fdbeb467192c3627a46aa7bf5cbb73267363b740abc511f521a5a41a446e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC-1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC-1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC-1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xe103e95f854ef0cd1bba5f469175f67cd332f5c2561941f165e3dd65cee94d6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\\n * {IERC721-setApprovalForAll}.\\n */\\nabstract contract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xaad20f8713b5cd98114278482d5d91b9758f9727048527d582e8e88fd4901fd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap-v3-core/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the LP pool init code hash\\n    /// @return The LP pool init code hash\\n    function poolCodeHash() external pure returns (bytes32);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xdd80bc8aaf3eccde7f681433499460a43b33e03167952db56b23f5f34e5ae200\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-core/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-periphery/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-periphery/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0x6d7fc57d804d6b4989cade5213d44c7bef99642735448887c03a20e703d6087c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-periphery/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-periphery/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap-v3-periphery/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"contracts/src/bureaucracy/dutchAuction/DutchAuction.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport {IDutchAuction} from \\\"../../interfaces/bureaucracy/dutchAuction/IDutchAuction.sol\\\";\\nimport {ITheReserveRoutes} from \\\"../../interfaces/bureaucracy/theReserve/ITheReserveRoutes.sol\\\";\\n\\nimport {DutchAuctionActions} from \\\"./DutchAuctionActions.sol\\\";\\nimport {DutchAuctionAdminActions} from \\\"./DutchAuctionAdminActions.sol\\\";\\nimport {DutchAuctionRoutes} from \\\"./DutchAuctionRoutes.sol\\\";\\n\\n/**\\n * @title Bureau of the Dutch Auction\\n */\\ncontract DutchAuction is DutchAuctionAdminActions, DutchAuctionActions {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Initializes the Dutch Auction contract\\n   *\\n   * @param owner_ The owner of the Dutch Auction\\n   * @param theReserve_ The Reserve smart contract\\n   */\\n  constructor(\\n    address owner_,\\n    address theReserve_\\n  )\\n    DutchAuctionAdminActions(owner_)\\n    DutchAuctionRoutes(ITheReserveRoutes(theReserve_).getRoutes())\\n  {\\n    // Initialize auction settings\\n    _auctionSettings = AuctionSettings({\\n      priceDecayRate: DECAY_CONSTANT,\\n      mintDustAmount: 1_000, // TODO\\n      priceIncrement: GROWTH_RATE,\\n      initialPriceBips: INITIAL_PRICE_BIPS,\\n      minPriceBips: MIN_PRICE_BIPS,\\n      maxPriceBips: MAX_PRICE_BIPS\\n    });\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IERC165} via {IDutchAuction}, {DutchAuctionAdminActions}\\n  // and {DutchAuctionActions}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  )\\n    public\\n    view\\n    virtual\\n    override(DutchAuctionAdminActions, DutchAuctionActions)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0xb60dde5fa0b84d804b4d1f16928a162056e0c5cac3338b38355047efbc514231\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/bureaucracy/dutchAuction/DutchAuctionActions.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport {INonfungiblePositionManager} from \\\"../../../interfaces/uniswap-v3-periphery/INonfungiblePositionManager.sol\\\";\\n\\nimport {IDutchAuctionActions} from \\\"../../interfaces/bureaucracy/dutchAuction/IDutchAuctionActions.sol\\\";\\nimport {VRGDA} from \\\"../../utils/auction/VRGDA.sol\\\";\\nimport {LiquidityMath} from \\\"../../utils/math/LiquidityMath.sol\\\";\\n\\nimport {DutchAuctionBase} from \\\"./DutchAuctionBase.sol\\\";\\n\\n/**\\n * @title Bureau of the Dutch Auction\\n */\\nabstract contract DutchAuctionActions is\\n  IDutchAuctionActions,\\n  DutchAuctionBase\\n{\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using SafeERC20 for IERC20;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IERC165} via {IDutchAuctionActions},\\n  // {DutchAuctionRoutes} and {DutchAuctionState}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override(IERC165, DutchAuctionBase) returns (bool) {\\n    return\\n      super.supportsInterface(interfaceId) ||\\n      interfaceId == type(IDutchAuctionActions).interfaceId;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IDutchAuctionActions}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IDutchAuctionActions-purchase}\\n   */\\n  function purchase(\\n    uint256 lpNftTokenId,\\n    uint256 pow1Amount,\\n    uint256 marketTokenAmount,\\n    address beneficiary,\\n    address receiver\\n  ) external override nonReentrant {\\n    // Validate parameters\\n    require(lpNftTokenId != 0, \\\"Invalid LP-NFT ID\\\");\\n    require(pow1Amount > 0 || marketTokenAmount > 0, \\\"Invalid payment\\\");\\n    require(beneficiary != address(0), \\\"Invalid beneficiary\\\");\\n    require(receiver != address(0), \\\"Invalid receiver\\\");\\n\\n    // Read state\\n    AuctionState storage auction = _auctionStates[lpNftTokenId];\\n\\n    // Validate state\\n    // slither-disable-next-line timestamp\\n    require(auction.lpNftTokenId != 0, \\\"LP-NFT not for sale\\\");\\n    // slither-disable-next-line incorrect-equality,timestamp\\n    require(auction.salePrice == 0, \\\"Auction already sold\\\");\\n\\n    // Get the current price in bips of the LP-NFT\\n    uint256 currentPriceBips = getCurrentPriceBips(lpNftTokenId);\\n\\n    // Update state\\n    _bureauState.lastSalePriceBips = currentPriceBips;\\n    auction.salePrice = currentPriceBips;\\n\\n    // Call external contracts\\n    if (pow1Amount > 0) {\\n      _routes.pow1Token.safeTransferFrom(\\n        _msgSender(),\\n        address(this),\\n        pow1Amount\\n      );\\n    }\\n    if (marketTokenAmount > 0) {\\n      _routes.marketToken.safeTransferFrom(\\n        _msgSender(),\\n        address(this),\\n        marketTokenAmount\\n      );\\n    }\\n\\n    // Amounts to deposit\\n    uint256 pow1DepositAmount = pow1Amount;\\n    uint256 marketDepositAmount = marketTokenAmount;\\n\\n    // Handle the tip\\n    {\\n      // Calculate the auction tip amounts\\n      uint256 pow1TipAmount = (pow1Amount * currentPriceBips) / 1e18;\\n      uint256 marketTipAmount = (marketTokenAmount * currentPriceBips) / 1e18;\\n\\n      require(pow1TipAmount > 0 || marketTipAmount > 0, \\\"Invalid tips\\\");\\n\\n      // Send the tip to the beneficiary (TODO)\\n      if (pow1TipAmount > 0) {\\n        _routes.pow1Token.safeTransfer(beneficiary, pow1TipAmount);\\n        pow1DepositAmount -= pow1TipAmount;\\n      }\\n      if (marketTipAmount > 0) {\\n        _routes.marketToken.safeTransfer(beneficiary, marketTipAmount);\\n        marketDepositAmount -= marketTipAmount;\\n      }\\n    }\\n\\n    // Get the pool fee\\n    uint24 poolFee = _routes.pow1MarketPool.fee();\\n\\n    // Perform single-sided supply swap\\n    // slither-disable-next-line incorrect-equality\\n    if (pow1DepositAmount == 0) {\\n      // Get market token reserve\\n      uint256 marketTokenReserve = _routes.marketToken.balanceOf(\\n        address(_routes.pow1MarketPool)\\n      );\\n\\n      // Calculate market swap amount\\n      uint256 marketSwapAmount = LiquidityMath.computeSwapAmountV2(\\n        marketTokenReserve,\\n        marketDepositAmount,\\n        poolFee\\n      );\\n      require(marketSwapAmount <= marketDepositAmount, \\\"Bad liquidity math\\\");\\n\\n      // Approve swap\\n      _routes.marketToken.safeIncreaseAllowance(\\n        address(_routes.pow1MarketSwapper),\\n        marketSwapAmount\\n      );\\n\\n      // Perform swap\\n      // slither-disable-next-line reentrancy-no-eth\\n      pow1DepositAmount = _routes.pow1MarketSwapper.buyGameToken(\\n        marketSwapAmount,\\n        address(this)\\n      );\\n\\n      // Update amount\\n      marketDepositAmount -= marketSwapAmount;\\n      // slither-disable-next-line incorrect-equality\\n    } else if (marketDepositAmount == 0) {\\n      // Get POW1 reserve\\n      uint256 pow1Reserve = _routes.pow1Token.balanceOf(\\n        address(_routes.pow1MarketPool)\\n      );\\n\\n      // Calculate POW1 swap amount\\n      uint256 pow1SwapAmount = LiquidityMath.computeSwapAmountV2(\\n        pow1Reserve,\\n        pow1DepositAmount,\\n        poolFee\\n      );\\n      require(pow1SwapAmount <= pow1DepositAmount, \\\"Bad liquidity math\\\");\\n\\n      // Approve swap\\n      _routes.pow1Token.safeIncreaseAllowance(\\n        address(_routes.pow1MarketSwapper),\\n        pow1SwapAmount\\n      );\\n\\n      // Perform swap\\n      marketDepositAmount = _routes.pow1MarketSwapper.sellGameToken(\\n        pow1SwapAmount,\\n        address(this)\\n      );\\n\\n      // Update amount\\n      pow1DepositAmount -= pow1SwapAmount;\\n    }\\n\\n    // Read state\\n    uint256 mintDustAmount = _auctionSettings.mintDustAmount;\\n\\n    // Validate amounts\\n    require(\\n      pow1DepositAmount > mintDustAmount &&\\n        marketDepositAmount > mintDustAmount,\\n      \\\"Not enough for dust\\\"\\n    );\\n\\n    // Remove the LP-NFT token ID from current auctions\\n    require(_currentAuctions.remove(lpNftTokenId), \\\"Auction not found\\\");\\n\\n    // Mint a new LP-NFT and establish its auction state\\n    // slither-disable-next-line reentrancy-no-eth\\n    uint256 newLpNftTokenId = _mintLpNft(mintDustAmount, mintDustAmount);\\n    _establishAuctionState(newLpNftTokenId);\\n\\n    // Call external contracts\\n    if (pow1DepositAmount > 0) {\\n      _routes.pow1Token.safeIncreaseAllowance(\\n        address(_routes.uniswapV3NftManager),\\n        pow1DepositAmount\\n      );\\n    }\\n    if (marketDepositAmount > 0) {\\n      _routes.marketToken.safeIncreaseAllowance(\\n        address(_routes.uniswapV3NftManager),\\n        marketDepositAmount\\n      );\\n    }\\n\\n    // Deposit liquidity\\n    // slither-disable-next-line unused-return\\n    _routes.uniswapV3NftManager.increaseLiquidity(\\n      INonfungiblePositionManager.IncreaseLiquidityParams({\\n        tokenId: lpNftTokenId,\\n        amount0Desired: address(_routes.pow1Token) <\\n          address(_routes.marketToken)\\n          ? pow1DepositAmount\\n          : marketDepositAmount,\\n        amount1Desired: address(_routes.pow1Token) <\\n          address(_routes.marketToken)\\n          ? marketDepositAmount\\n          : pow1DepositAmount,\\n        amount0Min: 0,\\n        amount1Min: 0,\\n        // slither-disable-next-line timestamp\\n        deadline: block.timestamp\\n      })\\n    );\\n\\n    // Stake LP-NFT in the stake farm\\n    _routes.uniswapV3NftManager.safeTransferFrom(\\n      address(this),\\n      address(_routes.pow1LpNftStakeFarm),\\n      lpNftTokenId,\\n      \\\"\\\"\\n    );\\n\\n    // Return the LP-SFT to the receiver\\n    _routes.lpSft.safeTransferFrom(\\n      address(this),\\n      receiver,\\n      lpNftTokenId,\\n      1,\\n      \\\"\\\"\\n    );\\n\\n    // Refund any excess tokens to the buyer\\n    uint256 remainingMarketTokens = _routes.marketToken.balanceOf(\\n      address(this)\\n    );\\n    if (remainingMarketTokens > 0) {\\n      _routes.marketToken.safeTransfer(msg.sender, remainingMarketTokens);\\n    }\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Internal helper functions\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Computes the tip amount based on the purchase price\\n   *\\n   * @param price The purchase price of the LP-NFT\\n   * @return tip The calculated tip amount\\n   */\\n  function _computeTip(uint256 price) private pure returns (uint256 tip) {\\n    // Example: Tip is 1% of the purchase price\\n    tip = (price * 1e16) / 1e18; // 1% of price scaled by 1e18\\n  }\\n}\\n\",\"keccak256\":\"0x86e8d5cac4f3362bfeb1b025831d03df64f99461b237a5c02ec55bfcb67ca91e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/bureaucracy/dutchAuction/DutchAuctionAdminActions.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {INonfungiblePositionManager} from \\\"../../../interfaces/uniswap-v3-periphery/INonfungiblePositionManager.sol\\\";\\n\\nimport {IDutchAuctionAdminActions} from \\\"../../interfaces/bureaucracy/dutchAuction/IDutchAuctionAdminActions.sol\\\";\\nimport {VRGDA} from \\\"../../utils/auction/VRGDA.sol\\\";\\nimport {LiquidityMath} from \\\"../../utils/math/LiquidityMath.sol\\\";\\n\\nimport {DutchAuctionBase} from \\\"./DutchAuctionBase.sol\\\";\\n\\n/**\\n * @title Bureau of the Dutch Auction\\n */\\nabstract contract DutchAuctionAdminActions is\\n  IDutchAuctionAdminActions,\\n  DutchAuctionBase\\n{\\n  using SafeERC20 for IERC20;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Initializes the Dutch Auction contract\\n   *\\n   * @param owner_ The owner of the Dutch Auction\\n   */\\n  constructor(address owner_) {\\n    // Validate parameters\\n    require(owner_ != address(0), \\\"Invalid owner\\\");\\n\\n    // Initialize {AccessControl}\\n    _grantRole(DEFAULT_ADMIN_ROLE, owner_);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IERC165} via {AccessControl},\\n  // {IDutchAuctionAdminActions}, {DutchAuctionRoutes} and {DutchAuctionState}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override(IERC165, DutchAuctionBase) returns (bool) {\\n    return\\n      super.supportsInterface(interfaceId) ||\\n      interfaceId == type(IDutchAuctionAdminActions).interfaceId;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IDutchAuctionAdminActions}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IDutchAuction-initialize}\\n   */\\n  function initialize(\\n    uint256 pow1Amount,\\n    uint256 marketTokenAmount,\\n    address receiver\\n  ) external override nonReentrant returns (uint256 nftTokenId) {\\n    // Validate access\\n    _checkRole(DEFAULT_ADMIN_ROLE);\\n\\n    // Validate parameters\\n    require(pow1Amount > 0, \\\"Invalid POW1 amount\\\");\\n    require(marketTokenAmount > 0, \\\"Invalid market amount\\\");\\n    require(receiver != address(0), \\\"Invalid receiver\\\");\\n\\n    // Validate state\\n    require(!_initialized, \\\"Already initialized\\\");\\n\\n    // Update state\\n    _initialized = true;\\n\\n    // Call external contracts\\n    _routes.pow1Token.safeTransferFrom(_msgSender(), address(this), pow1Amount);\\n    _routes.marketToken.safeTransferFrom(\\n      _msgSender(),\\n      address(this),\\n      marketTokenAmount\\n    );\\n\\n    _routes.pow1Token.safeIncreaseAllowance(\\n      address(_routes.pow1MarketPooler),\\n      pow1Amount\\n    );\\n    _routes.marketToken.safeIncreaseAllowance(\\n      address(_routes.pow1MarketPooler),\\n      marketTokenAmount\\n    );\\n\\n    // Mint an LP-NFT\\n    nftTokenId = _routes.pow1MarketPooler.mintLpNftImbalance(\\n      pow1Amount,\\n      marketTokenAmount,\\n      address(this)\\n    );\\n\\n    // Stake LP-NFT in the stake farm\\n    _routes.uniswapV3NftManager.safeTransferFrom(\\n      address(this),\\n      address(_routes.pow1LpNftStakeFarm),\\n      nftTokenId,\\n      \\\"\\\"\\n    );\\n\\n    // Get newly-minted LP-SFT address\\n    address lpSftAddress = _routes.lpSft.tokenIdToAddress(nftTokenId);\\n    require(lpSftAddress != address(0), \\\"Invalid LP-SFT\\\");\\n\\n    // Send POW1 dust to the LP-SFT\\n    uint256 pow1Dust = _routes.pow1Token.balanceOf(address(this));\\n    if (pow1Dust > 0) {\\n      _routes.pow1Token.safeTransfer(lpSftAddress, pow1Dust);\\n    }\\n\\n    // Send asset token dust to the receiver\\n    uint256 marketTokenDust = _routes.marketToken.balanceOf(address(this));\\n    if (marketTokenDust > 0) {\\n      _routes.marketToken.safeTransfer(receiver, marketTokenDust);\\n    }\\n\\n    // Return the LP-SFT to the receiver\\n    _routes.lpSft.safeTransferFrom(address(this), receiver, nftTokenId, 1, \\\"\\\");\\n\\n    return nftTokenId;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionAdminActions-isInitialized}\\n   */\\n  function isInitialized() external view override returns (bool) {\\n    // Read state\\n    return _initialized;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionAdminActions-setAuctionCount}\\n   */\\n  function setAuctionCount(\\n    uint32 auctionCount,\\n    uint256 marketTokenDust\\n  ) external override nonReentrant {\\n    // Validate access\\n    _checkRole(DEFAULT_ADMIN_ROLE);\\n\\n    // Validate state\\n    require(_initialized, \\\"Not initialized\\\");\\n\\n    // Read state\\n    uint32 currentAuctionCount = _targetLpNftCount;\\n\\n    // Update state\\n    _targetLpNftCount = auctionCount;\\n\\n    // Mint additional LP-NFTs if necessary\\n    if (auctionCount > currentAuctionCount) {\\n      uint32 lpNftsToMint = auctionCount - currentAuctionCount;\\n\\n      // Procure dust\\n      _routes.marketToken.safeTransferFrom(\\n        _msgSender(),\\n        address(this),\\n        marketTokenDust\\n      );\\n\\n      // Perform swaps and mint LP-NFTs\\n      _mintAndInitializeAuctions(lpNftsToMint, marketTokenDust);\\n\\n      // Handle remaining tokens and dust\\n      _handleRemainingTokens();\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionAdminActions-getAuctionCount}\\n   */\\n  function getAuctionCount() external view override returns (uint32) {\\n    // Read state\\n    return _targetLpNftCount;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Internal helper functions\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function _mintAndInitializeAuctions(\\n    uint256 lpNftsToMint,\\n    uint256 marketTokenDust\\n  ) private {\\n    // Get market token reserve\\n    uint256 marketTokenReserve = _routes.marketToken.balanceOf(\\n      address(_routes.pow1MarketPool)\\n    );\\n\\n    // Get the pool fee\\n    uint24 poolFee = _routes.pow1MarketPool.fee();\\n\\n    // Calculate swap amount\\n    uint256 swapAmount = LiquidityMath.computeSwapAmountV2(\\n      marketTokenReserve,\\n      marketTokenDust,\\n      poolFee\\n    );\\n    require(swapAmount <= marketTokenDust, \\\"Bad liquidity math\\\");\\n\\n    // Approve swap\\n    _routes.marketToken.safeIncreaseAllowance(\\n      address(_routes.pow1MarketSwapper),\\n      swapAmount\\n    );\\n\\n    // Perform swap\\n    // slither-disable-next-line unused-return,reentrancy-benign\\n    _routes.pow1MarketSwapper.buyGameToken(swapAmount, address(this));\\n\\n    // Mint LP-NFTs\\n    for (uint256 i = 0; i < lpNftsToMint; i++) {\\n      // Read external state\\n      // slither-disable-next-line calls-loop\\n      uint256 currentPow1Amount = _routes.pow1Token.balanceOf(address(this));\\n      // slither-disable-next-line calls-loop\\n      uint256 currentMarketTokenAmount = _routes.marketToken.balanceOf(\\n        address(this)\\n      );\\n\\n      // Mint an LP-NFT\\n      uint256 lpNftTokenId = _mintLpNft(\\n        currentPow1Amount,\\n        currentMarketTokenAmount\\n      );\\n\\n      // Establish auction state for the new LP-NFT\\n      _establishAuctionState(lpNftTokenId);\\n    }\\n  }\\n\\n  function _handleRemainingTokens() private {\\n    // Read external state\\n    uint256 remainingPow1 = _routes.pow1Token.balanceOf(address(this));\\n\\n    // Swap the POW1 dust back into the market token\\n    if (remainingPow1 > 0) {\\n      // Approve swap\\n      _routes.pow1Token.safeIncreaseAllowance(\\n        address(_routes.pow1MarketSwapper),\\n        remainingPow1\\n      );\\n\\n      // Perform swap\\n      // slither-disable-next-line unused-return\\n      _routes.pow1MarketSwapper.sellGameToken(remainingPow1, address(this));\\n    }\\n\\n    // Read external state\\n    uint256 remainingMarketToken = _routes.marketToken.balanceOf(address(this));\\n\\n    // Return the market token dust to the sender\\n    if (remainingMarketToken > 0) {\\n      _routes.marketToken.safeTransfer(_msgSender(), remainingMarketToken);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x652b0c4cf1396e1427bf58a953144871800b3d59511a859fe0d691a5321606e5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/bureaucracy/dutchAuction/DutchAuctionBase.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport {IDutchAuctionErrors} from \\\"../../interfaces/bureaucracy/dutchAuction/IDutchAuctionErrors.sol\\\";\\nimport {IDutchAuctionEvents} from \\\"../../interfaces/bureaucracy/dutchAuction/IDutchAuctionEvents.sol\\\";\\nimport {INonfungiblePositionManager} from \\\"../../../interfaces/uniswap-v3-periphery/INonfungiblePositionManager.sol\\\";\\n\\nimport {IDutchAuction} from \\\"../../interfaces/bureaucracy/dutchAuction/IDutchAuction.sol\\\";\\n\\nimport {DutchAuctionState} from \\\"./DutchAuctionState.sol\\\";\\n\\n/**\\n * @title Bureau of the Dutch Auction, Base Functionality\\n */\\nabstract contract DutchAuctionBase is\\n  IDutchAuctionErrors,\\n  IDutchAuctionEvents,\\n  AccessControl,\\n  ReentrancyGuard,\\n  DutchAuctionState\\n{\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using SafeERC20 for IERC20;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IERC165} via {IDutchAuction}, {AccessControl}\\n  // and {IDutchAuctionState}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  )\\n    public\\n    view\\n    virtual\\n    override(AccessControl, DutchAuctionState)\\n    returns (bool)\\n  {\\n    return\\n      super.supportsInterface(interfaceId) ||\\n      interfaceId == type(IDutchAuction).interfaceId;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Internal utility functions\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Mint an LP-NFT\\n   *\\n   * Tokens provided are returned, minus a small amount lost to dust.\\n   *\\n   * @param pow1Amount The amount of POW1 used to mint the LP-NFT\\n   * @param marketTokenAmount The amount of the market token used to mint the LP-NFT\\n   *\\n   * @return lpNftTokenId The token ID of the LP-NFT minted\\n   */\\n  function _mintLpNft(\\n    uint256 pow1Amount,\\n    uint256 marketTokenAmount\\n  ) internal returns (uint256 lpNftTokenId) {\\n    // Uniswap V3 cannot mint a token with zero liquidity\\n    require(pow1Amount > 0, \\\"No POW1\\\");\\n    require(marketTokenAmount > 0, \\\"No market token\\\");\\n\\n    // Approve pooler to spend tokens\\n    _routes.pow1Token.safeIncreaseAllowance(\\n      address(_routes.pow1MarketPooler),\\n      pow1Amount\\n    );\\n    _routes.marketToken.safeIncreaseAllowance(\\n      address(_routes.pow1MarketPooler),\\n      marketTokenAmount\\n    );\\n\\n    // Mint an LP-NFT\\n    // slither-disable-next-line calls-loop\\n    lpNftTokenId = _routes.pow1MarketPooler.mintLpNftImbalance(\\n      pow1Amount,\\n      marketTokenAmount,\\n      address(this)\\n    );\\n\\n    // Validate external state\\n    // slither-disable-next-line calls-loop\\n    require(\\n      _routes.uniswapV3NftManager.ownerOf(lpNftTokenId) == address(this),\\n      \\\"Not owner\\\"\\n    );\\n\\n    // Read external state\\n    // slither-disable-next-line calls-loop,unused-return\\n    (, , , , , , , uint128 liquidityAmount, , , , ) = _routes\\n      .uniswapV3NftManager\\n      .positions(lpNftTokenId);\\n\\n    // Withdraw tokens from the pool\\n    // slither-disable-next-line calls-loop,reentrancy-no-eth,unused-return\\n    _routes.uniswapV3NftManager.decreaseLiquidity(\\n      INonfungiblePositionManager.DecreaseLiquidityParams({\\n        tokenId: lpNftTokenId,\\n        liquidity: liquidityAmount,\\n        amount0Min: 0,\\n        amount1Min: 0,\\n        deadline: block.timestamp\\n      })\\n    );\\n\\n    // Collect the tokens and fees\\n    // slither-disable-next-line calls-loop,reentrancy-no-eth,unused-return\\n    _routes.uniswapV3NftManager.collect(\\n      INonfungiblePositionManager.CollectParams({\\n        tokenId: lpNftTokenId,\\n        recipient: address(this),\\n        amount0Max: type(uint128).max,\\n        amount1Max: type(uint128).max\\n      })\\n    );\\n\\n    return lpNftTokenId;\\n  }\\n\\n  function _establishAuctionState(uint256 lpNftTokenId) internal {\\n    // Calculate starting price for the new LP-NFT\\n    uint256 startingPriceBips = _calculateNextStartingPriceBips();\\n\\n    // Initialize AuctionState for the new LP-NFT\\n    AuctionState memory newAuctionState = AuctionState({\\n      lpNftTokenId: lpNftTokenId,\\n      startPriceBips: startingPriceBips,\\n      endPriceBips: _auctionSettings.minPriceBips,\\n      startTime: block.timestamp,\\n      salePrice: 0\\n    });\\n\\n    // Store the auction state\\n    _auctionStates[lpNftTokenId] = newAuctionState;\\n\\n    // Update BureauState\\n    _bureauState.totalAuctions += 1;\\n\\n    // Add lpNftTokenId to current auctions set\\n    require(_currentAuctions.add(lpNftTokenId), \\\"Already added\\\");\\n  }\\n\\n  /**\\n   * @dev Calculates the starting price for the next LP-NFT based on the growth rate\\n   *\\n   * @return newStartingPriceBips The calculated starting price (scaled by 1e18)\\n   */\\n  function _calculateNextStartingPriceBips()\\n    internal\\n    view\\n    returns (uint256 newStartingPriceBips)\\n  {\\n    uint256 lastSalePriceBips = _bureauState.lastSalePriceBips;\\n\\n    // TODO\\n    // Calculate new starting price using growth rate\\n    // slither-disable-next-line incorrect-equality\\n    if (lastSalePriceBips == 0) {\\n      newStartingPriceBips = _auctionSettings.initialPriceBips;\\n    } else {\\n      newStartingPriceBips = lastSalePriceBips * 2;\\n    }\\n\\n    // Ensure new price does not exceed max price\\n    if (newStartingPriceBips > _auctionSettings.maxPriceBips) {\\n      newStartingPriceBips = _auctionSettings.maxPriceBips;\\n    }\\n\\n    return newStartingPriceBips;\\n  }\\n}\\n\",\"keccak256\":\"0x04c9902325ecf44e608572872969e0ef918617275a3f8291a2c01c4b0652ee8d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/bureaucracy/dutchAuction/DutchAuctionRoutes.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IUniswapV3Factory} from \\\"../../../interfaces/uniswap-v3-core/IUniswapV3Factory.sol\\\";\\nimport {IUniswapV3Pool} from \\\"../../../interfaces/uniswap-v3-core/IUniswapV3Pool.sol\\\";\\nimport {INonfungiblePositionManager} from \\\"../../../interfaces/uniswap-v3-periphery/INonfungiblePositionManager.sol\\\";\\n\\nimport {IDutchAuctionRoutes} from \\\"../../interfaces/bureaucracy/dutchAuction/IDutchAuctionRoutes.sol\\\";\\nimport {ITheReserveRoutes} from \\\"../../interfaces/bureaucracy/theReserve/ITheReserveRoutes.sol\\\";\\nimport {ILPNFTStakeFarm} from \\\"../../interfaces/defi/ILPNFTStakeFarm.sol\\\";\\nimport {ILPSFT} from \\\"../../interfaces/token/ERC1155/ILPSFT.sol\\\";\\nimport {IGameTokenPooler} from \\\"../../interfaces/token/routes/IGameTokenPooler.sol\\\";\\nimport {IGameTokenSwapper} from \\\"../../interfaces/token/routes/IGameTokenSwapper.sol\\\";\\nimport {IMarketStableSwapper} from \\\"../../interfaces/token/routes/IMarketStableSwapper.sol\\\";\\n\\n/**\\n * @title Bureau of the Dutch Auction\\n */\\ncontract DutchAuctionRoutes is IDutchAuctionRoutes {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Routes\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  ITheReserveRoutes.Routes internal _routes;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Initializes the Dutch Auction contract\\n   *\\n   * @param theReserveRoutes_ The Reserve smart contract routes\\n   */\\n  constructor(ITheReserveRoutes.Routes memory theReserveRoutes_) {\\n    // Initialize routes\\n    _routes = theReserveRoutes_;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IERC165} via {IDutchAuctionRoutes}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(IDutchAuctionRoutes).interfaceId;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IDutchAuctionRoutes}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IDutchAuctionRoutes-pow1Token}\\n   */\\n  function pow1Token() external view override returns (IERC20) {\\n    return _routes.pow1Token;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionRoutes-pow5Token}\\n   */\\n  function pow5Token() external view override returns (IERC20) {\\n    return _routes.pow5Token;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionRoutes-marketToken}\\n   */\\n  function marketToken() external view override returns (IERC20) {\\n    return _routes.marketToken;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionRoutes-stableToken}\\n   */\\n  function stableToken() external view override returns (IERC20) {\\n    return _routes.stableToken;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionRoutes-lpSft}\\n   */\\n  function lpSft() external view override returns (ILPSFT) {\\n    return _routes.lpSft;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionRoutes-pow1MarketPool}\\n   */\\n  function pow1MarketPool() external view override returns (IUniswapV3Pool) {\\n    return _routes.pow1MarketPool;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionRoutes-pow1MarketSwapper}\\n   */\\n  function pow1MarketSwapper()\\n    external\\n    view\\n    override\\n    returns (IGameTokenSwapper)\\n  {\\n    return _routes.pow1MarketSwapper;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionRoutes-pow5StableSwapper}\\n   */\\n  function pow5StableSwapper()\\n    external\\n    view\\n    override\\n    returns (IGameTokenSwapper)\\n  {\\n    return _routes.pow5StableSwapper;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionRoutes-marketStableSwapper}\\n   */\\n  function marketStableSwapper()\\n    external\\n    view\\n    override\\n    returns (IMarketStableSwapper)\\n  {\\n    return _routes.marketStableSwapper;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionRoutes-pow1MarketPooler}\\n   */\\n  function pow1MarketPooler()\\n    external\\n    view\\n    override\\n    returns (IGameTokenPooler)\\n  {\\n    return _routes.pow1MarketPooler;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionRoutes-pow1LpNftStakeFarm}\\n   */\\n  function pow1LpNftStakeFarm()\\n    external\\n    view\\n    override\\n    returns (ILPNFTStakeFarm)\\n  {\\n    return _routes.pow1LpNftStakeFarm;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionRoutes-uniswapV3NftManager}\\n   */\\n  function uniswapV3NftManager()\\n    external\\n    view\\n    override\\n    returns (INonfungiblePositionManager)\\n  {\\n    return _routes.uniswapV3NftManager;\\n  }\\n}\\n\",\"keccak256\":\"0xf66b2d1a53ce822ee6723b84585dff53243017fb2a9b37ee47ad1ecff7b985d4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/bureaucracy/dutchAuction/DutchAuctionState.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {wadMul, wadExp, toWadUnsafe} from \\\"solmate/src/utils/SignedWadMath.sol\\\";\\n\\nimport {IDutchAuctionState} from \\\"../../interfaces/bureaucracy/dutchAuction/IDutchAuctionState.sol\\\";\\n\\nimport {VRGDA} from \\\"../../utils/auction/VRGDA.sol\\\";\\n\\nimport {DutchAuctionRoutes} from \\\"./DutchAuctionRoutes.sol\\\";\\n\\n/**\\n * @title Bureau of the Dutch Auction\\n */\\nabstract contract DutchAuctionState is\\n  IDutchAuctionState,\\n  ERC721Holder,\\n  ERC1155Holder,\\n  DutchAuctionRoutes\\n{\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Constants\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  uint256 internal constant INITIAL_PRICE_BIPS = 1e18; // 100%\\n  uint256 internal constant MIN_PRICE_BIPS = 1e14; // 0.01%\\n  uint256 internal constant MAX_PRICE_BIPS = 1e18; // 100%\\n  uint256 internal constant GROWTH_RATE = 1e18; // 100% increase in price per sale\\n  uint256 internal constant DECAY_CONSTANT = 192_540_000_000_000; // Scaled by 1e18 for a 50% price drop per hour\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Internal State\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Initialization flag\\n   */\\n  bool internal _initialized = false;\\n\\n  /**\\n   * @dev Target number of LP-NFTs for sale\\n   */\\n  uint32 internal _targetLpNftCount;\\n\\n  // Auction metadata\\n  BureauState internal _bureauState;\\n\\n  // Auction settings\\n  AuctionSettings internal _auctionSettings;\\n\\n  // Set of current LP-NFT token IDs on auction\\n  EnumerableSet.UintSet internal _currentAuctions;\\n\\n  // Mapping from LP-NFT token ID to AuctionState\\n  mapping(uint256 => AuctionState) internal _auctionStates;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IERC165} via {ERC1155Holder} and {IDutchAuctionState}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  )\\n    public\\n    view\\n    virtual\\n    override(IERC165, ERC1155Holder, DutchAuctionRoutes)\\n    returns (bool)\\n  {\\n    return\\n      super.supportsInterface(interfaceId) ||\\n      interfaceId == type(IERC721Receiver).interfaceId ||\\n      interfaceId == type(IDutchAuctionState).interfaceId;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IDutchAuctionState}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IDutchAuctionState-getBureauState}\\n   */\\n  function getBureauState()\\n    external\\n    view\\n    override\\n    returns (BureauState memory)\\n  {\\n    return _bureauState;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionState-getAuctionSettings}\\n   */\\n  function getAuctionSettings()\\n    external\\n    view\\n    override\\n    returns (AuctionSettings memory)\\n  {\\n    return _auctionSettings;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionState-getCurrentAuctionCount}\\n   */\\n  function getCurrentAuctionCount() external view override returns (uint256) {\\n    return _bureauState.totalAuctions;\\n  }\\n\\n  /**\\n   * @dev Returns the list of current LP-NFT token IDs on auction\\n   *\\n   * @return An array of LP-NFT token IDs\\n   */\\n  function getCurrentAuctions() external view returns (uint256[] memory) {\\n    uint256 length = _currentAuctions.length();\\n    uint256[] memory auctionIds = new uint256[](length);\\n\\n    for (uint256 i = 0; i < length; i++) {\\n      auctionIds[i] = _currentAuctions.at(i);\\n    }\\n\\n    return auctionIds;\\n  }\\n\\n  /**\\n   * @dev Returns the auction states of the current auctions\\n   *\\n   * @return An array of AuctionState structs\\n   */\\n  function getCurrentAuctionStates()\\n    external\\n    view\\n    override\\n    returns (AuctionState[] memory)\\n  {\\n    uint256 length = _currentAuctions.length();\\n    AuctionState[] memory auctionStates = new AuctionState[](length);\\n\\n    for (uint256 i = 0; i < length; i++) {\\n      uint256 lpNftTokenId = _currentAuctions.at(i);\\n      auctionStates[i] = _auctionStates[lpNftTokenId];\\n    }\\n\\n    return auctionStates;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionState-getAuctionState}\\n   */\\n  function getAuctionState(\\n    uint256 lpNftTokenId\\n  ) external view override returns (AuctionState memory) {\\n    return _auctionStates[lpNftTokenId];\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionState-getCurrentPrice}\\n   */\\n  function getCurrentPriceBips(\\n    uint256 lpNftTokenId\\n  ) public view override returns (uint256 currentPriceBips) {\\n    // Read state\\n    AuctionState memory auction = _auctionStates[lpNftTokenId];\\n\\n    // Validate state\\n    // slither-disable-next-line incorrect-equality\\n    require(auction.lpNftTokenId == lpNftTokenId, \\\"LP-NFT not for sale\\\");\\n    // slither-disable-next-line incorrect-equality\\n    require(auction.salePrice == 0, \\\"Auction already sold\\\");\\n    require(auction.startTime > 0, \\\"Auction not started\\\");\\n\\n    // Calculate the time elapsed since the auction start\\n    uint256 elapsedTime = block.timestamp - auction.startTime;\\n\\n    // Convert elapsedTime to WAD (scaled by 1e18)\\n    int256 elapsedTimeWad = toWadUnsafe(elapsedTime);\\n\\n    // Convert decay constant to int256 (already scaled by 1e18)\\n    int256 decayConstantWad = int256(_auctionSettings.priceDecayRate);\\n\\n    // Calculate the decay exponent: -decayConstant * elapsedTime\\n    int256 decayExponent = -wadMul(decayConstantWad, elapsedTimeWad);\\n\\n    // Calculate the decay factor: e^( -decayConstant * elapsedTime )\\n    int256 decayFactor = wadExp(decayExponent);\\n\\n    // Calculate current price: startPriceBips * decayFactor\\n    int256 startPriceBips = int256(auction.startPriceBips);\\n    int256 currentPriceBipsInt = wadMul(startPriceBips, decayFactor);\\n\\n    // Ensure current price is not less than the end price\\n    uint256 endPriceBips = auction.endPriceBips;\\n    if (currentPriceBipsInt < int256(endPriceBips)) {\\n      currentPriceBips = endPriceBips;\\n    } else {\\n      currentPriceBips = uint256(currentPriceBipsInt);\\n    }\\n\\n    return currentPriceBips;\\n  }\\n\\n  /**\\n   * @dev See {IDutchAuctionState-getTokenUri}\\n   */\\n  function getTokenUri(\\n    uint256 lpNftTokenId\\n  ) external view override returns (string memory) {\\n    return _routes.uniswapV3NftManager.tokenURI(lpNftTokenId);\\n  }\\n}\\n\",\"keccak256\":\"0xe037107780d1ddeeb26b711d1b774b0d4f7239b9a259867a7ba052eb8e848908\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/bureaucracy/dutchAuction/IDutchAuction.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IDutchAuctionActions} from \\\"./IDutchAuctionActions.sol\\\";\\nimport {IDutchAuctionAdminActions} from \\\"./IDutchAuctionAdminActions.sol\\\";\\nimport {IDutchAuctionErrors} from \\\"./IDutchAuctionErrors.sol\\\";\\nimport {IDutchAuctionEvents} from \\\"./IDutchAuctionEvents.sol\\\";\\nimport {IDutchAuctionRoutes} from \\\"./IDutchAuctionRoutes.sol\\\";\\nimport {IDutchAuctionState} from \\\"./IDutchAuctionState.sol\\\";\\n\\n/**\\n * @title The interface for the Bureau of the Dutch Auction\\n */\\ninterface IDutchAuction is\\n  IERC165,\\n  IDutchAuctionEvents,\\n  IDutchAuctionErrors,\\n  IDutchAuctionRoutes,\\n  IDutchAuctionState,\\n  IDutchAuctionAdminActions,\\n  IDutchAuctionActions\\n{}\\n\",\"keccak256\":\"0xd771f939d11b368bc04444be48d6c676ca028cc356d4b14dc29b4ce8e2855eb0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/bureaucracy/dutchAuction/IDutchAuctionActions.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title Bureau of the Dutch Auction, Public Action Interface\\n */\\ninterface IDutchAuctionActions is IERC165 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Purchase and stake an LP-NFT at the current auction price\\n   *\\n   * If either `pow1Amount` or `marketTokenAmount` are zero, the purchase will\\n   * be done via single-sided supply; about half of one token is swapped for the\\n   * other before pooling. If neither are zero, the tokens will be supplied to\\n   * the pool with no swap, and any unconsumed tokens (due to an imbalance with\\n   * the current pool price) will be returned to the sender.\\n   *\\n   * Upon purchase, the LP-NFT is staked in a stake farm, and an LP-SFT is\\n   * minted to the receiver.\\n   *\\n   * @param lpNftTokenId The LP-NFT token ID to purchase\\n   * @param pow1Amount The amount of the game token to deposit\\n   * @param marketTokenAmount The amount of the market token to deposit\\n   * @param beneficiary The beneficiary of the tip paid as part of the auction\\n   * @param receiver The receiver of the LP-SFT\\n   */\\n  function purchase(\\n    uint256 lpNftTokenId,\\n    uint256 pow1Amount,\\n    uint256 marketTokenAmount,\\n    address beneficiary,\\n    address receiver\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb04956668ddcaf06b3048be04fab6faac5d836ff2ecfd6c5769bfdf121075336\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/bureaucracy/dutchAuction/IDutchAuctionAdminActions.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IDutchAuctionState} from \\\"./IDutchAuctionState.sol\\\";\\n\\n/**\\n * @title Bureau of the Dutch Auction, Admin Action Interface\\n */\\ninterface IDutchAuctionAdminActions is IERC165 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Admin interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Initialize the Dutch Auction\\n   *\\n   * The Dutch Auction is initialized my minting the first POW1 LP-NFT and its\\n   * holding LP-SFT. No creator tip is paid.\\n   *\\n   * It is assumed that this will be the first liquidity deposited in the pool,\\n   * so both pow1Amount and marketTokenAmount are required to be non-zero.\\n   *\\n   * @param pow1Amount The amount of the game token to deposit\\n   * @param marketTokenAmount The amount of the asset token to deposit\\n   * @param receiver The receiver of the POW1 LP-SFT\\n   *\\n   * @return nftTokenId The initial LP-NFT/LP-SFT token ID\\n   */\\n  function initialize(\\n    uint256 pow1Amount,\\n    uint256 marketTokenAmount,\\n    address receiver\\n  ) external returns (uint256 nftTokenId);\\n\\n  /**\\n   * @dev Check if the Dutch Auction is initialized\\n   *\\n   * @return True if the Dutch Auction is initialized, false otherwise\\n   */\\n  function isInitialized() external view returns (bool);\\n\\n  /**\\n   * @dev Set the total number of LP-NFTs for sale\\n   *\\n   * If this is greater than the current number of LP-NFTs, the difference will\\n   * be minted and added to the sale. If it is less, LP-NFTs won't be minted to\\n   * replace the current ones as they are sold.\\n   *\\n   * @param auctionCount The target number of LP-NFTs for sale\\n   * @param marketTokenDust Some dust to produre, if needed, to mint the LP-NFTs\\n   */\\n  function setAuctionCount(\\n    uint32 auctionCount,\\n    uint256 marketTokenDust\\n  ) external;\\n\\n  /**\\n   * @dev Get the total number of LP-NFTs for sale\\n   *\\n   * @return The total number of LP-NFTs for sale\\n   */\\n  function getAuctionCount() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0xbec86679f40198f19f81afaf15f01f14e147db00ef8b988f7dacf493a48524e6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/bureaucracy/dutchAuction/IDutchAuctionErrors.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\n/**\\n * @title Bureau of the Dutch Auction, Error Interface\\n *\\n * @dev This includes errors for both public actions and admin actions\\n */\\ninterface IDutchAuctionErrors {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Admin Errors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  error DutchAuctionNotInitialized();\\n\\n  error DutchAuctionAlreadyInitialized();\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public Errors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  error AuctionNotEnabled(uint256 slot);\\n}\\n\",\"keccak256\":\"0x4a9eebf2128e0cd80518e0cf21447fc0cfb827a6ac78d8ad33c7019abe5814fc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/bureaucracy/dutchAuction/IDutchAuctionEvents.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IDutchAuctionState} from \\\"./IDutchAuctionState.sol\\\";\\n\\n/**\\n * @title Bureau of the Dutch Auction, Event Interface\\n */\\ninterface IDutchAuctionEvents {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Event to emit when the Bureau of the Dutch Auction is initialized\\n   *\\n   * @param lpNftTokenId The token ID of the LP-NFT minted in the initialization\\n   * @param gameTokenAmount The amount of game tokens used to initialize the pool\\n   * @param assetTokenAmount The amount of asset tokens used to initialize the pool\\n   * @param receiver The address of the receiver of the LP-SFT holding the staked LP-NFT\\n   */\\n  event AuctionInitialized(\\n    uint256 lpNftTokenId,\\n    uint256 gameTokenAmount,\\n    uint256 assetTokenAmount,\\n    address indexed initializer,\\n    address indexed receiver\\n  );\\n\\n  // TODO\\n  /**\\n   * @dev Event to emit when a new auction is created\\n   *\\n   * @param lpNftTokenId The token ID of the LP-NFT minted for the auction\\n   * @param auctionStartTime The time when the auction started\\n   * @param vrgdaParams The VRGDA parameters for the auction schedule\\n   *\\n  event AuctionCreated(\\n    uint256 indexed lpNftTokenId,\\n    uint256 auctionStartTime,\\n    IDutchAuctionState.VRGDAParams vrgdaParams\\n  );\\n\\n  /**\\n   * @dev Event to emit when an LP-NFT is purchased\\n   *\\n   * @param lpNftTokenId The token ID of the LP-NFT purchased\\n   * @param liquidityAmount The amount of LPPOW1 tokens in the purchased LP-NFT\\n   * @param beneficiaryTip The beneficiary tip, in bips scaled by 1e18\\n   * @param buyer The address of the buyer of the LP-NFT\\n   * @param receiver The address of the receiver of the LP-NFT\\n   *\\n  event AuctionPurchased(\\n    uint256 indexed lpNftTokenId,\\n    uint128 liquidityAmount,\\n    uint256 beneficiaryTip,\\n    address indexed buyer,\\n    address indexed receiver\\n  );\\n\\n  /**\\n   * @dev Event to emit when an LP-NFT position is exited, returning the\\n   * underlying assets in the form of the asset token\\n   *\\n   * @param lpNftTokenId The token ID of the LP-NFT exited\\n   * @param operator The address exiting the LP-NFT position\\n   *\\n  event AuctionExited(uint256 indexed lpNftTokenId, address indexed operator);\\n  */\\n}\\n\",\"keccak256\":\"0x750477045935f5a8c4a83d73a11ff64dfee8a7b2a99718c9cf4a2a7e81fbee52\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/bureaucracy/dutchAuction/IDutchAuctionRoutes.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IUniswapV3Factory} from \\\"../../../../interfaces/uniswap-v3-core/IUniswapV3Factory.sol\\\";\\nimport {IUniswapV3Pool} from \\\"../../../../interfaces/uniswap-v3-core/IUniswapV3Pool.sol\\\";\\nimport {INonfungiblePositionManager} from \\\"../../../../interfaces/uniswap-v3-periphery/INonfungiblePositionManager.sol\\\";\\n\\nimport {ILPNFTStakeFarm} from \\\"../../defi/ILPNFTStakeFarm.sol\\\";\\nimport {ILPSFT} from \\\"../../token/ERC1155/ILPSFT.sol\\\";\\nimport {IGameTokenPooler} from \\\"../../token/routes/IGameTokenPooler.sol\\\";\\nimport {IGameTokenSwapper} from \\\"../../token/routes/IGameTokenSwapper.sol\\\";\\nimport {IMarketStableSwapper} from \\\"../../token/routes/IMarketStableSwapper.sol\\\";\\n\\n/**\\n * @title Bureau of the Dutch Auction, Routing Interface\\n *\\n * @dev These routes provide read-only access to the various contracts that the\\n * Dutch Auction interacts with\\n */\\ninterface IDutchAuctionRoutes is IERC165 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // ERC-20 Token Routes\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The POW1 game token\\n   */\\n  function pow1Token() external view returns (IERC20);\\n\\n  /**\\n   * @dev The POW5 game token\\n   */\\n  function pow5Token() external view returns (IERC20);\\n\\n  /**\\n   * @dev The market token paired with POW1\\n   */\\n  function marketToken() external view returns (IERC20);\\n\\n  /**\\n   * @dev The stable token paired with POW5\\n   */\\n  function stableToken() external view returns (IERC20);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // ERC-1155 Token Routes\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The LP-SFT contract\\n   */\\n  function lpSft() external view returns (ILPSFT);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Liquidity Pools\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The POW1-market liquidity pool\\n   */\\n  function pow1MarketPool() external view returns (IUniswapV3Pool);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Token Swappers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The swapper for the POW1-market token pair\\n   */\\n  function pow1MarketSwapper() external view returns (IGameTokenSwapper);\\n\\n  /**\\n   * @dev The swapper for the POW5-stable token pair\\n   */\\n  function pow5StableSwapper() external view returns (IGameTokenSwapper);\\n\\n  /**\\n   * @dev The swapper for the market-stable token pair\\n   */\\n  function marketStableSwapper() external view returns (IMarketStableSwapper);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Token Poolers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The pooler for the POW1-market token pair\\n   */\\n  function pow1MarketPooler() external view returns (IGameTokenPooler);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // LP-NFT Stake Farms\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The POW1 LP-NFT stake farm\\n   */\\n  function pow1LpNftStakeFarm() external view returns (ILPNFTStakeFarm);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Uniswap V3 Interfaces\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The upstream Uniswap V3 NFT manager\\n   */\\n  function uniswapV3NftManager()\\n    external\\n    view\\n    returns (INonfungiblePositionManager);\\n}\\n\",\"keccak256\":\"0x3b393152350b99c88f106e15b5940c2e4492fa0bb0a9c7948fa1b35bcfb50c72\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/bureaucracy/dutchAuction/IDutchAuctionState.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title Bureau of the Dutch Auction, State Interface\\n *\\n * @dev This includes both state and derived state of the current enabled\\n * auctions\\n */\\ninterface IDutchAuctionState is IERC165 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Types\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  struct AuctionSettings {\\n    uint256 priceDecayRate; // The rate at which the price decreases (scaled by 1e18)\\n    uint256 mintDustAmount; // Amount of dust required for pre-minting\\n    uint256 priceIncrement; // Price increase ratio after each purchase (scaled by 1e18)\\n    uint256 initialPriceBips; // Initial starting price (scaled by 1e18)\\n    uint256 minPriceBips; // Minimum possible price (scaled by 1e18)\\n    uint256 maxPriceBips; // Maximum possible price (scaled by 1e18)\\n  }\\n\\n  struct BureauState {\\n    uint256 totalAuctions; // Total number of LP-NFTs that have gone up for auction\\n    uint256 lastSalePriceBips; // The price at which the last NFT was sold (scaled by 1e18)\\n  }\\n\\n  struct AuctionState {\\n    uint256 lpNftTokenId; // ID of the LP-NFT for sale\\n    uint256 startPriceBips; // The starting price of the NFT (scaled by 1e18)\\n    uint256 endPriceBips; // The end price after the auction's decay (minPrice)\\n    uint256 startTime; // The time the auction starts\\n    uint256 salePrice; // Set when the NFT has been sold, or 0 if unsold\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Returns the auction settings\\n   *\\n   * @return The AuctionSettings struct containing the auction configuration\\n   */\\n  function getAuctionSettings() external view returns (AuctionSettings memory);\\n\\n  /**\\n   * @dev Returns the metadata of the Dutch Auction\\n   *\\n   * @return The BureauState struct containing the bureau state\\n   */\\n  function getBureauState() external view returns (BureauState memory);\\n\\n  /**\\n   * @dev Returns the number of active auctions\\n   *\\n   * @return The total number of auctions in progress\\n   */\\n  function getCurrentAuctionCount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the list of current LP-NFT token IDs on auction\\n   *\\n   * @return An array of LP-NFT token IDs\\n   */\\n  function getCurrentAuctions() external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the auction states of the current auctions\\n   *\\n   * @return An array of AuctionState structs\\n   */\\n  function getCurrentAuctionStates()\\n    external\\n    view\\n    returns (AuctionState[] memory);\\n\\n  /**\\n   * @dev Returns the auction state for a given LP-NFT\\n   *\\n   * @param lpNftTokenId The token ID of the LP-NFT\\n   * @return The AuctionState struct containing the auction details\\n   */\\n  function getAuctionState(\\n    uint256 lpNftTokenId\\n  ) external view returns (AuctionState memory);\\n\\n  /**\\n   * @dev Get the current tip price for an LP-NFT\\n   *\\n   * @param lpNftTokenId The LP-NFT token ID\\n   *\\n   * @return currentPriceBips The LP-NFT tip price, scaled by 1e18\\n   */\\n  function getCurrentPriceBips(\\n    uint256 lpNftTokenId\\n  ) external view returns (uint256 currentPriceBips);\\n\\n  /**\\n   * @dev Get the token URI for an LP-NFT\\n   *\\n   * @param lpNftTokenId The LP-NFT token ID\\n   *\\n   * @return tokenUri The URI of the LP-NFT\\n   */\\n  function getTokenUri(\\n    uint256 lpNftTokenId\\n  ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf4195d4a59f07b952a2597f42f8057893eae7382da5187ac8aa8d3046e16bab0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/bureaucracy/theReserve/ITheReserveRoutes.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IUniswapV3Factory} from \\\"../../../../interfaces/uniswap-v3-core/IUniswapV3Factory.sol\\\";\\nimport {IUniswapV3Pool} from \\\"../../../../interfaces/uniswap-v3-core/IUniswapV3Pool.sol\\\";\\nimport {INonfungiblePositionManager} from \\\"../../../../interfaces/uniswap-v3-periphery/INonfungiblePositionManager.sol\\\";\\n\\nimport {ILPNFTStakeFarm} from \\\"../../defi/ILPNFTStakeFarm.sol\\\";\\nimport {ILPSFTLendFarm} from \\\"../../defi/ILPSFTLendFarm.sol\\\";\\nimport {IUniV3StakeFarm} from \\\"../../defi/IUniV3StakeFarm.sol\\\";\\nimport {ILPSFT} from \\\"../../token/ERC1155/ILPSFT.sol\\\";\\nimport {INOLPSFT} from \\\"../../token/ERC1155/INOLPSFT.sol\\\";\\nimport {IGameTokenPooler} from \\\"../../token/routes/IGameTokenPooler.sol\\\";\\nimport {IGameTokenSwapper} from \\\"../../token/routes/IGameTokenSwapper.sol\\\";\\nimport {IMarketStableSwapper} from \\\"../../token/routes/IMarketStableSwapper.sol\\\";\\n\\n/**\\n * @title The Reserve Smart Contract, Routing Interface\\n *\\n * @dev These routes provide access to the contracts that The Reserve's various\\n * bureaus interact with\\n */\\ninterface ITheReserveRoutes is IERC165 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Types\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  struct Routes {\\n    IERC20 pow1Token;\\n    IERC20 pow5Token;\\n    IERC20 lpPow1Token;\\n    IERC20 lpPow5Token;\\n    IERC20 noPow5Token;\\n    IERC20 marketToken;\\n    IERC20 stableToken;\\n    ILPSFT lpSft;\\n    INOLPSFT noLpSft;\\n    IUniswapV3Pool pow1MarketPool;\\n    IUniswapV3Pool pow5StablePool;\\n    IUniswapV3Pool marketStablePool;\\n    IGameTokenSwapper pow1MarketSwapper;\\n    IGameTokenSwapper pow5StableSwapper;\\n    IMarketStableSwapper marketStableSwapper;\\n    IGameTokenPooler pow1MarketPooler;\\n    IGameTokenPooler pow5StablePooler;\\n    ILPNFTStakeFarm pow1LpNftStakeFarm;\\n    IUniV3StakeFarm pow5LpNftStakeFarm;\\n    ILPSFTLendFarm pow1LpSftLendFarm;\\n    ILPSFTLendFarm pow5LpSftLendFarm;\\n    IUniswapV3Factory uniswapV3Factory;\\n    INonfungiblePositionManager uniswapV3NftManager;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Route Accessors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function getRoutes() external view returns (Routes memory);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // ERC-20 Token Routes\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The POW1 game token\\n   */\\n  function pow1Token() external view returns (IERC20);\\n\\n  /**\\n   * @dev The POW5 game token\\n   */\\n  function pow5Token() external view returns (IERC20);\\n\\n  /**\\n   * @dev The LPPOW1 liquidity token\\n   */\\n  function lpPow1Token() external view returns (IERC20);\\n\\n  /**\\n   * @dev The LPPOW5 liquidity token\\n   */\\n  function lpPow5Token() external view returns (IERC20);\\n\\n  /**\\n   * @dev The NOPOW5 debt token\\n   */\\n  function noPow5Token() external view returns (IERC20);\\n\\n  /**\\n   * @dev The market token paired with POW1\\n   */\\n  function marketToken() external view returns (IERC20);\\n\\n  /**\\n   * @dev The stable token paired with POW5\\n   */\\n  function stableToken() external view returns (IERC20);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // ERC-1155 Token Routes\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The LP-SFT contract\\n   */\\n  function lpSft() external view returns (ILPSFT);\\n\\n  /**\\n   * @dev The LP-SFT debt contract\\n   */\\n  function noLpSft() external view returns (INOLPSFT);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Liquidity Pools\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The POW1-market liquidity pool\\n   */\\n  function pow1MarketPool() external view returns (IUniswapV3Pool);\\n\\n  /**\\n   * @dev The POW5-stable liquidity pool\\n   */\\n  function pow5StablePool() external view returns (IUniswapV3Pool);\\n\\n  /**\\n   * @dev The market-stable liquidity pool\\n   */\\n  function marketStablePool() external view returns (IUniswapV3Pool);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Token Swappers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The swapper for the POW1-market token pair\\n   */\\n  function pow1MarketSwapper() external view returns (IGameTokenSwapper);\\n\\n  /**\\n   * @dev The swapper for the POW5-stable token pair\\n   */\\n  function pow5StableSwapper() external view returns (IGameTokenSwapper);\\n\\n  /**\\n   * @dev The swapper for the market-stable token pair\\n   */\\n  function marketStableSwapper() external view returns (IMarketStableSwapper);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Token Poolers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The pooler for the POW1-market token pair\\n   */\\n  function pow1MarketPooler() external view returns (IGameTokenPooler);\\n\\n  /**\\n   * @dev The pooler for the POW5-stable token pair\\n   */\\n  function pow5StablePooler() external view returns (IGameTokenPooler);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // LP-NFT Stake Farms\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The POW1 LP-NFT stake farm\\n   */\\n  function pow1LpNftStakeFarm() external view returns (ILPNFTStakeFarm);\\n\\n  /**\\n   * @dev The POW5 LP-NFT stake farm\\n   */\\n  function pow5LpNftStakeFarm() external view returns (IUniV3StakeFarm);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // LP-SFT Lend Farms\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The POW1 LP-SFT lend farm\\n   */\\n  function pow1LpSftLendFarm() external view returns (ILPSFTLendFarm);\\n\\n  /**\\n   * @dev The POW5 LP-SFT lend farm\\n   */\\n  function pow5LpSftLendFarm() external view returns (ILPSFTLendFarm);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Uniswap V3 Interfaces\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The upstream Uniswap V3 factory used to create the liquidity pools\\n   */\\n  function uniswapV3Factory() external view returns (IUniswapV3Factory);\\n\\n  /**\\n   * @dev The upstream Uniswap V3 NFT manager\\n   */\\n  function uniswapV3NftManager()\\n    external\\n    view\\n    returns (INonfungiblePositionManager);\\n}\\n\",\"keccak256\":\"0x49c72f28fd0cc43f5f3a76961a0225995a9c833a0cddaf6a6e54061a5de1830a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/defi/IFarm.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev A contract to earn rewards based on duration and amount\\n *\\n * Rewards are updated on every interaction.\\n */\\ninterface IFarm is IERC165 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public accessors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Calculates the accumulated balance of reward per token staked\\n   *\\n   * This function computes how much reward each token staked has accumulated\\n   * over time, up to the latest block timestamp. It is scaled up by 1e18 to\\n   * avoid precision loss during division.\\n   *\\n   * @return The updated reward per token value\\n   */\\n  function rewardPerToken() external view returns (uint256);\\n\\n  /**\\n   * @dev Calculates the total reward tokens that an account has earned but\\n   * not yet claimed\\n   *\\n   * This function determines the amount of reward tokens an account is entitled\\n   * to, based on their staked tokens and the difference between the latest\\n   * reward rate per token and the rate already paid to them, plus any rewards\\n   * already accrued but not yet transferred.\\n   *\\n   * @param account The address of the user to calculate the earned rewards\\n   *\\n   * @return The total amount of reward tokens earned by the user\\n   */\\n  function earned(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Calculates the total amount of staked tokens for a given account\\n   *\\n   * @param account The address of the account to check\\n   *\\n   * @return The total amount of liquidity lent by the account\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Get the total amount of tokens staked in the pool\\n   *\\n   * @return The total amount staked\\n   */\\n  function totalLiquidity() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x72d7e415d42227445fd1d1265d7d0d95ea9dfd0804aaa4455c6202fa36c7a81a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/defi/ILPNFTStakeFarm.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IFarm} from \\\"./IFarm.sol\\\";\\n\\n/**\\n * @dev A contract to lend LP-NFTs and earn rewards based on lending duration\\n * and liquidity amount\\n *\\n * Rewards are calculated based on the amount of time and liquidity staked.\\n *\\n * Rewards are updated on every interaction.\\n */\\ninterface ILPNFTStakeFarm is\\n  IERC165,\\n  IERC721Receiver,\\n  IERC1155Receiver,\\n  IFarm\\n{}\\n\",\"keccak256\":\"0xd67df66cfa806a09512112388867af01e4736c61b357596b28f3609d9ca1be1b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/defi/ILPSFTLendFarm.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IFarm} from \\\"./IFarm.sol\\\";\\n\\n/**\\n * @dev A contract to lend LP-NFTs and earn rewards based on lending duration\\n * and liquidity amount\\n *\\n * Rewards are calculated based on the amount of time and liquidity staked.\\n *\\n * Rewards are updated on every interaction.\\n */\\ninterface ILPSFTLendFarm is IERC165, IFarm {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public mutators\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Lend an LP-SFT to the pool\\n   *\\n   * @param tokenId The LP-SFT token ID\\n   */\\n  function lendLpSft(uint256 tokenId) external;\\n\\n  /**\\n   * @dev Lend a batch of LP-SFTs to the pool\\n   *\\n   * @param tokenIds The LP-SFT token IDs\\n   */\\n  function lendLpSftBatch(uint256[] memory tokenIds) external;\\n\\n  /**\\n   * @dev Withdraw an LP-SFT from the pool\\n   *\\n   * @param tokenId The LP-SFT token ID\\n   */\\n  function withdrawLpSft(uint256 tokenId) external;\\n\\n  /**\\n   * @dev Withdraw a batch of LP-SFTs from the pool\\n   *\\n   * @param tokenIds The LP-SFT token IDs\\n   */\\n  function withdrawLpSftBatch(uint256[] memory tokenIds) external;\\n}\\n\",\"keccak256\":\"0xf2b70fffb43363e9518bdc4effc237ceff3275de9b8b557dd0476a2457a0b9d7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/defi/IUniV3StakeFarm.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev A contract to stake Uniswap V3 LP-NFTs with concentrated liquidity\\n */\\ninterface IUniV3StakeFarm is IERC165 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Initializes the Uniswap V3 staker incentive\\n   *\\n   * @param rewardAmount The reward to distribute in the incentive\\n   *\\n   * TODO: Allow creating multiple incentives?\\n   */\\n  function createIncentive(uint256 rewardAmount) external;\\n\\n  /**\\n   * @dev Checks if the Uniswap V3 staker incentive has been initialized\\n   *\\n   * @return True if the incentive has been initialized, false otherwise\\n   */\\n  function isInitialized() external view returns (bool);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Enter a staked position\\n   *\\n   * The LP-NFT is transferred to the staker. An LP-SFT is minted and returned\\n   * to the recipient.\\n   *\\n   * @param tokenId The token ID of the LP-NFT\\n   */\\n  function enter(uint256 tokenId) external;\\n\\n  /**\\n   * @dev Exit a staked position\\n   *\\n   * All tokens and rewards will be returned to the sender. The empty LP-NFT\\n   * is also returned to the sender as a keepsake.\\n   *\\n   * @param tokenId The token ID of the LP-NFT/LP-SFT\\n   */\\n  function exit(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0xb20e516ea135d7a503a925c05fc33025c187b102e8cbbab64ff669d4665d9a98\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/token/ERC1155/ILPSFT.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IERC1155Enumerable} from \\\"./extensions/IERC1155Enumerable.sol\\\";\\nimport {ILPSFTIssuable} from \\\"./extensions/ILPSFTIssuable.sol\\\";\\nimport {ILPNFTHolder} from \\\"./extensions/ILPNFTHolder.sol\\\";\\n\\n/**\\n * @dev LP-SFT interface\\n */\\ninterface ILPSFT is IERC165, IERC1155Enumerable, ILPSFTIssuable, ILPNFTHolder {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Errors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Error raised if a token doesn't exist\\n   *\\n   * @param tokenId The token ID that doesn't exist\\n   */\\n  error LPSFTInvalidToken(uint256 tokenId);\\n\\n  /**\\n   * @dev Error raised if a token address doesn't belong to a token ID\\n   */\\n  error LPSFTInvalidAddress(address tokenAddress);\\n\\n  /**\\n   * @dev Indicates an array of length zero was passed for token IDs\\n   *\\n   * Used to avoid unnecessary transactions.\\n   */\\n  error LPSFTEmptyArray();\\n}\\n\",\"keccak256\":\"0x5fee97f88a1fbc3f74178fb6f0cef26214992c14489579613cf16e4151d45402\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/token/ERC1155/INOLPSFT.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IERC1155Enumerable} from \\\"./extensions/IERC1155Enumerable.sol\\\";\\nimport {ILPSFTIssuable} from \\\"./extensions/ILPSFTIssuable.sol\\\";\\n\\n/**\\n * @dev LP-SFT debt interface\\n */\\ninterface INOLPSFT is IERC165, IERC1155Enumerable, ILPSFTIssuable {}\\n\",\"keccak256\":\"0x7a07d1b45ecfffb086b2dcace81a3ee09949d4af495bfbf03104d183d76d1f01\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/token/ERC1155/extensions/IERC1155Enumerable.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * This file is derived from the Ultrachess project under the Apache 2.0 license.\\n * Copyright (C) 2022-2023 Ultrachess team\\n *\\n * This file is derived from the OpenZeppelin project under the MIT license.\\n * Copyright (c) 2016-2024 Zeppelin Group Ltd and contributors\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later AND Apache-2.0 AND MIT\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ERC-1155: Multi Token Standard, optional enumeration extension\\n *\\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\\n *\\n * This contract is analogous to the OpenZeppelin IERC721Enumerable contract.\\n *\\n * Implementers must enforce the constraint that all SFTs are NFTs (they are\\n * unique with a total supply of 1).\\n */\\ninterface IERC1155Enumerable is IERC165, IERC1155 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Errors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Error raised if the amount of an NFT is not 1\\n   *\\n   * @param tokenId The ID of the NFT token with an invalid amount\\n   * @param amount The amount of the NFT token\\n   */\\n  error ERC1155EnumerableInvalidAmount(uint256 tokenId, uint256 amount);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Returns the total amount of tokens stored by the contract\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the owner of the NFT specified by `tokenId`\\n   *\\n   * @param tokenId The ID of the NFT token\\n   *\\n   * @return owner The owner of the token, or `address(0)` if the token does\\n   *               not exist\\n   */\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n  /**\\n   * @dev Return all token IDs owned by account\\n   *\\n   * @param account The account to query\\n   *\\n   * @return tokenIds The token IDs owned by the account\\n   */\\n  function getTokenIds(\\n    address account\\n  ) external view returns (uint256[] memory tokenIds);\\n}\\n\",\"keccak256\":\"0x158fb3147a0ff257ee853367c6af3861c4ff921fcf82da8ef2d0de9aba8476b5\",\"license\":\"GPL-3.0-or-later AND Apache-2.0 AND MIT\"},\"contracts/src/interfaces/token/ERC1155/extensions/ILPNFTHolder.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @title LP-NFT holder for SFT contract\\n */\\ninterface ILPNFTHolder is IERC165, IERC1155 {\\n  /**\\n   * @dev Get the token ID of a given address\\n   *\\n   * @param tokenAddress The address to convert to a token ID\\n   *\\n   * @return The token ID on success, or uint256(0) if `tokenAddress` does not\\n   * belong to a token ID\\n   */\\n  function addressToTokenId(\\n    address tokenAddress\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Get the token IDs of multiple addresses\\n   *\\n   * @param tokenAddresses The addresses to convert to token IDs\\n   *\\n   * @return The addresses for the token IDs\\n   */\\n  function addressesToTokenIds(\\n    address[] memory tokenAddresses\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Get the address for a given token ID\\n   *\\n   * @param tokenId The token ID to convert to an address\\n   *\\n   * @return The address, or address(0) in case `tokenId` does not belong to\\n   * an LP-NFT\\n   */\\n  function tokenIdToAddress(uint256 tokenId) external view returns (address);\\n\\n  /**\\n   * @dev Get the addresses for multiple token IDs\\n   *\\n   * @param tokenIds The token IDs to convert to addresses\\n   *\\n   * @return The addresses for the token IDs\\n   */\\n  function tokenIdsToAddresses(\\n    uint256[] memory tokenIds\\n  ) external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x59afb8f233cac9f8657111e7ddfcf6ad4e985dcbe74c20927fac8fda6449c4a1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/token/ERC1155/extensions/ILPSFTIssuable.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev LP-SFT issuable extension for LP-SFT minting and burning\\n */\\ninterface ILPSFTIssuable is IERC165, IERC1155 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Issuable interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Mints a new LP-SFT\\n   *\\n   * @param to The account receiving the minted LP-SFT\\n   * @param sftTokenId The token ID of the minted LP-SFT\\n   * @param data Extra data passed to the receiver contract\\n   */\\n  function mint(address to, uint256 sftTokenId, bytes memory data) external;\\n\\n  /**\\n   * @dev Mints a batch of LP-SFTs\\n   *\\n   * @param to The account receiving the minted LP-SFT\\n   * @param sftTokenIds The token IDs of the minted SFTs\\n   * @param data Extra data passed to the receiver contract\\n   *\\n   * Note: This function does not place a limit on the number of LP-SFTs that\\n   * can be minted in a single transaction. The number of LP-SFTs to mint can\\n   * exceed the block gas limit, denying the transaction from completing.\\n   */\\n  function mintBatch(\\n    address to,\\n    uint256[] memory sftTokenIds,\\n    bytes memory data\\n  ) external;\\n\\n  /**\\n   * @dev Burns an existing LP-SFT\\n   *\\n   * @param from The account to burn an LP-SFT from\\n   * @param sftTokenId The token ID of the LP-SFT to burn\\n   */\\n  function burn(address from, uint256 sftTokenId) external;\\n\\n  /**\\n   * @dev Burns a batch of existing LP-SFTs\\n   *\\n   * @param from The account to burn LP-SFTs from\\n   * @param sftTokenIds The token IDs of the LP-SFTs to burn\\n   *\\n   * Note: This function does not place a limit on the number of LP-SFTs that\\n   * can be burned in a single transaction. The number of LP-SFTs to burn can\\n   * exceed the block gas limit, denying the transaction from completing.\\n   */\\n  function burnBatch(address from, uint256[] memory sftTokenIds) external;\\n}\\n\",\"keccak256\":\"0x5ddc95002072bd3c40ac6287144db0b0b1fc08736d8945adb01ac2ada958a0bc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/token/routes/IGameTokenPooler.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * This file is derived from the Ultrachess project under the Apache 2.0 license.\\n * Copyright (C) 2022-2023 Ultrachess team\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later AND Apache-2.0\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\n/**\\n * @dev Token router send to liquidity to the Uniswap V3 pool in exchange for\\n * an LP-NFT\\n */\\ninterface IGameTokenPooler {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Emitted when an LP-NFT is minted\\n   *\\n   * @param sender The sender of the assets being paid\\n   * @param recipient The address of the recipient of the LP-NFT\\n   * @param gameTokenAddress The address of the game token\\n   * @param assetTokenAddress The address of the asset token\\n   * @param nftAddress The address of the NFT manager contract\\n   * @param lpNftTokenId The ID of the LP-NFT\\n   * @param gameTokenShare The amount of the game token in the NFT\\n   * @param assetTokenShare The amount of the asset token in the NFT\\n   * @param liquidityAmount The amount of liquidity created\\n   */\\n  event LpNftMinted(\\n    address indexed sender,\\n    address indexed recipient,\\n    address indexed gameTokenAddress,\\n    address assetTokenAddress,\\n    address nftAddress,\\n    uint256 lpNftTokenId,\\n    uint256 gameTokenShare,\\n    uint256 assetTokenShare,\\n    uint128 liquidityAmount\\n  );\\n\\n  /**\\n   * @dev Emitted when liquidity and fees are collected from an LP-NFT.\\n   *\\n   * @param sender The sender of the collection request\\n   * @param recipient The address of the recipient of the LP-NFT fees\\n   * @param gameTokenAddress The address of the game token\\n   * @param assetTokenAddress The address of the asset token\\n   * @param nftAddress The address of the NFT manager contract\\n   * @param lpNftTokenId The ID of the NFT\\n   * @param liquidityAmount The amount of liquidity in the NFT before collection\\n   * @param gameTokenCollected The amount of game token fees collected\\n   * @param assetTokenCollected The amount of asset token fees collected\\n   * @param assetTokenReturned The amount of the asset token returned to the\\n   *        recipient\\n   */\\n  event LpNftCollected(\\n    address indexed sender,\\n    address indexed recipient,\\n    address indexed gameTokenAddress,\\n    address assetTokenAddress,\\n    address nftAddress,\\n    uint256 lpNftTokenId,\\n    uint128 liquidityAmount,\\n    uint256 gameTokenCollected,\\n    uint256 assetTokenCollected,\\n    uint256 assetTokenReturned\\n  );\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // External accessors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Returns true if the game token is token0 in the pool\\n   *\\n   * @return True if the game token is token0, false otherwise\\n   */\\n  function gameIsToken0() external view returns (bool);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // External interface for adding liquidity\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Mints an LP-NFT and deposits liquidity into the pool using the game\\n   *      token\\n   *\\n   * A swap will occur to allow for single-sided supply.\\n   *\\n   * @param gameTokenAmount The amounts of the game token to deposit\\n   * @param recipient The recipient of the LP-NFT\\n   *\\n   * @return lpNftTokenId The ID of the minted NFT\\n   */\\n  function mintLpNftWithGameToken(\\n    uint256 gameTokenAmount,\\n    address recipient\\n  ) external returns (uint256 lpNftTokenId);\\n\\n  /**\\n   * @dev Mints an LP-NFT and deposits liquidity into the pool using the asset\\n   * token\\n   *\\n   * A swap will occur to allow for single-sided supply.\\n   *\\n   * @param assetTokenAmount The amount of the the asset token to use\\n   * @param recipient The recipient of the LP-NFT\\n   *\\n   * @return lpNftTokenId The ID of the minted NFT\\n   */\\n  function mintLpNftWithAssetToken(\\n    uint256 assetTokenAmount,\\n    address recipient\\n  ) external returns (uint256 lpNftTokenId);\\n\\n  /**\\n   * @dev Mints a Uniswap V3 LP-NFT and deposits liquidity into the pool\\n   * without performing a token swap\\n   *\\n   * @param gameTokenAmount The amount of the game token to deposit\\n   * @param assetTokenAmount The amounts of the asset token to deposit\\n   * @param recipient The recient of the LP-NFT\\n   *\\n   * @return lpNftTokenId The ID of the minted NFT\\n   */\\n  function mintLpNftImbalance(\\n    uint256 gameTokenAmount,\\n    uint256 assetTokenAmount,\\n    address recipient\\n  ) external returns (uint256 lpNftTokenId);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // External interface for removing liquidity\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Collects the tokens and fees from an LP-NFT and returns the asset\\n   * token and empty LP-NFT to the recipient\\n   *\\n   * @param lpNftTokenId The ID of the LP-NFT\\n   * @param recipient The recipient of the fees and the LP-NFT\\n   *\\n   * @return assetTokenReturned The amount of the asset token returned to the\\n   * recipient\\n   */\\n  function collectFromLpNft(\\n    uint256 lpNftTokenId,\\n    address recipient\\n  ) external returns (uint256 assetTokenReturned);\\n\\n  /**\\n   * @dev Liquidates everything to the asset token in one transaction and\\n   * returns the empty LP-NFT\\n   *\\n   * @param lpNftTokenId The ID of the LP-NFT\\n   *\\n   * @return assetTokenReturned The amount of the asset token returned to the\\n   * sender\\n   */\\n  function exit(\\n    uint256 lpNftTokenId\\n  ) external returns (uint256 assetTokenReturned);\\n}\\n\",\"keccak256\":\"0xcf9940bba83379cda511875e9aa3a6a096ae295153e84518e923008ac20d69e6\",\"license\":\"GPL-3.0-or-later AND Apache-2.0\"},\"contracts/src/interfaces/token/routes/IGameTokenSwapper.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * This file is derived from the Ultrachess project under the Apache 2.0 license.\\n * Copyright (C) 2022-2023 Ultrachess team\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later AND Apache-2.0\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\n/**\\n * @dev Token router to swap between the game token and its asset token\\n */\\ninterface IGameTokenSwapper {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Emitted when POW1 is purchased with the asset token or POW5 is\\n   * purchased with the stable token\\n   *\\n   * @param sender The sender of the asset token\\n   * @param recipient The address of the recipient of the POW1\\n   * @param gameTokenAddress The address of the POW1 or POW5 token contract\\n   * @param assetTokenAddress The amount of the asset token being spent\\n   * @param pow1Returned The amount of POW1 received\\n   */\\n  event GameTokenBought(\\n    address indexed sender,\\n    address indexed recipient,\\n    address indexed gameTokenAddress,\\n    address assetTokenAddress,\\n    uint256 assetTokenAmount,\\n    uint256 pow1Returned\\n  );\\n\\n  /**\\n   * @dev Emitted when POW1 is sold for the asset token or POW5 is sold for\\n   * the stable token\\n   *\\n   * @param sender The sender of the game token\\n   * @param recipient The address of the recipient of the asset token\\n   * @param gameTokenAddress The address of the POW1 or POW5 token contract\\n   * @param pow1Amount The amount of POW1 being spent\\n   * @param assetTokenReturned The amount of the asset token received\\n   */\\n  event GameTokenSold(\\n    address indexed sender,\\n    address indexed recipient,\\n    address indexed gameTokenAddress,\\n    address assetTokenAddress,\\n    uint256 pow1Amount,\\n    uint256 assetTokenReturned\\n  );\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // External accessors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Returns true if the game token is token0 in the pool\\n   *\\n   * @return True if the game token is token0, false otherwise\\n   */\\n  function gameIsToken0() external view returns (bool);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // External interface for swapping into the game token\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Swaps the asset token for the game token\\n   *\\n   * @param assetTokenAmount The ammount of the asset token to include in the\\n   *        swap\\n   * @param recipient The receiver of the game token\\n   *\\n   * @return gameTokenReturned The amount of the game token returned to the\\n   * recipient\\n   */\\n  function buyGameToken(\\n    uint256 assetTokenAmount,\\n    address recipient\\n  ) external returns (uint256 gameTokenReturned);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // External interface for swapping out of the game token\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Swaps the game token for the asset token\\n   *\\n   * @param gameTokenAmount The amount of the game token to swap\\n   * @param recipient The recient of the asset token\\n   *\\n   * @return assetTokenReturned The amount of asset token sent to the\\n   *                            recipient\\n   */\\n  function sellGameToken(\\n    uint256 gameTokenAmount,\\n    address recipient\\n  ) external returns (uint256 assetTokenReturned);\\n\\n  /**\\n   * @dev Liquidate everything to the asset token in one function call\\n   *\\n   * @return assetTokenReturned The amount of asset token returned\\n   */\\n  function exit() external returns (uint256 assetTokenReturned);\\n}\\n\",\"keccak256\":\"0xf0c7b320824a6471425614ffc416a601df495ffb8b4e1ea53489981add62f762\",\"license\":\"GPL-3.0-or-later AND Apache-2.0\"},\"contracts/src/interfaces/token/routes/IMarketStableSwapper.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * This file is derived from the Ultrachess project under the Apache 2.0 license.\\n * Copyright (C) 2022-2023 Ultrachess team\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later AND Apache-2.0\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\n/**\\n * @dev Token router to swap between the market token and the stable token\\n */\\ninterface IMarketStableSwapper {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Emitted when the market token is purchased for the stable token\\n   *\\n   * @param sender The sender of the stable token\\n   * @param recipient The address of the recipient of the market token\\n   * @param marketTokenAddress The address of the market token contract\\n   * @param stableTokenAddress The amount of the stable token being spent\\n   * @param stableTokenAmount The amount of the stable token being spent\\n   * @param marketTokenReturned The amount of the market token received\\n   */\\n  event MarketTokenBought(\\n    address indexed sender,\\n    address indexed recipient,\\n    address indexed marketTokenAddress,\\n    address stableTokenAddress,\\n    uint256 stableTokenAmount,\\n    uint256 marketTokenReturned\\n  );\\n\\n  /**\\n   * @dev Emitted when the market token is sold for the stable token\\n   *\\n   * @param sender The sender of the market token\\n   * @param recipient The address of the recipient of the stable token\\n   * @param marketTokenAddress The address of the market token contract\\n   * @param marketTokenAmount The amount of the market token being spent\\n   * @param marketTokenAmount The amount of the market token spent\\n   * @param stableTokenReturned The amount of the stable token received\\n   */\\n  event MarketTokenSold(\\n    address indexed sender,\\n    address indexed recipient,\\n    address indexed marketTokenAddress,\\n    address stableTokenAddress,\\n    uint256 marketTokenAmount,\\n    uint256 stableTokenReturned\\n  );\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public accessors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IMarketStableSwapper-marketIsToken0}\\n   */\\n  function marketIsToken0() external view returns (bool);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public interface for swapping into the market token\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Swaps the stable token for the market token\\n   *\\n   * @param stableTokenAmount The ammount of the stable token to include in\\n   *        the swap\\n   * @param recipient The receiver of the market token\\n   *\\n   * @return marketTokenReturned The amount of the market token returned to the\\n   * recipient\\n   */\\n  function buyMarketToken(\\n    uint256 stableTokenAmount,\\n    address recipient\\n  ) external returns (uint256 marketTokenReturned);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public interface for swapping out of the market token\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Swaps the market token for the stable token\\n   *\\n   * @param marketTokenAmount The amount of the market token to swap\\n   * @param recipient The recient of the stable token\\n   *\\n   * @return stableTokenReturned The amount of stable token returned to the\\n   * recipient\\n   */\\n  function sellMarketToken(\\n    uint256 marketTokenAmount,\\n    address recipient\\n  ) external returns (uint256 stableTokenReturned);\\n\\n  /**\\n   * @dev Liquidate everything to the stable token in one function call\\n   *\\n   * @return marketTokenAmount The amount of market token spent\\n   * @return stableTokenReturned The amount of stable token returned to the\\n   * recipient\\n   */\\n  function exit()\\n    external\\n    returns (uint256 marketTokenAmount, uint256 stableTokenReturned);\\n}\\n\",\"keccak256\":\"0xd7bbf5223be4d7c0692f0eaee0822cdf3ed62b8fb7ce5f591428caf4401d7204\",\"license\":\"GPL-3.0-or-later AND Apache-2.0\"},\"contracts/src/utils/auction/VRGDA.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * This file is derived from the Ultrachess project under the Apache 2.0 license.\\n * Copyright (C) 2022-2023 Ultrachess team\\n *\\n * This file is derived from the VRGDAs project under the MIT license.\\n * https://github.com/transmissions11/VRGDAs\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later AND Apache-2.0 AND MIT\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {wadLn, wadMul, wadExp, unsafeWadMul, toWadUnsafe} from \\\"solmate/src/utils/SignedWadMath.sol\\\";\\n\\n/**\\n * @title Variable Rate Gradual Dutch Auction\\n */\\ncontract VRGDA {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Target price for a token, to be scaled according to sales pace\\n   *\\n   * Represented as an 18 decimal fixed point number.\\n   */\\n  int256 internal immutable _targetPrice;\\n\\n  /**\\n   * @dev Precomputed constant that allows us to rewrite pow() as an exp()\\n   *\\n   * Represented as an 18 decimal fixed point number.\\n   */\\n  int256 internal immutable _decayConstant;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Construct a new VRGDA\\n   *\\n   * @param targetPrice Target price for a token if sold on pace, scaled by 1e18\\n   * @param priceDecayConstant The percent price decays per unit of time with no sales, scaled by 1e18\\n   */\\n  constructor(int256 targetPrice, int256 priceDecayConstant) {\\n    // Initialize state\\n    _targetPrice = targetPrice;\\n    _decayConstant = wadLn(1e18 - priceDecayConstant);\\n\\n    // Validate state\\n    // The decay constant must be negative for VRGDAs to work\\n    require(_decayConstant < 0, \\\"Nonnegative decay constant\\\");\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Pricing logic\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Calculate the price of a token according to the VRGDA formula.\\n   *\\n   * @param timeSinceStart Time passed since the VRGDA began, scaled by 1e18\\n   * @param sold The total number of tokens that have been sold so far\\n   *\\n   * @return The price of a token according to VRGDA, scaled by 1e18\\n   */\\n  function getVRGDAPrice(\\n    int256 timeSinceStart,\\n    uint256 sold\\n  ) public view virtual returns (uint256) {\\n    unchecked {\\n      return\\n        uint256(\\n          wadMul(\\n            _targetPrice,\\n            wadExp(\\n              unsafeWadMul(\\n                _decayConstant,\\n                // Theoretically calling toWadUnsafe with sold can silently\\n                // overflow but under any reasonable circumstance it will never\\n                // be large enough. We use sold + 1 as the VRGDA formula's n\\n                // param represents the nth token and sold is the n-1th token.\\n                timeSinceStart - getTargetSaleTime(toWadUnsafe(sold + 1))\\n              )\\n            )\\n          )\\n        );\\n    }\\n  }\\n\\n  /**\\n   * @dev Given a number of tokens sold, return the target time that number of\\n   * tokens should be sold by\\n   *\\n   * @param sold A number of tokens sold, scaled by 1e18, to get the\\n   *             corresponding target sale time for\\n   *\\n   * @return The target time the tokens should be sold by, scaled by 1e18,\\n   *         where the time is relative, such that 0 means the tokens should be\\n   *         sold immediately when the VRGDA begins\\n   */\\n  function getTargetSaleTime(int256 sold) public view virtual returns (int256) {\\n    // TODO\\n    sold;\\n    return 0;\\n  }\\n}\\n\",\"keccak256\":\"0xf41315a551e89abd799d4730d99799cdc6363db260558c5867401656fb06e0c7\",\"license\":\"GPL-3.0-or-later AND Apache-2.0 AND MIT\"},\"contracts/src/utils/math/LiquidityMath.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * This file is derived from the Ultrachess project under the Apache 2.0 license.\\n * Copyright (C) 2022-2023 Ultrachess team\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later AND Apache-2.0\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Liquidity math for computing the optimal one-sided supply to a\\n * liquidity pool\\n */\\nlibrary LiquidityMath {\\n  /**\\n   * @dev Compute swap amount needed for adding liquidity to a pool in the\\n   * absence of concentrated liquidity (such as a Uniswap V2 pool)\\n   *\\n   * The goal is to find the optimal swapA to get a corresponding amount\\n   * of asset B, so that the proportion of assets the user holds is equal to\\n   * the proportion of assets in reserves after swap.\\n   *\\n   * Calculation:\\n   *\\n   * The initial constant product is given by:\\n   *\\n   *   k = reserveA * reserveB\\n   *\\n   * The swap fee is deducted from the input asset amount, so the new reserveB\\n   * should satisfy:\\n   *\\n   *   k = (reserveA + (1 - fee) * swapA) * reserveB'\\n   *\\n   * This means the user will receive an amount of asset B equal to:\\n   *\\n   *   rcvB = reserveB - reserveB'\\n   *\\n   *        = reserveB - k / (reserveA + (1 - fee) * swapA)\\n   *\\n   *        = reserveB - reserveA * reserveB / (reserveA + (1 - fee) * swapA)\\n   *\\n   *        = (1 - fee) * reserveB * swapA / (reserveA + (1 - fee) * swapA)\\n   *\\n   * The optimal swapA should satisfy the equality constraint on the\\n   * user's asset ratio and the reserve's asset ratio:\\n   *\\n   *   (amountA - swapA) / (reserveA + swapA) = rcvB / reserveB'\\n   *\\n   * Substituting known variables rcvB and reserveB' and rearranging the\\n   * equation yields a quadratic equation in variable swapA as follows:\\n   *\\n   *   (1 - fee) * (swapA)^2 + ((2 - fee) * reserveA) * swapA - amountA * reserveA = 0\\n   *\\n   * Solving the above equation for a non-negative root yields:\\n   *\\n   *   swapA =\\n   *     sqrt(((2 - fee) * reserveA)^2 + 4 * (1 - fee) * amountA * reserveA) - (2 - fee) * reserveA\\n   *       / (2 * (1 - fee))\\n   *\\n   * The fee is represented in hundredths of a bip, so we can avoid floating\\n   * point numbers by multiplying both the numerator and denominator by 1E6:\\n   *\\n   * swapA =\\n   *   sqrt((2E6 - fee)^2 * reserveA^2 + 4 * 1E6 * (1E6 - fee) * amountA * reserveA) - (2E6 - fee) * reserveA\\n   *     / (2 * (1E6 - fee))\\n   *\\n   * Credit to Zapper Finance for the above derivation.\\n   *\\n   * @param reserveA The reserve of token A\\n   * @param amountA The amount of token A to add\\n   * @param swapfee The swap fee of the pool, denominated in hundredths of a bip\\n   *\\n   * @return swapA The amount of token A to swap for token B\\n   */\\n  function computeSwapAmountV2(\\n    uint256 reserveA,\\n    uint256 amountA,\\n    uint24 swapfee\\n  ) internal pure returns (uint256 swapA) {\\n    // prettier-ignore\\n    swapA = (\\n      Math.sqrt(\\n        (\\n          (uint256(2E6) - swapfee) * (uint256(2E6) - swapfee) * reserveA * reserveA\\n        ) + (\\n          uint256(4) * uint256(1E6) * (uint256(1E6) - swapfee) * amountA * reserveA\\n        )\\n      ) - (\\n        (uint256(2E6) - swapfee) * reserveA\\n      )\\n    ) / (\\n      uint256(2) * (uint256(1E6) - swapfee)\\n    );\\n\\n    return swapA;\\n  }\\n}\\n\",\"keccak256\":\"0x5ee81a31b90476b43bc2f234883b69e6ca48886685be74f8c02e938bc64da338\",\"license\":\"GPL-3.0-or-later AND Apache-2.0\"},\"solmate/src/utils/SignedWadMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Signed 18 decimal fixed point (wad) arithmetic library.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SignedWadMath.sol)\\n/// @author Modified from Remco Bloemen (https://xn--2-umb.com/22/exp-ln/index.html)\\n\\n/// @dev Will not revert on overflow, only use where overflow is not possible.\\nfunction toWadUnsafe(uint256 x) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Multiply x by 1e18.\\n        r := mul(x, 1000000000000000000)\\n    }\\n}\\n\\n/// @dev Takes an integer amount of seconds and converts it to a wad amount of days.\\n/// @dev Will not revert on overflow, only use where overflow is not possible.\\n/// @dev Not meant for negative second amounts, it assumes x is positive.\\nfunction toDaysWadUnsafe(uint256 x) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Multiply x by 1e18 and then divide it by 86400.\\n        r := div(mul(x, 1000000000000000000), 86400)\\n    }\\n}\\n\\n/// @dev Takes a wad amount of days and converts it to an integer amount of seconds.\\n/// @dev Will not revert on overflow, only use where overflow is not possible.\\n/// @dev Not meant for negative day amounts, it assumes x is positive.\\nfunction fromDaysWadUnsafe(int256 x) pure returns (uint256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Multiply x by 86400 and then divide it by 1e18.\\n        r := div(mul(x, 86400), 1000000000000000000)\\n    }\\n}\\n\\n/// @dev Will not revert on overflow, only use where overflow is not possible.\\nfunction unsafeWadMul(int256 x, int256 y) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Multiply x by y and divide by 1e18.\\n        r := sdiv(mul(x, y), 1000000000000000000)\\n    }\\n}\\n\\n/// @dev Will return 0 instead of reverting if y is zero and will\\n/// not revert on overflow, only use where overflow is not possible.\\nfunction unsafeWadDiv(int256 x, int256 y) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Multiply x by 1e18 and divide it by y.\\n        r := sdiv(mul(x, 1000000000000000000), y)\\n    }\\n}\\n\\nfunction wadMul(int256 x, int256 y) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Store x * y in r for now.\\n        r := mul(x, y)\\n\\n        // Combined overflow check (`x == 0 || (x * y) / x == y`) and edge case check\\n        // where x == -1 and y == type(int256).min, for y == -1 and x == min int256,\\n        // the second overflow check will catch this.\\n        // See: https://secure-contracts.com/learn_evm/arithmetic-checks.html#arithmetic-checks-for-int256-multiplication\\n        // Combining into 1 expression saves gas as resulting bytecode will only have 1 `JUMPI`\\n        // rather than 2.\\n        if iszero(\\n            and(\\n                or(iszero(x), eq(sdiv(r, x), y)),\\n                or(lt(x, not(0)), sgt(y, 0x8000000000000000000000000000000000000000000000000000000000000000))\\n            )\\n        ) {\\n            revert(0, 0)\\n        }\\n\\n        // Scale the result down by 1e18.\\n        r := sdiv(r, 1000000000000000000)\\n    }\\n}\\n\\nfunction wadDiv(int256 x, int256 y) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Store x * 1e18 in r for now.\\n        r := mul(x, 1000000000000000000)\\n\\n        // Equivalent to require(y != 0 && ((x * 1e18) / 1e18 == x))\\n        if iszero(and(iszero(iszero(y)), eq(sdiv(r, 1000000000000000000), x))) {\\n            revert(0, 0)\\n        }\\n\\n        // Divide r by y.\\n        r := sdiv(r, y)\\n    }\\n}\\n\\n/// @dev Will not work with negative bases, only use when x is positive.\\nfunction wadPow(int256 x, int256 y) pure returns (int256) {\\n    // Equivalent to x to the power of y because x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)\\n    return wadExp((wadLn(x) * y) / 1e18); // Using ln(x) means x must be greater than 0.\\n}\\n\\nfunction wadExp(int256 x) pure returns (int256 r) {\\n    unchecked {\\n        // When the result is < 0.5 we return zero. This happens when\\n        // x <= floor(log(0.5e18) * 1e18) ~ -42e18\\n        if (x <= -42139678854452767551) return 0;\\n\\n        // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\\n        // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\\n        if (x >= 135305999368893231589) revert(\\\"EXP_OVERFLOW\\\");\\n\\n        // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\\n        // for more intermediate precision and a binary basis. This base conversion\\n        // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n        x = (x << 78) / 5**18;\\n\\n        // Reduce range of x to (-\\u00bd ln 2, \\u00bd ln 2) * 2**96 by factoring out powers\\n        // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n        // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n        int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96;\\n        x = x - k * 54916777467707473351141471128;\\n\\n        // k is in the range [-61, 195].\\n\\n        // Evaluate using a (6, 7)-term rational approximation.\\n        // p is made monic, we'll multiply by a scale factor later.\\n        int256 y = x + 1346386616545796478920950773328;\\n        y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n        int256 p = y + x - 94201549194550492254356042504812;\\n        p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n        p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n        // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n        int256 q = x - 2855989394907223263936484059900;\\n        q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n        q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n        q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n        q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n        q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Div in assembly because solidity adds a zero check despite the unchecked.\\n            // The q polynomial won't have zeros in the domain as all its roots are complex.\\n            // No scaling is necessary because p is already 2**96 too large.\\n            r := sdiv(p, q)\\n        }\\n\\n        // r should be in the range (0.09, 0.25) * 2**96.\\n\\n        // We now need to multiply r by:\\n        // * the scale factor s = ~6.031367120.\\n        // * the 2**k factor from the range reduction.\\n        // * the 1e18 / 2**96 factor for base conversion.\\n        // We do this all at once, with an intermediate result in 2**213\\n        // basis, so the final right shift is always by a positive amount.\\n        r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k));\\n    }\\n}\\n\\nfunction wadLn(int256 x) pure returns (int256 r) {\\n    unchecked {\\n        require(x > 0, \\\"UNDEFINED\\\");\\n\\n        // We want to convert x from 10**18 fixed point to 2**96 fixed point.\\n        // We do this by multiplying by 2**96 / 10**18. But since\\n        // ln(x * C) = ln(x) + ln(C), we can simply do nothing here\\n        // and add ln(2**96 / 10**18) at the end.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            r := or(r, shl(2, lt(0xf, shr(r, x))))\\n            r := or(r, shl(1, lt(0x3, shr(r, x))))\\n            r := or(r, lt(0x1, shr(r, x)))\\n        }\\n\\n        // Reduce range of x to (1, 2) * 2**96\\n        // ln(2^k * x) = k * ln(2) + ln(x)\\n        int256 k = r - 96;\\n        x <<= uint256(159 - k);\\n        x = int256(uint256(x) >> 159);\\n\\n        // Evaluate using a (8, 8)-term rational approximation.\\n        // p is made monic, we will multiply by a scale factor later.\\n        int256 p = x + 3273285459638523848632254066296;\\n        p = ((p * x) >> 96) + 24828157081833163892658089445524;\\n        p = ((p * x) >> 96) + 43456485725739037958740375743393;\\n        p = ((p * x) >> 96) - 11111509109440967052023855526967;\\n        p = ((p * x) >> 96) - 45023709667254063763336534515857;\\n        p = ((p * x) >> 96) - 14706773417378608786704636184526;\\n        p = p * x - (795164235651350426258249787498 << 96);\\n\\n        // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n        // q is monic by convention.\\n        int256 q = x + 5573035233440673466300451813936;\\n        q = ((q * x) >> 96) + 71694874799317883764090561454958;\\n        q = ((q * x) >> 96) + 283447036172924575727196451306956;\\n        q = ((q * x) >> 96) + 401686690394027663651624208769553;\\n        q = ((q * x) >> 96) + 204048457590392012362485061816622;\\n        q = ((q * x) >> 96) + 31853899698501571402653359427138;\\n        q = ((q * x) >> 96) + 909429971244387300277376558375;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Div in assembly because solidity adds a zero check despite the unchecked.\\n            // The q polynomial is known not to have zeros in the domain.\\n            // No scaling required because p is already 2**96 too large.\\n            r := sdiv(p, q)\\n        }\\n\\n        // r is in the range (0, 0.125) * 2**96\\n\\n        // Finalization, we need to:\\n        // * multiply by the scale factor s = 5.549\\u2026\\n        // * add ln(2**96 / 10**18)\\n        // * add k * ln(2)\\n        // * multiply by 10**18 / 2**96 = 5**18 >> 78\\n\\n        // mul s * 5e18 * 2**96, base is now 5**18 * 2**192\\n        r *= 1677202110996718588342820967067443963516166;\\n        // add ln(2) * k * 5e18 * 2**192\\n        r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k;\\n        // add ln(2**96 / 10**18) * 5e18 * 2**192\\n        r += 600920179829731861736702779321621459595472258049074101567377883020018308;\\n        // base conversion: mul 2**18 / 2**192\\n        r >>= 174;\\n    }\\n}\\n\\n/// @dev Will return 0 instead of reverting if y is zero.\\nfunction unsafeDiv(int256 x, int256 y) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Divide x by y.\\n        r := sdiv(x, y)\\n    }\\n}\\n\",\"keccak256\":\"0x5969fdaa3411dfe85bb2991cffee69160a138aa853b1cd768fc5f96b75ee63d1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526019805460ff1916905534801561001a57600080fd5b50604051613e0b380380613e0b83398101604081905261003991610406565b81816001600160a01b0316637e9280726040518163ffffffff1660e01b81526004016102e060405180830381865afa158015610079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009d9190610487565b600180558051600280546001600160a01b03199081166001600160a01b0393841617909155602083015160038054831691841691909117905560408301516004805483169184169190911790556060830151600580548316918416919091179055608083015160068054831691841691909117905560a083015160078054831691841691909117905560c083015160088054831691841691909117905560e0830151600980548316918416919091179055610100830151600a80548316918416919091179055610120830151600b80548316918416919091179055610140830151600c80548316918416919091179055610160830151600d80548316918416919091179055610180830151600e805483169184169190911790556101a0830151600f805483169184169190911790556101c08301516010805483169184169190911790556101e08301516011805483169184169190911790556102008301516012805483169184169190911790556102208301516013805483169184169190911790556102408301516014805483169184169190911790556102608301516015805483169184169190911790556102808301516016805483169184169190911790556102a08301516017805483169184169190911790556102c090920151601880549093169082161790915581166102cb5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21037bbb732b960991b604482015260640160405180910390fd5b6102d6600082610342565b50506040805160c08101825265af1d364e18008082526103e86020808401829052670de0b6b3a764000094840185905260608401859052655af3107a40006080850181905260a0909401859052601c92909255601d55601e839055601f839055556021555061064a9050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166103e4576000838152602081815260408083206001600160a01b03861684529091529020805460ff1916600117905561039c3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016103e8565b5060005b92915050565b6001600160a01b038116811461040357600080fd5b50565b6000806040838503121561041957600080fd5b8251610424816103ee565b6020840151909250610435816103ee565b809150509250929050565b6040516102e081016001600160401b038111828210171561047157634e487b7160e01b600052604160045260246000fd5b60405290565b8051610482816103ee565b919050565b60006102e082840312801561049b57600080fd5b506104a4610440565b6104ad83610477565b81526104bb60208401610477565b60208201526104cc60408401610477565b60408201526104dd60608401610477565b60608201526104ee60808401610477565b60808201526104ff60a08401610477565b60a082015261051060c08401610477565b60c082015261052160e08401610477565b60e08201526105336101008401610477565b6101008201526105466101208401610477565b6101208201526105596101408401610477565b61014082015261056c6101608401610477565b61016082015261057f6101808401610477565b6101808201526105926101a08401610477565b6101a08201526105a56101c08401610477565b6101c08201526105b86101e08401610477565b6101e08201526105cb6102008401610477565b6102008201526105de6102208401610477565b6102208201526105f16102408401610477565b6102408201526106046102608401610477565b6102608201526106176102808401610477565b61028082015261062a6102a08401610477565b6102a082015261063d6102c08401610477565b6102c08201529392505050565b6137b2806106596000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c806392a9178911610125578063c44e6640116100ad578063d58258f21161007c578063d58258f2146104f9578063d92aa38e1461050e578063e029982214610521578063f23a6e6114610532578063f2ac024b1461055157600080fd5b8063c44e6640146104a1578063c81fcc95146104c4578063cbb43836146104d5578063d547741f146104e657600080fd5b8063a6ab36f2116100f4578063a6ab36f21461043a578063a9d75b2b1461044d578063ad48d6111461045e578063bc197c811461046f578063c430694f1461048e57600080fd5b806392a91789146103fd578063949f5d2014610410578063a1abfd9514610421578063a217fddf1461043257600080fd5b80632f2ff15d116101a8578063392e53cd11610177578063392e53cd146103995780633cc7385b146103a45780635be53e74146103b55780638ad91345146103ca57806391d14854146103ea57600080fd5b80632f2ff15d1461034f5780632f8331821461036457806336568abe146103755780633721d4ae1461038857600080fd5b80631753dec7116101e45780631753dec7146102ba57806320bcb25d146102f8578063248a9ca31461030d57806324d7197a1461033e57600080fd5b806301ffc9a714610216578063098810071461023e5780630e07cfca1461025e578063150b7a0214610283575b600080fd5b610229610224366004612e06565b610559565b60405190151581526020015b60405180910390f35b61025161024c366004612e30565b61056a565b6040516102359190612e49565b600b546001600160a01b03165b6040516001600160a01b039091168152602001610235565b6102a1610291366004612f5c565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610235565b604080518082018252600080825260209182015281518083018352601a54808252601b54918301918252835190815290519181019190915201610235565b6103006105eb565b6040516102359190612fc8565b61033061031b366004612e30565b60009081526020819052604090206001015490565b604051908152602001610235565b6013546001600160a01b031661026b565b61036261035d36600461300b565b610664565b005b6011546001600160a01b031661026b565b61036261038336600461300b565b61068f565b6010546001600160a01b031661026b565b60195460ff16610229565b600f546001600160a01b031661026b565b6103bd6106c7565b604051610235919061303b565b6103dd6103d8366004612e30565b610760565b60405161023591906130a2565b6102296103f836600461300b565b6107d2565b61036261040b3660046130d5565b6107fb565b6003546001600160a01b031661026b565b6009546001600160a01b031661026b565b610330600081565b61033061044836600461312b565b6111db565b6008546001600160a01b031661026b565b6007546001600160a01b031661026b565b6102a161047d3660046131dd565b63bc197c8160e01b95945050505050565b61036261049c366004613297565b6116d4565b601954610100900463ffffffff1660405163ffffffff9091168152602001610235565b6018546001600160a01b031661026b565b600e546001600160a01b031661026b565b6103626104f436600461300b565b611795565b6105016117ba565b60405161023591906132cc565b61033061051c366004612e30565b6118db565b6002546001600160a01b031661026b565b6102a161054036600461333a565b63f23a6e6160e01b95945050505050565b601a54610330565b600061056482611a80565b92915050565b61059c6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b50600090815260246020908152604091829020825160a0810184528154815260018201549281019290925260028101549282019290925260038201546060820152600490910154608082015290565b6106246040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506040805160c081018252601c548152601d54602080830191909152601e5492820192909252601f5460608201529054608082015260215460a082015290565b60008281526020819052604090206001015461067f81611aab565b6106898383611ab8565b50505050565b6001600160a01b03811633146106b85760405163334bd91960e11b815260040160405180910390fd5b6106c28282611b4a565b505050565b606060006106d56022611bb5565b905060008167ffffffffffffffff8111156106f2576106f2612e97565b60405190808252806020026020018201604052801561071b578160200160208202803683370190505b50905060005b8281101561075957610734602282611bbf565b82828151811061074657610746613397565b6020908102919091010152600101610721565b5092915050565b60185460405163c87b56dd60e01b8152600481018390526060916001600160a01b03169063c87b56dd90602401600060405180830381865afa1580156107aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261056491908101906133ad565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610803611bcb565b8460000361084c5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590813140b539195081251607a1b60448201526064015b60405180910390fd5b600084118061085b5750600083115b6108995760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c185e5b595b9d608a1b6044820152606401610843565b6001600160a01b0382166108e55760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642062656e656669636961727960681b6044820152606401610843565b6001600160a01b03811661092e5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610843565b600085815260246020526040812080549091036109835760405162461bcd60e51b81526020600482015260136024820152724c502d4e4654206e6f7420666f722073616c6560681b6044820152606401610843565b6004810154156109cc5760405162461bcd60e51b8152602060048201526014602482015273105d58dd1a5bdb88185b1c9958591e481cdbdb1960621b6044820152606401610843565b60006109d7876118db565b601b8190556004830181905590508515610a0357610a03336002546001600160a01b0316903089611bf5565b8415610a2157610a21336007546001600160a01b0316903088611bf5565b85856000670de0b6b3a7640000610a38858561343a565b610a429190613467565b90506000670de0b6b3a7640000610a59868b61343a565b610a639190613467565b90506000821180610a745750600081115b610aaf5760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964207469707360a01b6044820152606401610843565b8115610ad957600254610acc906001600160a01b03168984611c5c565b610ad68285613489565b93505b8015610b0357600754610af6906001600160a01b03168983611c5c565b610b008184613489565b92505b5050600b546040805163ddca3f4360e01b815290516000926001600160a01b03169163ddca3f439160048083019260209291908290030181865afa158015610b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7391906134b4565b905082600003610cca57600754600b546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf291906134cf565b90506000610c01828585611c8d565b905083811115610c235760405162461bcd60e51b8152600401610843906134e8565b600e54600754610c40916001600160a01b03918216911683611d7b565b600e54604051636aa8f93560e01b8152600481018390523060248201526001600160a01b0390911690636aa8f935906044016020604051808303816000875af1158015610c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb591906134cf565b9450610cc18185613489565b93505050610e1b565b81600003610e1b57600254600b546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4791906134cf565b90506000610d56828685611c8d565b905084811115610d785760405162461bcd60e51b8152600401610843906134e8565b600e54600254610d95916001600160a01b03918216911683611d7b565b600e546040516301952d0960e31b8152600481018390523060248201526001600160a01b0390911690630ca96848906044016020604051808303816000875af1158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a91906134cf565b9350610e168186613489565b945050505b601d548084118015610e2c57508083115b610e6e5760405162461bcd60e51b8152602060048201526013602482015272139bdd08195b9bdd59da08199bdc88191d5cdd606a1b6044820152606401610843565b610e7960228c611e05565b610eb95760405162461bcd60e51b8152602060048201526011602482015270105d58dd1a5bdb881b9bdd08199bdd5b99607a1b6044820152606401610843565b6000610ec58283611e11565b9050610ed0816121d6565b8415610ef357601854600254610ef3916001600160a01b03918216911687611d7b565b8315610f1657601854600754610f16916001600160a01b03918216911686611d7b565b6018546040805160c081019091528d81526007546002546001600160a01b039384169363219f5d1793926020840192908216911610610f555787610f57565b885b81526007546002546020909201916001600160a01b03918216911610610f7d5788610f7f565b875b81526020016000815260200160008152602001428152506040518263ffffffff1660e01b8152600401610fb29190612fc8565b6060604051808303816000875af1158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff5919061352b565b505050600260160160009054906101000a90046001600160a01b03166001600160a01b031663b88d4fde30600260110160009054906101000a90046001600160a01b03168f6040518463ffffffff1660e01b8152600401611086939291906001600160a01b039384168152919092166020820152604081019190915260806060820181905260009082015260a00190565b600060405180830381600087803b1580156110a057600080fd5b505af11580156110b4573d6000803e3d6000fd5b50505050600260070160009054906101000a90046001600160a01b03166001600160a01b031663f242432a308a8f60016040518563ffffffff1660e01b81526004016111039493929190613560565b600060405180830381600087803b15801561111d57600080fd5b505af1158015611131573d6000803e3d6000fd5b50506007546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015611180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a491906134cf565b905080156111c3576007546111c3906001600160a01b03163383611c5c565b50505050505050506111d460018055565b5050505050565b60006111e5611bcb565b6111ef6000611aab565b600084116112355760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081413d5cc48185b5bdd5b9d606a1b6044820152606401610843565b6000831161127d5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081b585c9ad95d08185b5bdd5b9d605a1b6044820152606401610843565b6001600160a01b0382166112c65760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610843565b60195460ff161561130f5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610843565b6019805460ff1916600117905561133a6113263390565b6002546001600160a01b0316903087611bf5565b611353335b6007546001600160a01b0316903086611bf5565b601154600254611370916001600160a01b03918216911686611d7b565b60115460075461138d916001600160a01b03918216911685611d7b565b6011546040516326c662b160e11b815260048101869052602481018590523060448201526001600160a01b0390911690634d8cc562906064016020604051808303816000875af11580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140991906134cf565b601854601354604051635c46a7ef60e11b81523060048201526001600160a01b039182166024820152604481018490526080606482015260006084820152929350169063b88d4fde9060a401600060405180830381600087803b15801561146f57600080fd5b505af1158015611483573d6000803e3d6000fd5b50506009546040516308bb76a560e01b815260048101859052600093506001600160a01b0390911691506308bb76a590602401602060405180830381865afa1580156114d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f791906135a3565b90506001600160a01b0381166115405760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a590813140b54d19560921b6044820152606401610843565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ad91906134cf565b905080156115cc576002546115cc906001600160a01b03168383611c5c565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611615573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163991906134cf565b9050801561165857600754611658906001600160a01b03168683611c5c565b600954604051637921219560e11b81526001600160a01b039091169063f242432a9061168f90309089908990600190600401613560565b600060405180830381600087803b1580156116a957600080fd5b505af11580156116bd573d6000803e3d6000fd5b505050505050506116cd60018055565b9392505050565b6116dc611bcb565b6116e66000611aab565b60195460ff1661172a5760405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b9a5d1a585b1a5e9959608a1b6044820152606401610843565b6019805463ffffffff84811661010081810264ffffffff001985161790945592909104169081101561178757600061176282856135c0565b905061176d3361133f565b61177d8163ffffffff16846122a1565b61178561256e565b505b5061179160018055565b5050565b6000828152602081905260409020600101546117b081611aab565b6106898383611b4a565b606060006117c86022611bb5565b905060008167ffffffffffffffff8111156117e5576117e5612e97565b60405190808252806020026020018201604052801561184857816020015b6118356040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816118035790505b50905060005b82811015610759576000611863602283611bbf565b9050602460008281526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250508383815181106118c7576118c7613397565b60209081029190910101525060010161184e565b6000818152602460209081526040808320815160a0810183528154808252600183015494820194909452600282015492810192909252600381015460608301526004015460808201529083146119695760405162461bcd60e51b81526020600482015260136024820152724c502d4e4654206e6f7420666f722073616c6560681b6044820152606401610843565b6080810151156119b25760405162461bcd60e51b8152602060048201526014602482015273105d58dd1a5bdb88185b1c9958591e481cdbdb1960621b6044820152606401610843565b60008160600151116119fc5760405162461bcd60e51b8152602060048201526013602482015272105d58dd1a5bdb881b9bdd081cdd185c9d1959606a1b6044820152606401610843565b6000816060015142611a0e9190613489565b601c54909150670de0b6b3a76400008202906000611a2c8284612703565b611a35906135dc565b90506000611a4282612736565b60208701519091506000611a568284612703565b604089015190915080821215611a6e57809950611a72565b8199505b505050505050505050919050565b6000611a8b826128df565b8061056457506001600160e01b031982166392a9178960e01b1492915050565b611ab5813361290a565b50565b6000611ac483836107d2565b611b42576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055611afa3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610564565b506000610564565b6000611b5683836107d2565b15611b42576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610564565b6000610564825490565b60006116cd8383612943565b600260015403611bee57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b0384811660248301528381166044830152606482018390526106899186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061296d565b6040516001600160a01b038381166024830152604482018390526106c291859182169063a9059cbb90606401611c2a565b6000611ca162ffffff8316620f4240613489565b611cac90600261343a565b84611cbf62ffffff8516621e8480613489565b611cc9919061343a565b611d5f8686611ce062ffffff8816620f4240613489565b611cee620f4240600461343a565b611cf8919061343a565b611d02919061343a565b611d0c919061343a565b8780611d2062ffffff8916621e8480613489565b611d3262ffffff8a16621e8480613489565b611d3c919061343a565b611d46919061343a565b611d50919061343a565b611d5a91906135f8565b6129de565b611d699190613489565b611d739190613467565b949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611def91906134cf565b90506106898484611e0085856135f8565b612b37565b60006116cd8383612bc7565b6000808311611e4c5760405162461bcd60e51b81526020600482015260076024820152664e6f20504f573160c81b6044820152606401610843565b60008211611e8e5760405162461bcd60e51b815260206004820152600f60248201526e27379036b0b935b2ba103a37b5b2b760891b6044820152606401610843565b601154600254611eab916001600160a01b03918216911685611d7b565b601154600754611ec8916001600160a01b03918216911684611d7b565b6011546040516326c662b160e11b815260048101859052602481018490523060448201526001600160a01b0390911690634d8cc562906064016020604051808303816000875af1158015611f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4491906134cf565b6018546040516331a9108f60e11b81526004810183905291925030916001600160a01b0390911690636352211e90602401602060405180830381865afa158015611f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb691906135a3565b6001600160a01b031614611ff85760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610843565b60185460405163133f757160e31b8152600481018390526000916001600160a01b0316906399fbab889060240161018060405180830381865afa158015612043573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612067919061361d565b50506018546040805160a0810182528e81526001600160801b0386166020820152600081830181905260608201524260808201529051630624e65f60e11b8152949c506001600160a01b039091169a50630c49ccbe99506120d69850965050600490910193506136ff92505050565b60408051808303816000875af11580156120f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121189190613742565b50506018546040805160808101825284815230602082019081526001600160801b0382840181815260608401828152945163fc6f786560e01b81529351600485015291516001600160a01b0390811660248501529151811660448401529251909216606482015291169063fc6f78659060840160408051808303816000875af11580156121a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cd9190613742565b50505092915050565b60006121e0612cba565b6040805160a0810182528481526020808201848152815483850190815242606085019081526000608086018181528a82526024909552958620855181559251600180850191909155915160028401555160038301559151600490910155601a805494955091939092906122549084906135f8565b909155506122659050602284612cf3565b6106c25760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b6044820152606401610843565b600754600b546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa1580156122f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231691906134cf565b90506000600260090160009054906101000a90046001600160a01b03166001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015612370573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239491906134b4565b905060006123a3838584611c8d565b9050838111156123c55760405162461bcd60e51b8152600401610843906134e8565b600e546007546123e2916001600160a01b03918216911683611d7b565b600e54604051636aa8f93560e01b8152600481018390523060248201526001600160a01b0390911690636aa8f935906044016020604051808303816000875af1158015612433573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245791906134cf565b5060005b85811015612566576002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156124ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d091906134cf565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561251e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254291906134cf565b905060006125508383611e11565b905061255b816121d6565b50505060010161245b565b505050505050565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156125b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125db91906134cf565b9050801561267757600e54600254612600916001600160a01b03918216911683611d7b565b600e546040516301952d0960e31b8152600481018390523060248201526001600160a01b0390911690630ca96848906044016020604051808303816000875af1158015612651573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267591906134cf565b505b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156126c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e491906134cf565b9050801561179157611791336007546001600160a01b03169083611c5c565b81810282158382058314176000198410600160ff1b8413171661272557600080fd5b670de0b6b3a7640000900592915050565b6000680248ce36a70cb26b3e19821361275157506000919050565b680755bf798b4a1bf1e582126127985760405162461bcd60e51b815260206004820152600c60248201526b4558505f4f564552464c4f5760a01b6044820152606401610843565b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b39881029093036c240c330e9fb2d9cbaf0fd5aafb1981018102606090811d6d0277594991cfc85f6e2461837cd9018202811d6d1a521255e34f6a5061b25ef1c9c319018202811d6db1bbb201f443cf962f1a1d3db4a5018202811d6e02c72388d9f74f51a9331fed693f1419018202811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765084018402831d9081019084016d01d3967ed30fc4f89c02bab5708119010290911d6e0587f503bb6ea29d25fcb740196450019091026d360d7aeea093263ecc6e0ecb291760621b010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b60006128ea82612cff565b8061056457506001600160e01b031982166309ffb6a360e41b1492915050565b61291482826107d2565b6117915760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610843565b600082600001828154811061295a5761295a613397565b9060005260206000200154905092915050565b600080602060008451602086016000885af180612990576040513d6000823e3d81fd5b50506000513d915081156129a85780600114156129b5565b6001600160a01b0384163b155b1561068957604051635274afe760e01b81526001600160a01b0385166004820152602401610843565b6000600182116129ec575090565b816001600160801b8210612a055760809190911c9060401b5b680100000000000000008210612a205760409190911c9060201b5b6401000000008210612a375760209190911c9060101b5b620100008210612a4c5760109190911c9060081b5b6101008210612a605760089190911c9060041b5b60108210612a735760049190911c9060021b5b60048210612a7f5760011b5b600302600190811c90818581612a9757612a97613451565b048201901c90506001818581612aaf57612aaf613451565b048201901c90506001818581612ac757612ac7613451565b048201901c90506001818581612adf57612adf613451565b048201901c90506001818581612af757612af7613451565b048201901c90506001818581612b0f57612b0f613451565b048201901c9050612b2e818581612b2857612b28613451565b04821190565b90039392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612b888482612d1f565b610689576040516001600160a01b03848116602483015260006044830152612bbd91869182169063095ea7b390606401611c2a565b610689848261296d565b60008181526001830160205260408120548015612cb0576000612beb600183613489565b8554909150600090612bff90600190613489565b9050808214612c64576000866000018281548110612c1f57612c1f613397565b9060005260206000200154905080876000018481548110612c4257612c42613397565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612c7557612c75613766565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610564565b6000915050610564565b601b54600090808203612cd157601f549150612cdf565b612cdc81600261343a565b91505b602154821115612cef5760215491505b5090565b60006116cd8383612d6e565b6000612d0a82612db5565b806105645750506001600160e01b0319161590565b6000806000806020600086516020880160008a5af192503d91506000519050828015612d6457508115612d555780600114612d64565b6000866001600160a01b03163b115b9695505050505050565b6000818152600183016020526040812054611b4257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610564565b600063dc9c4ac960e01b6001600160e01b031983161480612de657506001600160e01b03198216630a85bd0160e11b145b8061056457506001600160e01b0319821663115fa89b60e01b1492915050565b600060208284031215612e1857600080fd5b81356001600160e01b0319811681146116cd57600080fd5b600060208284031215612e4257600080fd5b5035919050565b60a08101610564828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b6001600160a01b0381168114611ab557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ed657612ed6612e97565b604052919050565b600067ffffffffffffffff821115612ef857612ef8612e97565b50601f01601f191660200190565b600082601f830112612f1757600080fd5b8135612f2a612f2582612ede565b612ead565b818152846020838601011115612f3f57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612f7257600080fd5b8435612f7d81612e82565b93506020850135612f8d81612e82565b925060408501359150606085013567ffffffffffffffff811115612fb057600080fd5b612fbc87828801612f06565b91505092959194509250565b60c081016105648284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b6000806040838503121561301e57600080fd5b82359150602083013561303081612e82565b809150509250929050565b602080825282518282018190526000918401906040840190835b81811015613073578351835260209384019390920191600101613055565b509095945050505050565b60005b83811015613099578181015183820152602001613081565b50506000910152565b60208152600082518060208401526130c181604085016020870161307e565b601f01601f19169190910160400192915050565b600080600080600060a086880312156130ed57600080fd5b853594506020860135935060408601359250606086013561310d81612e82565b9150608086013561311d81612e82565b809150509295509295909350565b60008060006060848603121561314057600080fd5b8335925060208401359150604084013561315981612e82565b809150509250925092565b600082601f83011261317557600080fd5b813567ffffffffffffffff81111561318f5761318f612e97565b8060051b61319f60208201612ead565b918252602081850181019290810190868411156131bb57600080fd5b6020860192505b83831015612d645782358252602092830192909101906131c2565b600080600080600060a086880312156131f557600080fd5b853561320081612e82565b9450602086013561321081612e82565b9350604086013567ffffffffffffffff81111561322c57600080fd5b61323888828901613164565b935050606086013567ffffffffffffffff81111561325557600080fd5b61326188828901613164565b925050608086013567ffffffffffffffff81111561327e57600080fd5b61328a88828901612f06565b9150509295509295909350565b600080604083850312156132aa57600080fd5b823563ffffffff811681146132be57600080fd5b946020939093013593505050565b602080825282518282018190526000918401906040840190835b818110156130735761332483855180518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b6020939093019260a092909201916001016132e6565b600080600080600060a0868803121561335257600080fd5b853561335d81612e82565b9450602086013561336d81612e82565b93506040860135925060608601359150608086013567ffffffffffffffff81111561327e57600080fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156133bf57600080fd5b815167ffffffffffffffff8111156133d657600080fd5b8201601f810184136133e757600080fd5b80516133f5612f2582612ede565b81815285602083850101111561340a57600080fd5b61341b82602083016020860161307e565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761056457610564613424565b634e487b7160e01b600052601260045260246000fd5b60008261348457634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561056457610564613424565b805162ffffff811681146134af57600080fd5b919050565b6000602082840312156134c657600080fd5b6116cd8261349c565b6000602082840312156134e157600080fd5b5051919050565b602080825260129082015271084c2c840d8d2e2ead2c8d2e8f240dac2e8d60731b604082015260600190565b80516001600160801b03811681146134af57600080fd5b60008060006060848603121561354057600080fd5b61354984613514565b602085015160409095015190969495509392505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b80516134af81612e82565b6000602082840312156135b557600080fd5b81516116cd81612e82565b63ffffffff828116828216039081111561056457610564613424565b6000600160ff1b82016135f1576135f1613424565b5060000390565b8082018082111561056457610564613424565b8051600281900b81146134af57600080fd5b6000806000806000806000806000806000806101808d8f03121561364057600080fd5b8c516bffffffffffffffffffffffff8116811461365c57600080fd5b9b5061366a60208e01613598565b9a5061367860408e01613598565b995061368660608e01613598565b985061369460808e0161349c565b97506136a260a08e0161360b565b96506136b060c08e0161360b565b95506136be60e08e01613514565b6101008e01516101208f0151919650945092506136de6101408e01613514565b91506136ed6101608e01613514565b90509295989b509295989b509295989b565b600060a082019050825182526001600160801b03602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b6000806040838503121561375557600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603160045260246000fdfea264697066735822122011894e91ce73d2dbbebdb36e24d0e77cc06714f46325c5b53bc4fdc3977f7d0764736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c806392a9178911610125578063c44e6640116100ad578063d58258f21161007c578063d58258f2146104f9578063d92aa38e1461050e578063e029982214610521578063f23a6e6114610532578063f2ac024b1461055157600080fd5b8063c44e6640146104a1578063c81fcc95146104c4578063cbb43836146104d5578063d547741f146104e657600080fd5b8063a6ab36f2116100f4578063a6ab36f21461043a578063a9d75b2b1461044d578063ad48d6111461045e578063bc197c811461046f578063c430694f1461048e57600080fd5b806392a91789146103fd578063949f5d2014610410578063a1abfd9514610421578063a217fddf1461043257600080fd5b80632f2ff15d116101a8578063392e53cd11610177578063392e53cd146103995780633cc7385b146103a45780635be53e74146103b55780638ad91345146103ca57806391d14854146103ea57600080fd5b80632f2ff15d1461034f5780632f8331821461036457806336568abe146103755780633721d4ae1461038857600080fd5b80631753dec7116101e45780631753dec7146102ba57806320bcb25d146102f8578063248a9ca31461030d57806324d7197a1461033e57600080fd5b806301ffc9a714610216578063098810071461023e5780630e07cfca1461025e578063150b7a0214610283575b600080fd5b610229610224366004612e06565b610559565b60405190151581526020015b60405180910390f35b61025161024c366004612e30565b61056a565b6040516102359190612e49565b600b546001600160a01b03165b6040516001600160a01b039091168152602001610235565b6102a1610291366004612f5c565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610235565b604080518082018252600080825260209182015281518083018352601a54808252601b54918301918252835190815290519181019190915201610235565b6103006105eb565b6040516102359190612fc8565b61033061031b366004612e30565b60009081526020819052604090206001015490565b604051908152602001610235565b6013546001600160a01b031661026b565b61036261035d36600461300b565b610664565b005b6011546001600160a01b031661026b565b61036261038336600461300b565b61068f565b6010546001600160a01b031661026b565b60195460ff16610229565b600f546001600160a01b031661026b565b6103bd6106c7565b604051610235919061303b565b6103dd6103d8366004612e30565b610760565b60405161023591906130a2565b6102296103f836600461300b565b6107d2565b61036261040b3660046130d5565b6107fb565b6003546001600160a01b031661026b565b6009546001600160a01b031661026b565b610330600081565b61033061044836600461312b565b6111db565b6008546001600160a01b031661026b565b6007546001600160a01b031661026b565b6102a161047d3660046131dd565b63bc197c8160e01b95945050505050565b61036261049c366004613297565b6116d4565b601954610100900463ffffffff1660405163ffffffff9091168152602001610235565b6018546001600160a01b031661026b565b600e546001600160a01b031661026b565b6103626104f436600461300b565b611795565b6105016117ba565b60405161023591906132cc565b61033061051c366004612e30565b6118db565b6002546001600160a01b031661026b565b6102a161054036600461333a565b63f23a6e6160e01b95945050505050565b601a54610330565b600061056482611a80565b92915050565b61059c6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b50600090815260246020908152604091829020825160a0810184528154815260018201549281019290925260028101549282019290925260038201546060820152600490910154608082015290565b6106246040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506040805160c081018252601c548152601d54602080830191909152601e5492820192909252601f5460608201529054608082015260215460a082015290565b60008281526020819052604090206001015461067f81611aab565b6106898383611ab8565b50505050565b6001600160a01b03811633146106b85760405163334bd91960e11b815260040160405180910390fd5b6106c28282611b4a565b505050565b606060006106d56022611bb5565b905060008167ffffffffffffffff8111156106f2576106f2612e97565b60405190808252806020026020018201604052801561071b578160200160208202803683370190505b50905060005b8281101561075957610734602282611bbf565b82828151811061074657610746613397565b6020908102919091010152600101610721565b5092915050565b60185460405163c87b56dd60e01b8152600481018390526060916001600160a01b03169063c87b56dd90602401600060405180830381865afa1580156107aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261056491908101906133ad565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610803611bcb565b8460000361084c5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590813140b539195081251607a1b60448201526064015b60405180910390fd5b600084118061085b5750600083115b6108995760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c185e5b595b9d608a1b6044820152606401610843565b6001600160a01b0382166108e55760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642062656e656669636961727960681b6044820152606401610843565b6001600160a01b03811661092e5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610843565b600085815260246020526040812080549091036109835760405162461bcd60e51b81526020600482015260136024820152724c502d4e4654206e6f7420666f722073616c6560681b6044820152606401610843565b6004810154156109cc5760405162461bcd60e51b8152602060048201526014602482015273105d58dd1a5bdb88185b1c9958591e481cdbdb1960621b6044820152606401610843565b60006109d7876118db565b601b8190556004830181905590508515610a0357610a03336002546001600160a01b0316903089611bf5565b8415610a2157610a21336007546001600160a01b0316903088611bf5565b85856000670de0b6b3a7640000610a38858561343a565b610a429190613467565b90506000670de0b6b3a7640000610a59868b61343a565b610a639190613467565b90506000821180610a745750600081115b610aaf5760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964207469707360a01b6044820152606401610843565b8115610ad957600254610acc906001600160a01b03168984611c5c565b610ad68285613489565b93505b8015610b0357600754610af6906001600160a01b03168983611c5c565b610b008184613489565b92505b5050600b546040805163ddca3f4360e01b815290516000926001600160a01b03169163ddca3f439160048083019260209291908290030181865afa158015610b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7391906134b4565b905082600003610cca57600754600b546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf291906134cf565b90506000610c01828585611c8d565b905083811115610c235760405162461bcd60e51b8152600401610843906134e8565b600e54600754610c40916001600160a01b03918216911683611d7b565b600e54604051636aa8f93560e01b8152600481018390523060248201526001600160a01b0390911690636aa8f935906044016020604051808303816000875af1158015610c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb591906134cf565b9450610cc18185613489565b93505050610e1b565b81600003610e1b57600254600b546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4791906134cf565b90506000610d56828685611c8d565b905084811115610d785760405162461bcd60e51b8152600401610843906134e8565b600e54600254610d95916001600160a01b03918216911683611d7b565b600e546040516301952d0960e31b8152600481018390523060248201526001600160a01b0390911690630ca96848906044016020604051808303816000875af1158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a91906134cf565b9350610e168186613489565b945050505b601d548084118015610e2c57508083115b610e6e5760405162461bcd60e51b8152602060048201526013602482015272139bdd08195b9bdd59da08199bdc88191d5cdd606a1b6044820152606401610843565b610e7960228c611e05565b610eb95760405162461bcd60e51b8152602060048201526011602482015270105d58dd1a5bdb881b9bdd08199bdd5b99607a1b6044820152606401610843565b6000610ec58283611e11565b9050610ed0816121d6565b8415610ef357601854600254610ef3916001600160a01b03918216911687611d7b565b8315610f1657601854600754610f16916001600160a01b03918216911686611d7b565b6018546040805160c081019091528d81526007546002546001600160a01b039384169363219f5d1793926020840192908216911610610f555787610f57565b885b81526007546002546020909201916001600160a01b03918216911610610f7d5788610f7f565b875b81526020016000815260200160008152602001428152506040518263ffffffff1660e01b8152600401610fb29190612fc8565b6060604051808303816000875af1158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff5919061352b565b505050600260160160009054906101000a90046001600160a01b03166001600160a01b031663b88d4fde30600260110160009054906101000a90046001600160a01b03168f6040518463ffffffff1660e01b8152600401611086939291906001600160a01b039384168152919092166020820152604081019190915260806060820181905260009082015260a00190565b600060405180830381600087803b1580156110a057600080fd5b505af11580156110b4573d6000803e3d6000fd5b50505050600260070160009054906101000a90046001600160a01b03166001600160a01b031663f242432a308a8f60016040518563ffffffff1660e01b81526004016111039493929190613560565b600060405180830381600087803b15801561111d57600080fd5b505af1158015611131573d6000803e3d6000fd5b50506007546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015611180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a491906134cf565b905080156111c3576007546111c3906001600160a01b03163383611c5c565b50505050505050506111d460018055565b5050505050565b60006111e5611bcb565b6111ef6000611aab565b600084116112355760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081413d5cc48185b5bdd5b9d606a1b6044820152606401610843565b6000831161127d5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081b585c9ad95d08185b5bdd5b9d605a1b6044820152606401610843565b6001600160a01b0382166112c65760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610843565b60195460ff161561130f5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610843565b6019805460ff1916600117905561133a6113263390565b6002546001600160a01b0316903087611bf5565b611353335b6007546001600160a01b0316903086611bf5565b601154600254611370916001600160a01b03918216911686611d7b565b60115460075461138d916001600160a01b03918216911685611d7b565b6011546040516326c662b160e11b815260048101869052602481018590523060448201526001600160a01b0390911690634d8cc562906064016020604051808303816000875af11580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140991906134cf565b601854601354604051635c46a7ef60e11b81523060048201526001600160a01b039182166024820152604481018490526080606482015260006084820152929350169063b88d4fde9060a401600060405180830381600087803b15801561146f57600080fd5b505af1158015611483573d6000803e3d6000fd5b50506009546040516308bb76a560e01b815260048101859052600093506001600160a01b0390911691506308bb76a590602401602060405180830381865afa1580156114d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f791906135a3565b90506001600160a01b0381166115405760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a590813140b54d19560921b6044820152606401610843565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ad91906134cf565b905080156115cc576002546115cc906001600160a01b03168383611c5c565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611615573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163991906134cf565b9050801561165857600754611658906001600160a01b03168683611c5c565b600954604051637921219560e11b81526001600160a01b039091169063f242432a9061168f90309089908990600190600401613560565b600060405180830381600087803b1580156116a957600080fd5b505af11580156116bd573d6000803e3d6000fd5b505050505050506116cd60018055565b9392505050565b6116dc611bcb565b6116e66000611aab565b60195460ff1661172a5760405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b9a5d1a585b1a5e9959608a1b6044820152606401610843565b6019805463ffffffff84811661010081810264ffffffff001985161790945592909104169081101561178757600061176282856135c0565b905061176d3361133f565b61177d8163ffffffff16846122a1565b61178561256e565b505b5061179160018055565b5050565b6000828152602081905260409020600101546117b081611aab565b6106898383611b4a565b606060006117c86022611bb5565b905060008167ffffffffffffffff8111156117e5576117e5612e97565b60405190808252806020026020018201604052801561184857816020015b6118356040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816118035790505b50905060005b82811015610759576000611863602283611bbf565b9050602460008281526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250508383815181106118c7576118c7613397565b60209081029190910101525060010161184e565b6000818152602460209081526040808320815160a0810183528154808252600183015494820194909452600282015492810192909252600381015460608301526004015460808201529083146119695760405162461bcd60e51b81526020600482015260136024820152724c502d4e4654206e6f7420666f722073616c6560681b6044820152606401610843565b6080810151156119b25760405162461bcd60e51b8152602060048201526014602482015273105d58dd1a5bdb88185b1c9958591e481cdbdb1960621b6044820152606401610843565b60008160600151116119fc5760405162461bcd60e51b8152602060048201526013602482015272105d58dd1a5bdb881b9bdd081cdd185c9d1959606a1b6044820152606401610843565b6000816060015142611a0e9190613489565b601c54909150670de0b6b3a76400008202906000611a2c8284612703565b611a35906135dc565b90506000611a4282612736565b60208701519091506000611a568284612703565b604089015190915080821215611a6e57809950611a72565b8199505b505050505050505050919050565b6000611a8b826128df565b8061056457506001600160e01b031982166392a9178960e01b1492915050565b611ab5813361290a565b50565b6000611ac483836107d2565b611b42576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055611afa3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610564565b506000610564565b6000611b5683836107d2565b15611b42576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610564565b6000610564825490565b60006116cd8383612943565b600260015403611bee57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b0384811660248301528381166044830152606482018390526106899186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061296d565b6040516001600160a01b038381166024830152604482018390526106c291859182169063a9059cbb90606401611c2a565b6000611ca162ffffff8316620f4240613489565b611cac90600261343a565b84611cbf62ffffff8516621e8480613489565b611cc9919061343a565b611d5f8686611ce062ffffff8816620f4240613489565b611cee620f4240600461343a565b611cf8919061343a565b611d02919061343a565b611d0c919061343a565b8780611d2062ffffff8916621e8480613489565b611d3262ffffff8a16621e8480613489565b611d3c919061343a565b611d46919061343a565b611d50919061343a565b611d5a91906135f8565b6129de565b611d699190613489565b611d739190613467565b949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611def91906134cf565b90506106898484611e0085856135f8565b612b37565b60006116cd8383612bc7565b6000808311611e4c5760405162461bcd60e51b81526020600482015260076024820152664e6f20504f573160c81b6044820152606401610843565b60008211611e8e5760405162461bcd60e51b815260206004820152600f60248201526e27379036b0b935b2ba103a37b5b2b760891b6044820152606401610843565b601154600254611eab916001600160a01b03918216911685611d7b565b601154600754611ec8916001600160a01b03918216911684611d7b565b6011546040516326c662b160e11b815260048101859052602481018490523060448201526001600160a01b0390911690634d8cc562906064016020604051808303816000875af1158015611f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4491906134cf565b6018546040516331a9108f60e11b81526004810183905291925030916001600160a01b0390911690636352211e90602401602060405180830381865afa158015611f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb691906135a3565b6001600160a01b031614611ff85760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610843565b60185460405163133f757160e31b8152600481018390526000916001600160a01b0316906399fbab889060240161018060405180830381865afa158015612043573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612067919061361d565b50506018546040805160a0810182528e81526001600160801b0386166020820152600081830181905260608201524260808201529051630624e65f60e11b8152949c506001600160a01b039091169a50630c49ccbe99506120d69850965050600490910193506136ff92505050565b60408051808303816000875af11580156120f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121189190613742565b50506018546040805160808101825284815230602082019081526001600160801b0382840181815260608401828152945163fc6f786560e01b81529351600485015291516001600160a01b0390811660248501529151811660448401529251909216606482015291169063fc6f78659060840160408051808303816000875af11580156121a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cd9190613742565b50505092915050565b60006121e0612cba565b6040805160a0810182528481526020808201848152815483850190815242606085019081526000608086018181528a82526024909552958620855181559251600180850191909155915160028401555160038301559151600490910155601a805494955091939092906122549084906135f8565b909155506122659050602284612cf3565b6106c25760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b6044820152606401610843565b600754600b546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa1580156122f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231691906134cf565b90506000600260090160009054906101000a90046001600160a01b03166001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015612370573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239491906134b4565b905060006123a3838584611c8d565b9050838111156123c55760405162461bcd60e51b8152600401610843906134e8565b600e546007546123e2916001600160a01b03918216911683611d7b565b600e54604051636aa8f93560e01b8152600481018390523060248201526001600160a01b0390911690636aa8f935906044016020604051808303816000875af1158015612433573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245791906134cf565b5060005b85811015612566576002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156124ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d091906134cf565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561251e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254291906134cf565b905060006125508383611e11565b905061255b816121d6565b50505060010161245b565b505050505050565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156125b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125db91906134cf565b9050801561267757600e54600254612600916001600160a01b03918216911683611d7b565b600e546040516301952d0960e31b8152600481018390523060248201526001600160a01b0390911690630ca96848906044016020604051808303816000875af1158015612651573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267591906134cf565b505b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156126c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e491906134cf565b9050801561179157611791336007546001600160a01b03169083611c5c565b81810282158382058314176000198410600160ff1b8413171661272557600080fd5b670de0b6b3a7640000900592915050565b6000680248ce36a70cb26b3e19821361275157506000919050565b680755bf798b4a1bf1e582126127985760405162461bcd60e51b815260206004820152600c60248201526b4558505f4f564552464c4f5760a01b6044820152606401610843565b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b39881029093036c240c330e9fb2d9cbaf0fd5aafb1981018102606090811d6d0277594991cfc85f6e2461837cd9018202811d6d1a521255e34f6a5061b25ef1c9c319018202811d6db1bbb201f443cf962f1a1d3db4a5018202811d6e02c72388d9f74f51a9331fed693f1419018202811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765084018402831d9081019084016d01d3967ed30fc4f89c02bab5708119010290911d6e0587f503bb6ea29d25fcb740196450019091026d360d7aeea093263ecc6e0ecb291760621b010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b60006128ea82612cff565b8061056457506001600160e01b031982166309ffb6a360e41b1492915050565b61291482826107d2565b6117915760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610843565b600082600001828154811061295a5761295a613397565b9060005260206000200154905092915050565b600080602060008451602086016000885af180612990576040513d6000823e3d81fd5b50506000513d915081156129a85780600114156129b5565b6001600160a01b0384163b155b1561068957604051635274afe760e01b81526001600160a01b0385166004820152602401610843565b6000600182116129ec575090565b816001600160801b8210612a055760809190911c9060401b5b680100000000000000008210612a205760409190911c9060201b5b6401000000008210612a375760209190911c9060101b5b620100008210612a4c5760109190911c9060081b5b6101008210612a605760089190911c9060041b5b60108210612a735760049190911c9060021b5b60048210612a7f5760011b5b600302600190811c90818581612a9757612a97613451565b048201901c90506001818581612aaf57612aaf613451565b048201901c90506001818581612ac757612ac7613451565b048201901c90506001818581612adf57612adf613451565b048201901c90506001818581612af757612af7613451565b048201901c90506001818581612b0f57612b0f613451565b048201901c9050612b2e818581612b2857612b28613451565b04821190565b90039392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612b888482612d1f565b610689576040516001600160a01b03848116602483015260006044830152612bbd91869182169063095ea7b390606401611c2a565b610689848261296d565b60008181526001830160205260408120548015612cb0576000612beb600183613489565b8554909150600090612bff90600190613489565b9050808214612c64576000866000018281548110612c1f57612c1f613397565b9060005260206000200154905080876000018481548110612c4257612c42613397565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612c7557612c75613766565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610564565b6000915050610564565b601b54600090808203612cd157601f549150612cdf565b612cdc81600261343a565b91505b602154821115612cef5760215491505b5090565b60006116cd8383612d6e565b6000612d0a82612db5565b806105645750506001600160e01b0319161590565b6000806000806020600086516020880160008a5af192503d91506000519050828015612d6457508115612d555780600114612d64565b6000866001600160a01b03163b115b9695505050505050565b6000818152600183016020526040812054611b4257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610564565b600063dc9c4ac960e01b6001600160e01b031983161480612de657506001600160e01b03198216630a85bd0160e11b145b8061056457506001600160e01b0319821663115fa89b60e01b1492915050565b600060208284031215612e1857600080fd5b81356001600160e01b0319811681146116cd57600080fd5b600060208284031215612e4257600080fd5b5035919050565b60a08101610564828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b6001600160a01b0381168114611ab557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ed657612ed6612e97565b604052919050565b600067ffffffffffffffff821115612ef857612ef8612e97565b50601f01601f191660200190565b600082601f830112612f1757600080fd5b8135612f2a612f2582612ede565b612ead565b818152846020838601011115612f3f57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612f7257600080fd5b8435612f7d81612e82565b93506020850135612f8d81612e82565b925060408501359150606085013567ffffffffffffffff811115612fb057600080fd5b612fbc87828801612f06565b91505092959194509250565b60c081016105648284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b6000806040838503121561301e57600080fd5b82359150602083013561303081612e82565b809150509250929050565b602080825282518282018190526000918401906040840190835b81811015613073578351835260209384019390920191600101613055565b509095945050505050565b60005b83811015613099578181015183820152602001613081565b50506000910152565b60208152600082518060208401526130c181604085016020870161307e565b601f01601f19169190910160400192915050565b600080600080600060a086880312156130ed57600080fd5b853594506020860135935060408601359250606086013561310d81612e82565b9150608086013561311d81612e82565b809150509295509295909350565b60008060006060848603121561314057600080fd5b8335925060208401359150604084013561315981612e82565b809150509250925092565b600082601f83011261317557600080fd5b813567ffffffffffffffff81111561318f5761318f612e97565b8060051b61319f60208201612ead565b918252602081850181019290810190868411156131bb57600080fd5b6020860192505b83831015612d645782358252602092830192909101906131c2565b600080600080600060a086880312156131f557600080fd5b853561320081612e82565b9450602086013561321081612e82565b9350604086013567ffffffffffffffff81111561322c57600080fd5b61323888828901613164565b935050606086013567ffffffffffffffff81111561325557600080fd5b61326188828901613164565b925050608086013567ffffffffffffffff81111561327e57600080fd5b61328a88828901612f06565b9150509295509295909350565b600080604083850312156132aa57600080fd5b823563ffffffff811681146132be57600080fd5b946020939093013593505050565b602080825282518282018190526000918401906040840190835b818110156130735761332483855180518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b6020939093019260a092909201916001016132e6565b600080600080600060a0868803121561335257600080fd5b853561335d81612e82565b9450602086013561336d81612e82565b93506040860135925060608601359150608086013567ffffffffffffffff81111561327e57600080fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156133bf57600080fd5b815167ffffffffffffffff8111156133d657600080fd5b8201601f810184136133e757600080fd5b80516133f5612f2582612ede565b81815285602083850101111561340a57600080fd5b61341b82602083016020860161307e565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761056457610564613424565b634e487b7160e01b600052601260045260246000fd5b60008261348457634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561056457610564613424565b805162ffffff811681146134af57600080fd5b919050565b6000602082840312156134c657600080fd5b6116cd8261349c565b6000602082840312156134e157600080fd5b5051919050565b602080825260129082015271084c2c840d8d2e2ead2c8d2e8f240dac2e8d60731b604082015260600190565b80516001600160801b03811681146134af57600080fd5b60008060006060848603121561354057600080fd5b61354984613514565b602085015160409095015190969495509392505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b80516134af81612e82565b6000602082840312156135b557600080fd5b81516116cd81612e82565b63ffffffff828116828216039081111561056457610564613424565b6000600160ff1b82016135f1576135f1613424565b5060000390565b8082018082111561056457610564613424565b8051600281900b81146134af57600080fd5b6000806000806000806000806000806000806101808d8f03121561364057600080fd5b8c516bffffffffffffffffffffffff8116811461365c57600080fd5b9b5061366a60208e01613598565b9a5061367860408e01613598565b995061368660608e01613598565b985061369460808e0161349c565b97506136a260a08e0161360b565b96506136b060c08e0161360b565b95506136be60e08e01613514565b6101008e01516101208f0151919650945092506136de6101408e01613514565b91506136ed6101608e01613514565b90509295989b509295989b509295989b565b600060a082019050825182526001600160801b03602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b6000806040838503121561375557600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603160045260246000fdfea264697066735822122011894e91ce73d2dbbebdb36e24d0e77cc06714f46325c5b53bc4fdc3977f7d0764736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "AuctionInitialized(uint256,uint256,uint256,address,address)": {
        "details": "Event to emit when the Bureau of the Dutch Auction is initialized",
        "params": {
          "assetTokenAmount": "The amount of asset tokens used to initialize the pool",
          "gameTokenAmount": "The amount of game tokens used to initialize the pool",
          "lpNftTokenId": "The token ID of the LP-NFT minted in the initialization",
          "receiver": "The address of the receiver of the LP-SFT holding the staked LP-NFT"
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Initializes the Dutch Auction contract",
        "params": {
          "owner_": "The owner of the Dutch Auction",
          "theReserve_": "The Reserve smart contract"
        }
      },
      "getAuctionCount()": {
        "details": "See {IDutchAuctionAdminActions-getAuctionCount}"
      },
      "getAuctionSettings()": {
        "details": "See {IDutchAuctionState-getAuctionSettings}"
      },
      "getAuctionState(uint256)": {
        "details": "See {IDutchAuctionState-getAuctionState}"
      },
      "getBureauState()": {
        "details": "See {IDutchAuctionState-getBureauState}"
      },
      "getCurrentAuctionCount()": {
        "details": "See {IDutchAuctionState-getCurrentAuctionCount}"
      },
      "getCurrentAuctionStates()": {
        "details": "Returns the auction states of the current auctions",
        "returns": {
          "_0": "An array of AuctionState structs"
        }
      },
      "getCurrentAuctions()": {
        "details": "Returns the list of current LP-NFT token IDs on auction",
        "returns": {
          "_0": "An array of LP-NFT token IDs"
        }
      },
      "getCurrentPriceBips(uint256)": {
        "details": "See {IDutchAuctionState-getCurrentPrice}"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTokenUri(uint256)": {
        "details": "See {IDutchAuctionState-getTokenUri}"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(uint256,uint256,address)": {
        "details": "See {IDutchAuction-initialize}"
      },
      "isInitialized()": {
        "details": "See {IDutchAuctionAdminActions-isInitialized}"
      },
      "lpSft()": {
        "details": "See {IDutchAuctionRoutes-lpSft}"
      },
      "marketStableSwapper()": {
        "details": "See {IDutchAuctionRoutes-marketStableSwapper}"
      },
      "marketToken()": {
        "details": "See {IDutchAuctionRoutes-marketToken}"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "pow1LpNftStakeFarm()": {
        "details": "See {IDutchAuctionRoutes-pow1LpNftStakeFarm}"
      },
      "pow1MarketPool()": {
        "details": "See {IDutchAuctionRoutes-pow1MarketPool}"
      },
      "pow1MarketPooler()": {
        "details": "See {IDutchAuctionRoutes-pow1MarketPooler}"
      },
      "pow1MarketSwapper()": {
        "details": "See {IDutchAuctionRoutes-pow1MarketSwapper}"
      },
      "pow1Token()": {
        "details": "See {IDutchAuctionRoutes-pow1Token}"
      },
      "pow5StableSwapper()": {
        "details": "See {IDutchAuctionRoutes-pow5StableSwapper}"
      },
      "pow5Token()": {
        "details": "See {IDutchAuctionRoutes-pow5Token}"
      },
      "purchase(uint256,uint256,uint256,address,address)": {
        "details": "See {IDutchAuctionActions-purchase}"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAuctionCount(uint32,uint256)": {
        "details": "See {IDutchAuctionAdminActions-setAuctionCount}"
      },
      "stableToken()": {
        "details": "See {IDutchAuctionRoutes-stableToken}"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}"
      },
      "uniswapV3NftManager()": {
        "details": "See {IDutchAuctionRoutes-uniswapV3NftManager}"
      }
    },
    "title": "Bureau of the Dutch Auction",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 1799,
        "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8239,
        "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
        "label": "_routes",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Routes)9240_storage"
      },
      {
        "astId": 8467,
        "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
        "label": "_initialized",
        "offset": 0,
        "slot": "25",
        "type": "t_bool"
      },
      {
        "astId": 8470,
        "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
        "label": "_targetLpNftCount",
        "offset": 1,
        "slot": "25",
        "type": "t_uint32"
      },
      {
        "astId": 8473,
        "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
        "label": "_bureauState",
        "offset": 0,
        "slot": "26",
        "type": "t_struct(BureauState)9067_storage"
      },
      {
        "astId": 8476,
        "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
        "label": "_auctionSettings",
        "offset": 0,
        "slot": "28",
        "type": "t_struct(AuctionSettings)9062_storage"
      },
      {
        "astId": 8479,
        "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
        "label": "_currentAuctions",
        "offset": 0,
        "slot": "34",
        "type": "t_struct(UintSet)5747_storage"
      },
      {
        "astId": 8484,
        "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
        "label": "_auctionStates",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_uint256,t_struct(AuctionState)9078_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)792": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGameTokenPooler)9827": {
        "encoding": "inplace",
        "label": "contract IGameTokenPooler",
        "numberOfBytes": "20"
      },
      "t_contract(IGameTokenSwapper)9893": {
        "encoding": "inplace",
        "label": "contract IGameTokenSwapper",
        "numberOfBytes": "20"
      },
      "t_contract(ILPNFTStakeFarm)9464": {
        "encoding": "inplace",
        "label": "contract ILPNFTStakeFarm",
        "numberOfBytes": "20"
      },
      "t_contract(ILPSFT)9567": {
        "encoding": "inplace",
        "label": "contract ILPSFT",
        "numberOfBytes": "20"
      },
      "t_contract(ILPSFTLendFarm)9502": {
        "encoding": "inplace",
        "label": "contract ILPSFTLendFarm",
        "numberOfBytes": "20"
      },
      "t_contract(IMarketStableSwapper)9961": {
        "encoding": "inplace",
        "label": "contract IMarketStableSwapper",
        "numberOfBytes": "20"
      },
      "t_contract(INOLPSFT)9583": {
        "encoding": "inplace",
        "label": "contract INOLPSFT",
        "numberOfBytes": "20"
      },
      "t_contract(INonfungiblePositionManager)6641": {
        "encoding": "inplace",
        "label": "contract INonfungiblePositionManager",
        "numberOfBytes": "20"
      },
      "t_contract(IUniV3StakeFarm)9534": {
        "encoding": "inplace",
        "label": "contract IUniV3StakeFarm",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Factory)5966": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Pool)5988": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Pool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(AuctionState)9078_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDutchAuctionState.AuctionState)",
        "numberOfBytes": "32",
        "value": "t_struct(AuctionState)9078_storage"
      },
      "t_struct(AuctionSettings)9062_storage": {
        "encoding": "inplace",
        "label": "struct IDutchAuctionState.AuctionSettings",
        "members": [
          {
            "astId": 9051,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "priceDecayRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9053,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "mintDustAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9055,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "priceIncrement",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9057,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "initialPriceBips",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9059,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "minPriceBips",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9061,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "maxPriceBips",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(AuctionState)9078_storage": {
        "encoding": "inplace",
        "label": "struct IDutchAuctionState.AuctionState",
        "members": [
          {
            "astId": 9069,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "lpNftTokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9071,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "startPriceBips",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9073,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "endPriceBips",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9075,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9077,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "salePrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BureauState)9067_storage": {
        "encoding": "inplace",
        "label": "struct IDutchAuctionState.BureauState",
        "members": [
          {
            "astId": 9064,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "totalAuctions",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9066,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "lastSalePriceBips",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Routes)9240_storage": {
        "encoding": "inplace",
        "label": "struct ITheReserveRoutes.Routes",
        "members": [
          {
            "astId": 9173,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "pow1Token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)792"
          },
          {
            "astId": 9176,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "pow5Token",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)792"
          },
          {
            "astId": 9179,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "lpPow1Token",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)792"
          },
          {
            "astId": 9182,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "lpPow5Token",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)792"
          },
          {
            "astId": 9185,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "noPow5Token",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IERC20)792"
          },
          {
            "astId": 9188,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "marketToken",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IERC20)792"
          },
          {
            "astId": 9191,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "stableToken",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(IERC20)792"
          },
          {
            "astId": 9194,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "lpSft",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(ILPSFT)9567"
          },
          {
            "astId": 9197,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "noLpSft",
            "offset": 0,
            "slot": "8",
            "type": "t_contract(INOLPSFT)9583"
          },
          {
            "astId": 9200,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "pow1MarketPool",
            "offset": 0,
            "slot": "9",
            "type": "t_contract(IUniswapV3Pool)5988"
          },
          {
            "astId": 9203,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "pow5StablePool",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IUniswapV3Pool)5988"
          },
          {
            "astId": 9206,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "marketStablePool",
            "offset": 0,
            "slot": "11",
            "type": "t_contract(IUniswapV3Pool)5988"
          },
          {
            "astId": 9209,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "pow1MarketSwapper",
            "offset": 0,
            "slot": "12",
            "type": "t_contract(IGameTokenSwapper)9893"
          },
          {
            "astId": 9212,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "pow5StableSwapper",
            "offset": 0,
            "slot": "13",
            "type": "t_contract(IGameTokenSwapper)9893"
          },
          {
            "astId": 9215,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "marketStableSwapper",
            "offset": 0,
            "slot": "14",
            "type": "t_contract(IMarketStableSwapper)9961"
          },
          {
            "astId": 9218,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "pow1MarketPooler",
            "offset": 0,
            "slot": "15",
            "type": "t_contract(IGameTokenPooler)9827"
          },
          {
            "astId": 9221,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "pow5StablePooler",
            "offset": 0,
            "slot": "16",
            "type": "t_contract(IGameTokenPooler)9827"
          },
          {
            "astId": 9224,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "pow1LpNftStakeFarm",
            "offset": 0,
            "slot": "17",
            "type": "t_contract(ILPNFTStakeFarm)9464"
          },
          {
            "astId": 9227,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "pow5LpNftStakeFarm",
            "offset": 0,
            "slot": "18",
            "type": "t_contract(IUniV3StakeFarm)9534"
          },
          {
            "astId": 9230,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "pow1LpSftLendFarm",
            "offset": 0,
            "slot": "19",
            "type": "t_contract(ILPSFTLendFarm)9502"
          },
          {
            "astId": 9233,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "pow5LpSftLendFarm",
            "offset": 0,
            "slot": "20",
            "type": "t_contract(ILPSFTLendFarm)9502"
          },
          {
            "astId": 9236,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "uniswapV3Factory",
            "offset": 0,
            "slot": "21",
            "type": "t_contract(IUniswapV3Factory)5966"
          },
          {
            "astId": 9239,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "uniswapV3NftManager",
            "offset": 0,
            "slot": "22",
            "type": "t_contract(INonfungiblePositionManager)6641"
          }
        ],
        "numberOfBytes": "736"
      },
      "t_struct(Set)5275_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5270,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5274,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)5747_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 5746,
            "contract": "contracts/src/bureaucracy/dutchAuction/DutchAuction.sol:DutchAuction",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5275_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}