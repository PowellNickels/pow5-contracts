{
  "address": "0xbE8178365C88851CA1BdB326E13CBA2A3bdc64c1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardRate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC20_FARM_OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpSftAddress",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpSftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recordLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpSftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recordRepayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6cf3f28c4b39b5341bb8b86fdd33717dfad3e226d8cb84e63be7947b836fcc92",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5Eb8d8a368B1F1A9de0c2E489e270d7AFD389C3C",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "814483",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000001000000000000000000000000000000000000000040000000000000000000020000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000004000001000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000100000000000020000000000000000000000000000000000080000000000000000000000000020010",
    "blockHash": "0xd9668d778bae436a0726a92082e50d6e6e3c4e619ba26a2cc7a833b90b3fb575",
    "transactionHash": "0x6cf3f28c4b39b5341bb8b86fdd33717dfad3e226d8cb84e63be7947b836fcc92",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 155,
        "transactionHash": "0x6cf3f28c4b39b5341bb8b86fdd33717dfad3e226d8cb84e63be7947b836fcc92",
        "address": "0xbE8178365C88851CA1BdB326E13CBA2A3bdc64c1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005eb8d8a368b1f1a9de0c2e489e270d7afd389c3c",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd9668d778bae436a0726a92082e50d6e6e3c4e619ba26a2cc7a833b90b3fb575"
      }
    ],
    "blockNumber": 155,
    "cumulativeGasUsed": "814483",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5Eb8d8a368B1F1A9de0c2E489e270d7AFD389C3C",
    "0x3414381EF8d64a2c0E8eC785553534122312787e",
    "1000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "607dfe4437c93ddfbd36914a2ea77f31",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_FARM_OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpSftAddress\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpSftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recordLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpSftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recordRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract to lend ERC20 tokens and earn rewards based on lending duration and amounts Rewards are calculated based on the amount of time and tokens loaned. Rewards are updated on every interaction.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"See {IFarm-balanceOf}\"},\"claimReward(address)\":{\"details\":\"See {IERC20InterestFarm-claimReward}\"},\"constructor\":{\"details\":\"Initializes the staking pool with the staking and reward tokens\",\"params\":{\"owner_\":\"The owner of the contract\",\"rewardRate_\":\"The reward rate per second per loaned token\",\"rewardToken_\":\"The address of the reward token\"}},\"earned(address)\":{\"details\":\"See {IFarm-earned}\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"recordLoan(address,uint256)\":{\"details\":\"See {IERC20InterestFarm-recordLoan}\"},\"recordRepayment(address,uint256)\":{\"details\":\"See {IERC20InterestFarm-recordRepayment}\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"rewardPerToken()\":{\"details\":\"See {IFarm-rewardPerToken}\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"totalLiquidity()\":{\"details\":\"See {IFarm-totalLoaned}\"}},\"stateVariables\":{\"ERC20_FARM_OPERATOR_ROLE\":{\"details\":\"Role allowing an address to deposit tokens into the pool\"},\"_lastUpdateTime\":{\"details\":\"Timestamp of the last reward update, used to calculate reward accruals\"},\"_rewardPerTokenStored\":{\"details\":\"Total rewards per token stored, updated upon changes to state affecting reward calculations\"},\"_rewardRate\":{\"details\":\"Reward rate per second per loaned token, scaled by 1e18 for precision\"},\"_rewards\":{\"details\":\"Mapping of user addresses to their accrued but not yet claimed rewards\"},\"_totalLoaned\":{\"details\":\"Total amount of tokens currently loaned in the pool\"},\"_userRewardPerTokenPaid\":{\"details\":\"Mapping of user addresses to the last recorded reward per token paid Used to calculate earned rewards.\"},\"_userStaked\":{\"details\":\"Mapping of user addresses to their loaned token amounts\"},\"rewardToken\":{\"details\":\"The reward token distributed to stakers\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/defi/ERC20InterestFarm.sol\":\"ERC20InterestFarm\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/src/defi/ERC20InterestFarm.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport {IERC20InterestFarm} from \\\"../interfaces/defi/IERC20InterestFarm.sol\\\";\\nimport {RewardMath} from \\\"../utils/math/RewardMath.sol\\\";\\n\\n/**\\n * @dev A contract to lend ERC20 tokens and earn rewards based on lending\\n * duration and amounts\\n *\\n * Rewards are calculated based on the amount of time and tokens loaned.\\n *\\n * Rewards are updated on every interaction.\\n */\\ncontract ERC20InterestFarm is\\n  Context,\\n  ReentrancyGuard,\\n  AccessControl,\\n  IERC20InterestFarm\\n{\\n  using SafeERC20 for IERC20;\\n  using RewardMath for uint256;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Roles\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Role allowing an address to deposit tokens into the pool\\n   */\\n  bytes32 public constant ERC20_FARM_OPERATOR_ROLE = \\\"ERC20_FARM_OPERATOR_ROLE\\\";\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Routes\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev The reward token distributed to stakers\\n   */\\n  IERC20 public immutable rewardToken;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Reward rate per second per loaned token, scaled by 1e18 for precision\\n   */\\n  uint256 private _rewardRate;\\n\\n  /**\\n   * @dev Total amount of tokens currently loaned in the pool\\n   */\\n  uint256 private _totalLoaned;\\n\\n  /**\\n   * @dev Timestamp of the last reward update, used to calculate reward accruals\\n   */\\n  uint256 private _lastUpdateTime;\\n\\n  /**\\n   * @dev Total rewards per token stored, updated upon changes to state\\n   * affecting reward calculations\\n   */\\n  uint256 private _rewardPerTokenStored;\\n\\n  /**\\n   * @dev Mapping of user addresses to their loaned token amounts\\n   */\\n  mapping(address => uint256) private _userStaked;\\n\\n  /**\\n   * @dev Mapping of user addresses to the last recorded reward per token paid\\n   *\\n   * Used to calculate earned rewards.\\n   */\\n  mapping(address => uint256) private _userRewardPerTokenPaid;\\n\\n  /**\\n   * @dev Mapping of user addresses to their accrued but not yet claimed rewards\\n   */\\n  mapping(address => uint256) private _rewards;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Initializes the staking pool with the staking and reward tokens\\n   *\\n   * @param owner_ The owner of the contract\\n   * @param rewardToken_ The address of the reward token\\n   * @param rewardRate_ The reward rate per second per loaned token\\n   */\\n  constructor(address owner_, address rewardToken_, uint256 rewardRate_) {\\n    // Validate parameters\\n    require(owner_ != address(0), \\\"Invalid owner\\\");\\n    require(rewardToken_ != address(0), \\\"Invalid reward token\\\");\\n    require(rewardRate_ > 0, \\\"Invalid reward rate\\\");\\n\\n    // Initialize {AccessControl}\\n    _grantRole(DEFAULT_ADMIN_ROLE, owner_);\\n\\n    // Initialize routes\\n    rewardToken = IERC20(rewardToken_);\\n\\n    // Initialize state\\n    _rewardRate = rewardRate_;\\n    _lastUpdateTime = block.timestamp;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IERC165} via {AccessControl} and {IERC20InterestFarm}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view override(AccessControl, IERC165) returns (bool) {\\n    return\\n      super.supportsInterface(interfaceId) ||\\n      interfaceId == type(IERC20InterestFarm).interfaceId;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IFarm} via {ERC20InterestFarm}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IFarm-rewardPerToken}\\n   */\\n  function rewardPerToken() public view override returns (uint256) {\\n    // Calculate the amount of time that has passed since the last update\\n    uint256 timeElapsed = block.timestamp - _lastUpdateTime;\\n\\n    return\\n      _rewardPerTokenStored.calculateRewardPerToken(\\n        timeElapsed,\\n        _rewardRate,\\n        _totalLoaned\\n      );\\n  }\\n\\n  /**\\n   * @dev See {IFarm-earned}\\n   */\\n  function earned(address account) public view override returns (uint256) {\\n    return\\n      _userStaked[account].calculateEarned(\\n        rewardPerToken(),\\n        _userRewardPerTokenPaid[account],\\n        _rewards[account]\\n      );\\n  }\\n\\n  /**\\n   * @dev See {IFarm-balanceOf}\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _userStaked[account];\\n  }\\n\\n  /**\\n   * @dev See {IFarm-totalLoaned}\\n   */\\n  function totalLiquidity() public view override returns (uint256) {\\n    return _totalLoaned;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IERC20InterestFarm} via {IFarm}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IERC20InterestFarm-recordLoan}\\n   */\\n  function recordLoan(\\n    address lpSftAddress,\\n    uint256 amount\\n  ) public override nonReentrant {\\n    // Validate access\\n    _checkRole(ERC20_FARM_OPERATOR_ROLE);\\n\\n    // Validate parameters\\n    require(lpSftAddress != address(0), \\\"Invalid LP-SFT address\\\");\\n\\n    // Ensure the user is staking a non-zero amount to avoid unnecessary\\n    // transactions\\n    require(amount > 0, \\\"Cannot stake 0\\\");\\n\\n    // Update state\\n    _updateReward(lpSftAddress);\\n\\n    // Increase the total amount of tokens loaned in the pool by the amount\\n    // loaned\\n    _totalLoaned += amount;\\n\\n    // Increase the loaned amount for this specific user\\n    _userStaked[lpSftAddress] += amount;\\n  }\\n\\n  /**\\n   * @dev See {IERC20InterestFarm-recordRepayment}\\n   */\\n  function recordRepayment(\\n    address lpSftAddress,\\n    uint256 amount\\n  ) public override nonReentrant {\\n    // Validate access\\n    _checkRole(ERC20_FARM_OPERATOR_ROLE);\\n\\n    // Validate parameters\\n    require(lpSftAddress != address(0), \\\"Invalid LP-SFT address\\\");\\n\\n    // Ensure the withdrawal amount is greater than zero to avoid useless\\n    // transactions\\n    require(amount > 0, \\\"Cannot withdraw 0\\\");\\n\\n    // Ensure the user has enough tokens loaned for the withdrawal\\n    require(\\n      amount <= _userStaked[lpSftAddress],\\n      \\\"Withdrawal amount exceeds balance\\\"\\n    );\\n\\n    // Update state\\n    _updateReward(lpSftAddress);\\n\\n    // Reduce the total loaned tokens in the pool by the withdrawal amount\\n    _totalLoaned -= amount;\\n\\n    // Reduce the user's loaned tokens by the withdrawal amount\\n    _userStaked[lpSftAddress] -= amount;\\n  }\\n\\n  /**\\n   * @dev See {IERC20InterestFarm-claimReward}\\n   */\\n  function claimReward(address lpSftAddress) public override nonReentrant {\\n    // Validate access\\n    _checkRole(ERC20_FARM_OPERATOR_ROLE);\\n\\n    // Validate parameters\\n    require(lpSftAddress != address(0), \\\"Invalid LP-SFT address\\\");\\n\\n    // Update state\\n    _updateReward(lpSftAddress);\\n\\n    // Calculate the total reward tokens the user has earned so far\\n    uint256 reward = _rewards[lpSftAddress];\\n\\n    // Check if there is any reward to claim to avoid unnecessary transactions\\n    // slither-disable-next-line timestamp\\n    if (reward > 0) {\\n      // Reset the user's reward balance to zero after claiming\\n      _rewards[_msgSender()] = 0;\\n\\n      // Transfer the reward tokens from the contract to the LP-SFT\\n      rewardToken.safeTransfer(lpSftAddress, reward);\\n    }\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Private interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Modifier to update the reward calculations for a user\\n   *\\n   * This modifier updates the global reward state and the specific state for a\\n   * given account.\\n   *\\n   * @param account The address of the user whose reward data needs updating\\n   */\\n  function _updateReward(address account) private {\\n    // Update the global state for rewards per token stored, reflecting any\\n    // changes since the last interaction\\n    _rewardPerTokenStored = rewardPerToken();\\n\\n    // Record the timestamp of this update to track the period over which\\n    // rewards are calculated\\n    _lastUpdateTime = block.timestamp;\\n\\n    // If the account is not the zero address, update the user-specific reward\\n    // data\\n    if (account != address(0)) {\\n      // Calculate the total rewards earned by the account up to this point,\\n      // using the latest reward per token rate\\n      _rewards[account] = earned(account);\\n\\n      // Update the rate of reward per token paid to this user to the latest\\n      // calculated value\\n      _userRewardPerTokenPaid[account] = _rewardPerTokenStored;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2aac5481e98b3070c30d48e7d0e8bf86e2bcd6616a70d181a1afc09e40ab71ef\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/defi/IERC20InterestFarm.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IFarm} from \\\"./IFarm.sol\\\";\\n\\n/**\\n * @dev A contract to lend ERC20 tokens and earn rewards based on lending\\n * duration and amounts\\n *\\n * Rewards are calculated based on the amount of time and tokens loaned.\\n *\\n * Rewards are updated on every interaction.\\n */\\ninterface IERC20InterestFarm is IERC165, IFarm {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public mutators\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Allows a user to deposit tokens into the pool\\n   *\\n   * This function increases both the total loaned tokens in the pool and the\\n   * loaned amount for the user calling the function.\\n   *\\n   * @param lpSftAddress The address of the LP-SFT\\n   * @param amount The amount of tokens the user wishes to stake\\n   */\\n  function recordLoan(address lpSftAddress, uint256 amount) external;\\n\\n  /**\\n   * @dev Allows a user to withdraw loaned tokens from the pool\\n   *\\n   * This function decreases both the total loaned tokens in the pool and the\\n   * user's loaned amount.\\n   *\\n   * @param lpSftAddress The address of the LP-SFT\\n   * @param amount The amount of tokens the user wishes to withdraw\\n   */\\n  function recordRepayment(address lpSftAddress, uint256 amount) external;\\n\\n  /**\\n   * @dev Allows a user to claim their accumulated rewards from the pool\\n   *\\n   * This function transfers the accumulated rewards to the user's wallet.\\n   *\\n   * @param lpSftAddress The address of the LP-SFT\\n   */\\n  function claimReward(address lpSftAddress) external;\\n}\\n\",\"keccak256\":\"0xff2fb43db740779a048943d8c209fd146d46b86b0a2b1e0a47f081399d16f5cc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/interfaces/defi/IFarm.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev A contract to earn rewards based on duration and amount\\n *\\n * Rewards are updated on every interaction.\\n */\\ninterface IFarm is IERC165 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Public accessors\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Calculates the accumulated balance of reward per token staked\\n   *\\n   * This function computes how much reward each token staked has accumulated\\n   * over time, up to the latest block timestamp. It is scaled up by 1e18 to\\n   * avoid precision loss during division.\\n   *\\n   * @return The updated reward per token value\\n   */\\n  function rewardPerToken() external view returns (uint256);\\n\\n  /**\\n   * @dev Calculates the total reward tokens that an account has earned but\\n   * not yet claimed\\n   *\\n   * This function determines the amount of reward tokens an account is entitled\\n   * to, based on their staked tokens and the difference between the latest\\n   * reward rate per token and the rate already paid to them, plus any rewards\\n   * already accrued but not yet transferred.\\n   *\\n   * @param account The address of the user to calculate the earned rewards\\n   *\\n   * @return The total amount of reward tokens earned by the user\\n   */\\n  function earned(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Calculates the total amount of staked tokens for a given account\\n   *\\n   * @param account The address of the account to check\\n   *\\n   * @return The total amount of liquidity lent by the account\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Get the total amount of tokens staked in the pool\\n   *\\n   * @return The total amount staked\\n   */\\n  function totalLiquidity() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x72d7e415d42227445fd1d1265d7d0d95ea9dfd0804aaa4455c6202fa36c7a81a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/src/utils/math/RewardMath.sol\":{\"content\":\"/*\\n * Copyright (C) 2024 Powell Nickels\\n * https://github.com/PowellNickels/pow5-contracts\\n *\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * See the file LICENSE.txt for more information.\\n */\\n\\npragma solidity 0.8.28;\\n\\n/**\\n * @dev Library for calculating rewards for staking contracts\\n */\\nlibrary RewardMath {\\n  uint256 private constant PRECISION = 1e18;\\n\\n  /**\\n   * @dev Calculates the new reward per token based on the time elapsed,\\n   * reward rate, and total staked\\n   *\\n   * Formula is:\\n   *\\n   *   New Reward Per Token = Reward Per Token Stored +\\n   *       ((Time Elapsed * Reward Rate * Precision) / Total Staked)\\n   *\\n   * @param rewardPerTokenStored The accumulated reward per token up to the last update\\n   * @param timeElapsed The amount of time that has elapsed since the last update\\n   * @param rewardRate The rate at which rewards are generated per token per second\\n   * @param totalStaked The total amount of the staked token\\n   *\\n   * @return The updated reward per token\\n   */\\n  function calculateRewardPerToken(\\n    uint256 rewardPerTokenStored,\\n    uint256 timeElapsed,\\n    uint256 rewardRate,\\n    uint256 totalStaked\\n  ) internal pure returns (uint256) {\\n    // Return the previously stored value if no tokens are currently staked\\n    if (totalStaked == 0) {\\n      return rewardPerTokenStored;\\n    }\\n\\n    // Calculate the additional rewards accumulated per token over the\\n    // elapsed time\\n    uint256 additionalReward = (timeElapsed * rewardRate * PRECISION) /\\n      totalStaked;\\n\\n    // Sum the previously stored rewards with the newly calculated additional\\n    // rewards\\n    return rewardPerTokenStored + additionalReward;\\n  }\\n\\n  /**\\n   * @dev Calculates the new earned rewards for a user\\n   *\\n   * Formula is:\\n   *\\n   *   Earned Rewards = Accrued Rewards +\\n   *       ((Staked * (Reward Per Token - User Reward Per Token Paid)) / Precision)\\n   *\\n   * @param staked The amount of tokens the user has staked\\n   * @param rewardPerToken The current calculated reward per token\\n   * @param userRewardPerTokenPaid The reward per token value that was last\\n   *                               recorded for the user\\n   * @param accruedRewards The amount of rewards that have been accrued for\\n   *                       the user so far\\n   *\\n   * @return The total earned rewards\\n   */\\n  function calculateEarned(\\n    uint256 staked,\\n    uint256 rewardPerToken,\\n    uint256 userRewardPerTokenPaid,\\n    uint256 accruedRewards\\n  ) internal pure returns (uint256) {\\n    // Calculate the reward difference per token since the last user update\\n    uint256 rewardDifference = rewardPerToken - userRewardPerTokenPaid;\\n\\n    // Calculate the new rewards earned based on the user's staked amount and\\n    // the reward difference\\n    uint256 newRewards = (staked * rewardDifference) / PRECISION;\\n\\n    // Add the newly calculated rewards to the previously accrued rewards to\\n    // get the total\\n    return newRewards + accruedRewards;\\n  }\\n}\\n\",\"keccak256\":\"0xc904d08614ed093b1a4441a9684f71294870a965e45ac40bd5b6947564a4a704\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610e47380380610e4783398101604081905261002f916101fd565b60016000556001600160a01b03831661007f5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21037bbb732b960991b60448201526064015b60405180910390fd5b6001600160a01b0382166100d55760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642072657761726420746f6b656e0000000000000000000000006044820152606401610076565b600081116101255760405162461bcd60e51b815260206004820152601360248201527f496e76616c6964207265776172642072617465000000000000000000000000006044820152606401610076565b61013060008461014c565b506001600160a01b039091166080526002555042600455610239565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff166101d75760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45060016101db565b5060005b92915050565b80516001600160a01b03811681146101f857600080fd5b919050565b60008060006060848603121561021257600080fd5b61021b846101e1565b9250610229602085016101e1565b9150604084015190509250925092565b608051610bec61025b6000396000818161023e015261069f0152610bec6000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c806370a0823111610097578063d279c19111610066578063d279c19114610213578063d547741f14610226578063f7c618c114610239578063fb41ec731461027857600080fd5b806370a08231146101c757806391d14854146101f0578063a217fddf14610203578063cd3daf9d1461020b57600080fd5b8063239c3df8116100d3578063239c3df81461016a578063248a9ca31461017d5780632f2ff15d146101a157806336568abe146101b457600080fd5b80628cc2621461010457806301ffc9a71461012a57806315770f921461014d5780631922bb6f14610155575b600080fd5b610117610112366004610a56565b61029a565b6040519081526020015b60405180910390f35b61013d610138366004610a78565b6102e1565b6040519015158152602001610121565b600354610117565b610168610163366004610aa2565b61030c565b005b610168610178366004610aa2565b610402565b61011761018b366004610acc565b6000908152600160208190526040909120015490565b6101686101af366004610ae5565b610552565b6101686101c2366004610ae5565b61057e565b6101176101d5366004610a56565b6001600160a01b031660009081526006602052604090205490565b61013d6101fe366004610ae5565b6105b6565b610117600081565b6101176105e1565b610168610221366004610a56565b610610565b610168610234366004610ae5565b6106dc565b6102607f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610121565b6101177745524332305f4641524d5f4f50455241544f525f524f4c4560401b81565b60006102db6102a76105e1565b6001600160a01b03841660009081526007602090815260408083205460088352818420546006909352922054929190610702565b92915050565b60006102ec82610749565b806102db57506001600160e01b03198216637463a38360e11b1492915050565b61031461077e565b6103387745524332305f4641524d5f4f50455241544f525f524f4c4560401b6107a8565b6001600160a01b0382166103675760405162461bcd60e51b815260040161035e90610b11565b60405180910390fd5b600081116103a85760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b604482015260640161035e565b6103b1826107b2565b80600360008282546103c39190610b57565b90915550506001600160a01b038216600090815260066020526040812080548392906103f0908490610b57565b909155505060016000555050565b5050565b61040a61077e565b61042e7745524332305f4641524d5f4f50455241544f525f524f4c4560401b6107a8565b6001600160a01b0382166104545760405162461bcd60e51b815260040161035e90610b11565b600081116104985760405162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b604482015260640161035e565b6001600160a01b03821660009081526006602052604090205481111561050a5760405162461bcd60e51b815260206004820152602160248201527f5769746864726177616c20616d6f756e7420657863656564732062616c616e636044820152606560f81b606482015260840161035e565b610513826107b2565b80600360008282546105259190610b6a565b90915550506001600160a01b038216600090815260066020526040812080548392906103f0908490610b6a565b6000828152600160208190526040909120015461056e816107a8565b6105788383610807565b50505050565b6001600160a01b03811633146105a75760405163334bd91960e11b815260040160405180910390fd5b6105b18282610880565b505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080600454426105f29190610b6a565b60025460035460055492935061060a929184916108ed565b91505090565b61061861077e565b61063c7745524332305f4641524d5f4f50455241544f525f524f4c4560401b6107a8565b6001600160a01b0381166106625760405162461bcd60e51b815260040161035e90610b11565b61066b816107b2565b6001600160a01b03811660009081526008602052604090205480156106ce57336000908152600860205260408120556106ce7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316838361093e565b506106d96001600055565b50565b600082815260016020819052604090912001546106f8816107a8565b6105788383610880565b60008061070f8486610b6a565b90506000670de0b6b3a76400006107268389610b7d565b6107309190610b94565b905061073c8482610b57565b925050505b949350505050565b60006001600160e01b03198216637965db0b60e01b14806102db57506301ffc9a760e01b6001600160e01b03198316146102db565b6002600054036107a157604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6106d98133610990565b6107ba6105e1565b600555426004556001600160a01b038116156106d9576107d98161029a565b6001600160a01b03821660009081526008602090815260408083209390935560055460079091529190205550565b600061081383836105b6565b6108785760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45060016102db565b5060006102db565b600061088c83836105b6565b156108785760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016102db565b6000816000036108fe575083610741565b600082670de0b6b3a76400006109148688610b7d565b61091e9190610b7d565b6109289190610b94565b90506109348187610b57565b9695505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526105b19084906109c9565b61099a82826105b6565b6103fe5760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161035e565b600080602060008451602086016000885af1806109ec576040513d6000823e3d81fd5b50506000513d91508115610a04578060011415610a11565b6001600160a01b0384163b155b1561057857604051635274afe760e01b81526001600160a01b038516600482015260240161035e565b80356001600160a01b0381168114610a5157600080fd5b919050565b600060208284031215610a6857600080fd5b610a7182610a3a565b9392505050565b600060208284031215610a8a57600080fd5b81356001600160e01b031981168114610a7157600080fd5b60008060408385031215610ab557600080fd5b610abe83610a3a565b946020939093013593505050565b600060208284031215610ade57600080fd5b5035919050565b60008060408385031215610af857600080fd5b82359150610b0860208401610a3a565b90509250929050565b602080825260169082015275496e76616c6964204c502d534654206164647265737360501b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156102db576102db610b41565b818103818111156102db576102db610b41565b80820281158282048414176102db576102db610b41565b600082610bb157634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122069f8f32b213124e8c241bd76233882dd54612e39550a8e1ef18e0167ba25b23164736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ff5760003560e01c806370a0823111610097578063d279c19111610066578063d279c19114610213578063d547741f14610226578063f7c618c114610239578063fb41ec731461027857600080fd5b806370a08231146101c757806391d14854146101f0578063a217fddf14610203578063cd3daf9d1461020b57600080fd5b8063239c3df8116100d3578063239c3df81461016a578063248a9ca31461017d5780632f2ff15d146101a157806336568abe146101b457600080fd5b80628cc2621461010457806301ffc9a71461012a57806315770f921461014d5780631922bb6f14610155575b600080fd5b610117610112366004610a56565b61029a565b6040519081526020015b60405180910390f35b61013d610138366004610a78565b6102e1565b6040519015158152602001610121565b600354610117565b610168610163366004610aa2565b61030c565b005b610168610178366004610aa2565b610402565b61011761018b366004610acc565b6000908152600160208190526040909120015490565b6101686101af366004610ae5565b610552565b6101686101c2366004610ae5565b61057e565b6101176101d5366004610a56565b6001600160a01b031660009081526006602052604090205490565b61013d6101fe366004610ae5565b6105b6565b610117600081565b6101176105e1565b610168610221366004610a56565b610610565b610168610234366004610ae5565b6106dc565b6102607f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610121565b6101177745524332305f4641524d5f4f50455241544f525f524f4c4560401b81565b60006102db6102a76105e1565b6001600160a01b03841660009081526007602090815260408083205460088352818420546006909352922054929190610702565b92915050565b60006102ec82610749565b806102db57506001600160e01b03198216637463a38360e11b1492915050565b61031461077e565b6103387745524332305f4641524d5f4f50455241544f525f524f4c4560401b6107a8565b6001600160a01b0382166103675760405162461bcd60e51b815260040161035e90610b11565b60405180910390fd5b600081116103a85760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b604482015260640161035e565b6103b1826107b2565b80600360008282546103c39190610b57565b90915550506001600160a01b038216600090815260066020526040812080548392906103f0908490610b57565b909155505060016000555050565b5050565b61040a61077e565b61042e7745524332305f4641524d5f4f50455241544f525f524f4c4560401b6107a8565b6001600160a01b0382166104545760405162461bcd60e51b815260040161035e90610b11565b600081116104985760405162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b604482015260640161035e565b6001600160a01b03821660009081526006602052604090205481111561050a5760405162461bcd60e51b815260206004820152602160248201527f5769746864726177616c20616d6f756e7420657863656564732062616c616e636044820152606560f81b606482015260840161035e565b610513826107b2565b80600360008282546105259190610b6a565b90915550506001600160a01b038216600090815260066020526040812080548392906103f0908490610b6a565b6000828152600160208190526040909120015461056e816107a8565b6105788383610807565b50505050565b6001600160a01b03811633146105a75760405163334bd91960e11b815260040160405180910390fd5b6105b18282610880565b505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080600454426105f29190610b6a565b60025460035460055492935061060a929184916108ed565b91505090565b61061861077e565b61063c7745524332305f4641524d5f4f50455241544f525f524f4c4560401b6107a8565b6001600160a01b0381166106625760405162461bcd60e51b815260040161035e90610b11565b61066b816107b2565b6001600160a01b03811660009081526008602052604090205480156106ce57336000908152600860205260408120556106ce7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316838361093e565b506106d96001600055565b50565b600082815260016020819052604090912001546106f8816107a8565b6105788383610880565b60008061070f8486610b6a565b90506000670de0b6b3a76400006107268389610b7d565b6107309190610b94565b905061073c8482610b57565b925050505b949350505050565b60006001600160e01b03198216637965db0b60e01b14806102db57506301ffc9a760e01b6001600160e01b03198316146102db565b6002600054036107a157604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6106d98133610990565b6107ba6105e1565b600555426004556001600160a01b038116156106d9576107d98161029a565b6001600160a01b03821660009081526008602090815260408083209390935560055460079091529190205550565b600061081383836105b6565b6108785760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45060016102db565b5060006102db565b600061088c83836105b6565b156108785760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016102db565b6000816000036108fe575083610741565b600082670de0b6b3a76400006109148688610b7d565b61091e9190610b7d565b6109289190610b94565b90506109348187610b57565b9695505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526105b19084906109c9565b61099a82826105b6565b6103fe5760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161035e565b600080602060008451602086016000885af1806109ec576040513d6000823e3d81fd5b50506000513d91508115610a04578060011415610a11565b6001600160a01b0384163b155b1561057857604051635274afe760e01b81526001600160a01b038516600482015260240161035e565b80356001600160a01b0381168114610a5157600080fd5b919050565b600060208284031215610a6857600080fd5b610a7182610a3a565b9392505050565b600060208284031215610a8a57600080fd5b81356001600160e01b031981168114610a7157600080fd5b60008060408385031215610ab557600080fd5b610abe83610a3a565b946020939093013593505050565b600060208284031215610ade57600080fd5b5035919050565b60008060408385031215610af857600080fd5b82359150610b0860208401610a3a565b90509250929050565b602080825260169082015275496e76616c6964204c502d534654206164647265737360501b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156102db576102db610b41565b818103818111156102db576102db610b41565b80820281158282048414176102db576102db610b41565b600082610bb157634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122069f8f32b213124e8c241bd76233882dd54612e39550a8e1ef18e0167ba25b23164736f6c634300081c0033",
  "devdoc": {
    "details": "A contract to lend ERC20 tokens and earn rewards based on lending duration and amounts Rewards are calculated based on the amount of time and tokens loaned. Rewards are updated on every interaction.",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "See {IFarm-balanceOf}"
      },
      "claimReward(address)": {
        "details": "See {IERC20InterestFarm-claimReward}"
      },
      "constructor": {
        "details": "Initializes the staking pool with the staking and reward tokens",
        "params": {
          "owner_": "The owner of the contract",
          "rewardRate_": "The reward rate per second per loaned token",
          "rewardToken_": "The address of the reward token"
        }
      },
      "earned(address)": {
        "details": "See {IFarm-earned}"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "recordLoan(address,uint256)": {
        "details": "See {IERC20InterestFarm-recordLoan}"
      },
      "recordRepayment(address,uint256)": {
        "details": "See {IERC20InterestFarm-recordRepayment}"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "rewardPerToken()": {
        "details": "See {IFarm-rewardPerToken}"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}"
      },
      "totalLiquidity()": {
        "details": "See {IFarm-totalLoaned}"
      }
    },
    "stateVariables": {
      "ERC20_FARM_OPERATOR_ROLE": {
        "details": "Role allowing an address to deposit tokens into the pool"
      },
      "_lastUpdateTime": {
        "details": "Timestamp of the last reward update, used to calculate reward accruals"
      },
      "_rewardPerTokenStored": {
        "details": "Total rewards per token stored, updated upon changes to state affecting reward calculations"
      },
      "_rewardRate": {
        "details": "Reward rate per second per loaned token, scaled by 1e18 for precision"
      },
      "_rewards": {
        "details": "Mapping of user addresses to their accrued but not yet claimed rewards"
      },
      "_totalLoaned": {
        "details": "Total amount of tokens currently loaned in the pool"
      },
      "_userRewardPerTokenPaid": {
        "details": "Mapping of user addresses to the last recorded reward per token paid Used to calculate earned rewards."
      },
      "_userStaked": {
        "details": "Mapping of user addresses to their loaned token amounts"
      },
      "rewardToken": {
        "details": "The reward token distributed to stakers"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6439,
        "contract": "contracts/src/defi/ERC20InterestFarm.sol:ERC20InterestFarm",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2343,
        "contract": "contracts/src/defi/ERC20InterestFarm.sol:ERC20InterestFarm",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2338_storage)"
      },
      {
        "astId": 22042,
        "contract": "contracts/src/defi/ERC20InterestFarm.sol:ERC20InterestFarm",
        "label": "_rewardRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 22045,
        "contract": "contracts/src/defi/ERC20InterestFarm.sol:ERC20InterestFarm",
        "label": "_totalLoaned",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 22048,
        "contract": "contracts/src/defi/ERC20InterestFarm.sol:ERC20InterestFarm",
        "label": "_lastUpdateTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 22051,
        "contract": "contracts/src/defi/ERC20InterestFarm.sol:ERC20InterestFarm",
        "label": "_rewardPerTokenStored",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 22056,
        "contract": "contracts/src/defi/ERC20InterestFarm.sol:ERC20InterestFarm",
        "label": "_userStaked",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22061,
        "contract": "contracts/src/defi/ERC20InterestFarm.sol:ERC20InterestFarm",
        "label": "_userRewardPerTokenPaid",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22066,
        "contract": "contracts/src/defi/ERC20InterestFarm.sol:ERC20InterestFarm",
        "label": "_rewards",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2338_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2338_storage"
      },
      "t_struct(RoleData)2338_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2335,
            "contract": "contracts/src/defi/ERC20InterestFarm.sol:ERC20InterestFarm",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2337,
            "contract": "contracts/src/defi/ERC20InterestFarm.sol:ERC20InterestFarm",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}